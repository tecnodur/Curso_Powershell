{"0": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "üéØ Objetivo do M√≥dulo",
    "content": "Compreender os fundamentos de PowerShell e Shell Scripting, configurar o ambiente de trabalho e dominar os comandos b√°sicos antes de avan√ßar para l√≥gica e scripting. ",
    "url": "/Curso_Powershell/Modules/Module1/#-objetivo-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module1/#-objetivo-do-m√≥dulo"
  },"1": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "üìå Estrutura do M√≥dulo",
    "content": "Sess√µes: . | Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o . | Introdu√ß√£o, instala√ß√£o, configura√ß√£o do ambiente e primeiros passos na consola. | . | Sess√£o 2: Comandos, Navega√ß√£o e Ajuda . | Explora√ß√£o de comandos, navega√ß√£o no sistema de ficheiros, ajuda integrada e tipos de comandos. | . | Sess√£o 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes Interpreta√ß√£o do output, manipula√ß√£o de objetos, propriedades e m√©todos, formata√ß√£o e redirecionamento de resultados. | . üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o . ",
    "url": "/Curso_Powershell/Modules/Module1/#-estrutura-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module1/#-estrutura-do-m√≥dulo"
  },"2": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/",
    
    "relUrl": "/Modules/Module1/"
  },"3": {
    "doc": "Module 4: Automa√ß√£o de Tarefas no Windows e Linux",
    "title": "Module 4: Automa√ß√£o de Tarefas no Windows e Linux",
    "content": "Sess√£o 1: Tarefas Agendadas e Cron Jobs (2 horas) . üéØ Objetivo . Aprender a automatizar tarefas recorrentes utilizando agendadores de tarefas no Windows e Linux. üìå Conte√∫dos . | Configura√ß√£o e uso de schtasks (Windows) e cron (Linux) | Automa√ß√£o de tarefas peri√≥dicas | Pr√°tica: Criar e testar tarefas agendadas | . Sess√£o 2: Trabalhar com Servi√ßos e Logs (2 horas) . üéØ Objetivo . Aprender a monitorizar e gerir servi√ßos e logs no Windows e Linux. üìå Conte√∫dos . | Comandos para gest√£o de servi√ßos (Get-Service, systemctl) | Monitoriza√ß√£o de logs (Get-EventLog, journalctl) | Pr√°tica: Monitorizar e registar logs automaticamente | . Sess√£o 3: Notifica√ß√µes e Relat√≥rios Automatizados (2 horas) . üéØ Objetivo . Criar scripts que enviam notifica√ß√µes e geram relat√≥rios automaticamente. üìå Conte√∫dos . | Envio de emails automatizados | Relat√≥rios peri√≥dicos com dados coletados | Pr√°tica: Desenvolver um sistema de notifica√ß√µes | . Sess√£o 4: Projeto Pr√°tico Final (2 horas) . üéØ Objetivo . Aplicar todos os conceitos aprendidos em um projeto pr√°tico completo. üìå Conte√∫dos . | Criar um sistema de monitoriza√ß√£o de servi√ßos com relat√≥rios autom√°ticos | Discuss√£o e revis√£o final do curso | . ",
    "url": "/Curso_Powershell/Modules/Module4/",
    
    "relUrl": "/Modules/Module4/"
  },"4": {
    "doc": "Module 3: Gest√£o de Ficheiros e Processos",
    "title": "Gest√£o de Ficheiros e Processos",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module3/#gest%C3%A3o-de-ficheiros-e-processos",
    
    "relUrl": "/Modules/Module3/#gest√£o-de-ficheiros-e-processos"
  },"5": {
    "doc": "Module 3: Gest√£o de Ficheiros e Processos",
    "title": "Module 3: Gest√£o de Ficheiros e Processos",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module3/",
    
    "relUrl": "/Modules/Module3/"
  },"6": {
    "doc": "M√≥dulo 2: L√≥gica, Vari√°veis e Scripting",
    "title": "üéØ Objetivo do M√≥dulo",
    "content": "Aprender a construir l√≥gica usando vari√°veis, condi√ß√µes, ciclos e scripts reutiliz√°veis em PowerShell. Este m√≥dulo prepara-te para escrever scripts mais avan√ßados e automatizar tarefas com efici√™ncia. ",
    "url": "/Curso_Powershell/Modules/Module2/#-objetivo-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module2/#-objetivo-do-m√≥dulo"
  },"7": {
    "doc": "M√≥dulo 2: L√≥gica, Vari√°veis e Scripting",
    "title": "üìå Estrutura do M√≥dulo",
    "content": ". | Sess√£o 1: Criar e Executar Scripts Como escrever scripts, permiss√µes de execu√ß√£o, estrutura de scripts, usar vari√°veis e l√≥gica dentro de ficheiros .ps1. | Sess√£o 2: Vari√°veis e Tipos de Dados Vari√°veis primitivas (string, int, bool), vari√°veis compostas (arrays, hashtables), e operadores b√°sicos. | Sess√£o 3: Estruturas Condicionais Uso de if, elseif, else, operadores de compara√ß√£o e booleanos. | Sess√£o 4: Loops e Itera√ß√µes for, foreach, while, do-until, uso em cen√°rios reais como valida√ß√µes ou repeti√ß√£o de comandos. | Sess√£o 5: Introdu√ß√£o a Fun√ß√µes Simples Definir fun√ß√µes (function Nome {}), passar par√¢metros, reutilizar c√≥digo e boas pr√°ticas b√°sicas. | . üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Criar e Executar Scripts . ",
    "url": "/Curso_Powershell/Modules/Module2/#-estrutura-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module2/#-estrutura-do-m√≥dulo"
  },"8": {
    "doc": "M√≥dulo 2: L√≥gica, Vari√°veis e Scripting",
    "title": "M√≥dulo 2: L√≥gica, Vari√°veis e Scripting",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/",
    
    "relUrl": "/Modules/Module2/"
  },"9": {
    "doc": "Curso de PowerShell & Shell Scripting",
    "title": "Bem-vindo ao Curso!",
    "content": "Este curso ir√° gui√°-lo atrav√©s dos fundamentos de PowerShell e Shell Scripting, introduzindo gradualmente conceitos mais avan√ßados por meio de exerc√≠cios pr√°ticos e exemplos do mundo real. üåü Estrutura do Curso . O curso est√° dividido em m√≥dulos, cada um contendo v√°rias sess√µes. O conte√∫do ser√° progressivamente disponibilizado de acordo com o calend√°rio das aulas. üìÖ Hor√°rio . | As aulas decorrem √†s segundas e quartas-feiras, das 19h √†s 21h. | O curso completo ter√° uma dura√ß√£o total de 30 horas. | . üìö Vis√£o Geral dos M√≥dulos e Sess√µes . M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting . Fundamentos essenciais para come√ßares a trabalhar com PowerShell de forma produtiva. Aprende a explorar o ambiente, comandos e o comportamento dos objetos. | Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o Instala√ß√£o, configura√ß√£o do ambiente, primeiros comandos na consola. | Sess√£o 2: Comandos, Navega√ß√£o e Ajuda Navegar no sistema de ficheiros, explorar comandos e utilizar a ajuda integrada. | Sess√£o 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes Compreender o sistema de objetos do PowerShell, formata√ß√£o de output, exporta√ß√µes e boas pr√°ticas no uso de comandos | . M√≥dulo 2: L√≥gica, Vari√°veis e Scripting . Aprende a construir a tua l√≥gica com vari√°veis, condi√ß√µes, ciclos e scripts reutiliz√°veis. | Sess√£o 1: Criar e Executar Scripts Vari√°veis primitivas (string, int, bool), vari√°veis compostas (arrays, hashtables), e operadores b√°sicos. | Sess√£o 2: Vari√°veis e Tipos de Dados Uso de if, elseif, else, operadores de compara√ß√£o e booleanos. | Sess√£o 3: Loops e Itera√ß√µes for, foreach, while, do-until, uso em cen√°rios reais como valida√ß√µes ou repeti√ß√£o de comandos. | Sess√£o 4: Criar e Executar Scripts Como escrever scripts, permiss√µes de execu√ß√£o, estrutura de scripts, usar vari√°veis e l√≥gica dentro de ficheiros .ps1. | Sess√£o 5: Introdu√ß√£o a Fun√ß√µes Simples Definir fun√ß√µes (function Nome {}), passar par√¢metros, reutilizar c√≥digo e boas pr√°ticas b√°sicas. | . M√≥dulo 3: Scripts, Ficheiros e Processos . Trabalha com ficheiros, diret√≥rios e processos do sistema. Automatiza tarefas do dia-a-dia com scripts mais robustos. | Sess√£o 1: Scripts B√°sicos e Seguran√ßa Execu√ß√£o de scripts, permiss√µes, paths relativos vs absolutos, input do utilizador. | Sess√£o 2: Scripts Tem√°ticos com Ficheiros Automatizar tarefas do dia-a-dia com ficheiros: contar linhas, procurar conte√∫do, renomear, organizar pastas. | Sess√£o 3: Pesquisa, Filtragem e Exporta√ß√£o Criar relat√≥rios com Where-Object, Select-String, Export-Csv, pesquisa recursiva e tratamento de grandes volumes. | Sess√£o 4: Processos e Servi√ßos Monitorizar uso de CPU, listar processos ativos, criar logs, gerir servi√ßos com Start-Service e Stop-Service. | Sess√£o 5: Desafio de Automatiza√ß√£o Criar um script completo que automatize a recolha e exporta√ß√£o de informa√ß√£o sobre o sistema. | . M√≥dulo 4: Automa√ß√£o de Tarefas no Windows e Linux . Usa o PowerShell para criar automa√ß√µes reais, com tarefas agendadas, notifica√ß√µes e integra√ß√£o com ficheiros de log. | Sess√£o 1: Tarefas Agendadas e Cron Jobs Criar e gerir tarefas agendadas no Windows ou cron jobs no Linux. | Sess√£o 2: Trabalhar com Servi√ßos e Logs Exportar logs de eventos, monitorizar servi√ßos, criar alertas simples. | Sess√£o 3: Notifica√ß√µes e Relat√≥rios Automatizados Gerar relat√≥rios CSV ou HTML, enviar por email, alertas com popups. | Sess√£o 4: Projeto Pr√°tico Final Desafio para consolidar conhecimentos: criar um script completo com l√≥gica, ciclos, exporta√ß√£o e agendamento. | . üîë Nota . O conte√∫do ser√° gradualmente disponibilizado. Por favor, siga de acordo com o calend√°rio das aulas. üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o . ",
    "url": "/Curso_Powershell/#bem-vindo-ao-curso",
    
    "relUrl": "/#bem-vindo-ao-curso"
  },"10": {
    "doc": "Curso de PowerShell & Shell Scripting",
    "title": "Curso de PowerShell & Shell Scripting",
    "content": " ",
    "url": "/Curso_Powershell/",
    
    "relUrl": "/"
  },"11": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "üß≠ Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o",
    "content": ". üéØ Objetivo Introduzir os conceitos b√°sicos de PowerShell e Shell Scripting, compar√°-los, e configurar o ambiente de trabalho. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html",
    
    "relUrl": "/Modules/Module1/session1.html"
  },"12": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1. Introdu√ß√£o (20 min)",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#1-introdu%C3%A7%C3%A3o-20-min",
    
    "relUrl": "/Modules/Module1/session1.html#1-introdu√ß√£o-20-min"
  },"13": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.1. O que √© um Shell?",
    "content": ". | Um Shell √© um programa que serve como interface entre o utilizador e o sistema operacional. Ele recebe comandos do utilizador, interpreta esses comandos e instrui o sistema operacional a execut√°-los. Os resultados da execu√ß√£o s√£o ent√£o exibidos de volta ao utilizador. | Existem dois tipos principais de Shells: | . Shells de Linha de Comando (CLI - Command Line Interface): . | Interfaces textuais onde o usu√°rio interage digitando comandos e recebendo respostas em forma de texto. | Exemplos: PowerShell, Bash, cmd.exe (Prompt de Comando do Windows). | . Shells Gr√°ficos (GUI - Graphical User Interface): . | Interfaces visuais com √≠cones, janelas e menus. | Exemplos: Windows Explorer, Finder no macOS. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#11-o-que-%C3%A9-um-shell",
    
    "relUrl": "/Modules/Module1/session1.html#11-o-que-√©-um-shell"
  },"14": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.2. O que √© PowerShell?",
    "content": ". | PowerShell √© um exemplo de shell de linha de comando e uma linguagem de script integrados em um √∫nico ambiente. | Foi inicialmente projetado como uma framework para automatizar tarefas administrativas no Windows, mas evoluiu para uma ferramenta multiplataforma dispon√≠vel em Windows, Linux e MacOS. | Atualmente, √© utilizado para diversos tipos de tarefas, como administra√ß√£o de sistemas, automa√ß√£o de fluxos de trabalho e integra√ß√£o com servi√ßos na cloud. | O PowerShell oferece muitos comandos √∫teis, mas suas capacidades podem ser expandidas a qualquer momento pela instala√ß√£o de m√≥dulos adicionais. | Baseia-se em .NET e inclui uma linguagem de scripting, bem como um interpretador de linha de comandos. | Permite a automa√ß√£o de tarefas administrativas no Windows, Linux e MacOS. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#12-o-que-%C3%A9-powershell",
    
    "relUrl": "/Modules/Module1/session1.html#12-o-que-√©-powershell"
  },"15": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.3. Diferen√ßa entre CMD e PowerShell no Windows",
    "content": "O CMD (Command Prompt) e o PowerShell s√£o ambos Shells de linha de comando no Windows, mas t√™m diferen√ßas fundamentais em termos de capacidade, sintaxe, funcionalidade e uso. | Aspecto | CMD (Command Prompt) | PowerShell | . | Lan√ßamento | D√©cada de 1980 (MS-DOS, Windows NT) | 2006 (Windows PowerShell), 2016 (PowerShell Core) | . | Linguagem | N√£o √© uma linguagem de programa√ß√£o completa. | Linguagem de scripting poderosa e orientada a objetos. | . | Comandos | Baseados em MS-DOS e Windows NT. Ex.: dir, copy, del. | Usa cmdlets (Get-Process, Get-Service) e aceita comandos do CMD. | . | Suporte a Objetos | Trabalha apenas com texto puro. | Trabalha com objetos .NET, permitindo manipula√ß√£o avan√ßada de dados. | . | Automa√ß√£o | Limitada, mais adequada para tarefas b√°sicas. | Ideal para automa√ß√£o de sistemas, CI/CD, gerenciamento de servidores e cloud. | . | Pipeline | Simples (envia texto de um comando para outro). | Complexo e poderoso (envia objetos completos entre cmdlets). | . | Compatibilidade | Compat√≠vel com comandos antigos do MS-DOS. | Compat√≠vel com comandos do CMD, mas oferece muito mais funcionalidades. | . | Integra√ß√£o | Focado apenas no sistema operacional local. | Pode gerenciar sistemas locais, remotos e na nuvem (Azure, AWS). | . | Editor Integrado | N√£o possui. | Inclui PowerShell ISE e √© totalmente integrado ao Visual Studio Code. | . | Exemplos de Uso | dir, ipconfig, netstat. | Get-Process, Get-Service, Get-Command, Invoke-RestMethod. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#13-diferen%C3%A7a-entre-cmd-e-powershell-no-windows",
    
    "relUrl": "/Modules/Module1/session1.html#13-diferen√ßa-entre-cmd-e-powershell-no-windows"
  },"16": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.4. üöÄ Resumo",
    "content": ". | CMD: √â antigo, limitado e trabalha apenas com texto puro. Ideal para tarefas b√°sicas e r√°pidas. | PowerShell: √â moderno, poderoso e trabalha com objetos, facilitando automa√ß√£o avan√ßada, administra√ß√£o de sistemas e integra√ß√£o com plataformas na nuvem. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#14--resumo",
    
    "relUrl": "/Modules/Module1/session1.html#14--resumo"
  },"17": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.5. O que √© Shell Scripting?",
    "content": ". | Shell Scripting √© um m√©todo de automatizar tarefas por meio de scripts executados pelo Shell do sistema operacional. | Amplamente utilizado em sistemas Unix/Linux, mas tamb√©m dispon√≠vel no Windows (especialmente com o WSL - Windows Subsystem for Linux). | Inclui linguagens como Bash, Zsh, e outras. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#15-o-que-%C3%A9-shell-scripting",
    
    "relUrl": "/Modules/Module1/session1.html#15-o-que-√©-shell-scripting"
  },"18": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.6. Casos de uso t√≠picos de cada linguagem:",
    "content": ". | PowerShell: Administra√ß√£o de sistemas Windows, automatiza√ß√£o de tarefas de infraestrutura em Azure, manipula√ß√£o de arquivos e relat√≥rios. | Bash: Gest√£o de servidores Linux, manipula√ß√£o de arquivos e diret√≥rios, automatiza√ß√£o de backups e processos de instala√ß√£o. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#16-casos-de-uso-t%C3%ADpicos-de-cada-linguagem",
    
    "relUrl": "/Modules/Module1/session1.html#16-casos-de-uso-t√≠picos-de-cada-linguagem"
  },"19": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.7. Funcionalidades do PowerShell",
    "content": ". | Sistema de Ajuda Integrado: Get-Help Get-Process . | Pipeline Poderoso: Get-Process | Where-Object {$_.CPU -gt 100} . | Aliases: Exemplo: ls, cls, cd funcionam no PowerShell. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#17-funcionalidades-do-powershell",
    
    "relUrl": "/Modules/Module1/session1.html#17-funcionalidades-do-powershell"
  },"20": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.8. Como o PowerShell √© Diferente de Shells Tradicionais",
    "content": ". | Trabalha com objetos, n√£o com texto. | Usa cmdlets com sintaxe Verbo-Substantivo. | Diferentes tipos de comandos: execut√°veis, cmdlets, fun√ß√µes, aliases. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#18-como-o-powershell-%C3%A9-diferente-de-shells-tradicionais",
    
    "relUrl": "/Modules/Module1/session1.html#18-como-o-powershell-√©-diferente-de-shells-tradicionais"
  },"21": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "2. Instala√ß√£o e Configura√ß√£o do Ambiente",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#2-instala%C3%A7%C3%A3o-e-configura%C3%A7%C3%A3o-do-ambiente",
    
    "relUrl": "/Modules/Module1/session1.html#2-instala√ß√£o-e-configura√ß√£o-do-ambiente"
  },"22": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "2.1. Windows PowerShell vs. PowerShell Core",
    "content": "Windows PowerShell . | Plataforma: Apenas Windows. | Baseado em: .NET Framework (antigo e obsoleto para novos projetos). | √öltima vers√£o: 5.1 (Lan√ßada em 2016, com √∫ltimas atualiza√ß√µes de seguran√ßa em 2019). | Instala√ß√£o: Pr√©-instalado em vers√µes modernas do Windows (Windows 7 SP1, Windows Server 2008 R2 e posteriores). | Objetivo Principal: Administra√ß√£o de sistemas Windows e automa√ß√£o de tarefas locais. | Limita√ß√µes: . | Apenas dispon√≠vel no Windows, sem suporte para Linux ou MacOS. | N√£o suporta .NET Core ou vers√µes modernas de .NET. | Desenvolvimento interrompido, apenas com atualiza√ß√µes de seguran√ßa. | . | Recomenda√ß√£o: Usar apenas para manter compatibilidade com sistemas antigos ou quando funcionalidades espec√≠ficas do Windows PowerShell s√£o necess√°rias. | . PowerShell Core (Agora chamado apenas de PowerShell) . | Plataforma: Multiplataforma (Windows, Linux, MacOS). | Baseado em: .NET Core / .NET 5+ (mais recente, mais eficiente e de c√≥digo aberto). | √öltima vers√£o: 7.x (Atualizado regularmente). | Instala√ß√£o: Dispon√≠vel para download no GitHub. | Objetivo Principal: Automa√ß√£o e administra√ß√£o de sistemas em m√∫ltiplas plataformas, incluindo integra√ß√£o com servi√ßos em cloud (Azure, AWS, etc). | Vantagens: . | Funciona em m√∫ltiplos sistemas operacionais. | Melhor desempenho, menor consumo de mem√≥ria e suporte para APIs modernas do .NET. | Desenvolvimento ativo e cont√≠nuo com novas funcionalidades. | Melhor compatibilidade com plataformas cloud e ferramentas DevOps. | . | Recomenda√ß√£o: Ideal para novos projetos, especialmente quando a compatibilidade multiplataforma √© necess√°ria. | . üí° Nota: Desde a vers√£o 7.0, o PowerShell Core √© simplesmente chamado de PowerShell. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#21-windows-powershell-vs-powershell-core",
    
    "relUrl": "/Modules/Module1/session1.html#21-windows-powershell-vs-powershell-core"
  },"23": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "2.2. Bash no Linux, MacOS e Windows (WSL)",
    "content": "Linux e MacOS . | Disponibilidade: O Bash √© instalado por padr√£o em praticamente todas as distribui√ß√µes Linux e no MacOS. | Alternativas: Pode ser substitu√≠do por shells modernos como zsh, fish, ou ksh. | Popularidade: Especialmente comum em sistemas Linux, onde √© usado para tarefas administrativas, scripts de inicializa√ß√£o e automa√ß√£o. | Atualiza√ß√£o: No Linux, pode ser atualizado usando o sistema de pacotes da distribui√ß√£o (ex.: apt, yum, dnf). | . Windows (WSL - Windows Subsystem for Linux) . | Disponibilidade: Dispon√≠vel nativamente no Windows 10 e 11. | Objetivo: Permitir que os utilizadores executem um ambiente Linux diretamente no Windows sem necessidade de uma m√°quina virtual completa. | Vantagens: . | Permite desenvolver e testar scripts Bash nativamente no Windows. | F√°cil integra√ß√£o com ferramentas de desenvolvimento modernas (ex.: Docker). | Melhor suporte para automa√ß√£o e ferramentas Linux em ambientes Windows. | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#22-bash-no-linux-macos-e-windows-wsl",
    
    "relUrl": "/Modules/Module1/session1.html#22-bash-no-linux-macos-e-windows-wsl"
  },"24": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3. Como Instalar e Configurar PowerShell Core e Bash",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#3-como-instalar-e-configurar-powershell-core-e-bash",
    
    "relUrl": "/Modules/Module1/session1.html#3-como-instalar-e-configurar-powershell-core-e-bash"
  },"25": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3.1. Instalar PowerShell (Core)",
    "content": ". | Windows (WinGet - Recomendado): winget install --id Microsoft.PowerShell --source winget . | Windows (MSI Installer): . | Baixar o instalador mais recente do GitHub Releases. | Executar o instalador e seguir as instru√ß√µes. | . | Linux (Debian/Ubuntu): sudo apt-get install -y powershell . | Linux (Fedora/CentOS/RHEL): sudo dnf install -y powershell . | MacOS (via Homebrew): brew install --cask powershell . | Executar o PowerShell: pwsh . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#31-instalar-powershell-core",
    
    "relUrl": "/Modules/Module1/session1.html#31-instalar-powershell-core"
  },"26": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3.2. Instalar Bash no Windows (WSL)",
    "content": ". | Habilitar o WSL: wsl --install . | Listar distribui√ß√µes disponiveis wsl --list --online . | Instalar uma distribui√ß√£o espec√≠fica (ex.: Ubuntu): wsl --install -d Ubuntu . | Verificar a vers√£o do WSL instalada: wsl -l -v . | Atualizar o WSL para a vers√£o 2: wsl --set-default-version 2 . | Executar o Bash no Windows: wsl . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#32-instalar-bash-no-windows-wsl",
    
    "relUrl": "/Modules/Module1/session1.html#32-instalar-bash-no-windows-wsl"
  },"27": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3.3. Comandos √∫teis do WSL",
    "content": "| wsl -l: Lista todas as distribui√ß√µes WSL instaladas. | wsl -d &lt;distribution name&gt;: Inicia uma nova sess√£o WSL usando a distribui√ß√£o especificada. | wsl --shutdown: Encerra todas as sess√µes WSL em execu√ß√£o. | wsl --terminate &lt;distribution name&gt;: Termina a sess√£o WSL da distribui√ß√£o especificada. | wsl --default &lt;distribution name&gt; ou wsl --setdefault &lt;distribution name&gt;: Define a distribui√ß√£o WSL padr√£o (usada quando se executa apenas wsl no terminal). | wsl --terminate &lt;distribution name&gt;: Termina uma distribui√ß√£o WSL em execu√ß√£o. | wsl --shutdown: Encerra todas as inst√¢ncias WSL em execu√ß√£o. | . üîó Refer√™ncias: . | https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.5 | https://www.gnu.org/software/bash/manual/ | https://learn.microsoft.com/en-us/windows/wsl/install | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#33-comandos-%C3%BAteis-do-wsl",
    
    "relUrl": "/Modules/Module1/session1.html#33-comandos-√∫teis-do-wsl"
  },"28": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4. Primeiros Comandos B√°sicos",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#4-primeiros-comandos-b%C3%A1sicos",
    
    "relUrl": "/Modules/Module1/session1.html#4-primeiros-comandos-b√°sicos"
  },"29": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4.1. Comandos Comuns em PowerShell e Bash",
    "content": "(tabela pwd, ls, cd, etc.) . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#41-comandos-comuns-em-powershell-e-bash",
    
    "relUrl": "/Modules/Module1/session1.html#41-comandos-comuns-em-powershell-e-bash"
  },"30": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4.2. Diferen√ßas entre PowerShell e Bash",
    "content": ". | PowerShell usa objetos e cmdlets. | Bash usa texto e comandos Unix-like. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#42-diferen%C3%A7as-entre-powershell-e-bash",
    
    "relUrl": "/Modules/Module1/session1.html#42-diferen√ßas-entre-powershell-e-bash"
  },"31": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4.3. üîç Exemplo Pr√°tico de Diferen√ßa: Objetos vs. Texto",
    "content": ". | PowerShell: Get-Process | Where-Object { $_.CPU -gt 100 } . | Bash: top -b -n 1 | awk '{ if($9 &gt; 0.1) print $0 }' . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#43--exemplo-pr%C3%A1tico-de-diferen%C3%A7a-objetos-vs-texto",
    
    "relUrl": "/Modules/Module1/session1.html#43--exemplo-pr√°tico-de-diferen√ßa-objetos-vs-texto"
  },"32": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5. Pr√°tica",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#5-pr%C3%A1tica",
    
    "relUrl": "/Modules/Module1/session1.html#5-pr√°tica"
  },"33": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.1. üíª Exerc√≠cio 1: Onde estamos?",
    "content": "pwd . pwd . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#51--exerc%C3%ADcio-1-onde-estamos",
    
    "relUrl": "/Modules/Module1/session1.html#51--exerc√≠cio-1-onde-estamos"
  },"34": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.2. üíª Exerc√≠cio 2: O que existe aqui?",
    "content": "ls ls | Format-List . ls ls -l . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#52--exerc%C3%ADcio-2-o-que-existe-aqui",
    
    "relUrl": "/Modules/Module1/session1.html#52--exerc√≠cio-2-o-que-existe-aqui"
  },"35": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.3. üíª Exerc√≠cio 3: Criar diret√≥rios",
    "content": "mkdir Aula1 . mkdir Aula1 . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#53--exerc%C3%ADcio-3-criar-diret%C3%B3rios",
    
    "relUrl": "/Modules/Module1/session1.html#53--exerc√≠cio-3-criar-diret√≥rios"
  },"36": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.4. üíª Exerc√≠cio 4: Entrar e sair da pasta",
    "content": "cd Aula1 cd .. cd Aula1 cd .. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#54--exerc%C3%ADcio-4-entrar-e-sair-da-pasta",
    
    "relUrl": "/Modules/Module1/session1.html#54--exerc√≠cio-4-entrar-e-sair-da-pasta"
  },"37": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.5. üíª Exerc√≠cio 5: Criar um ficheiro vazio",
    "content": "New-Item -Name exemplo.txt -ItemType File . touch exemplo.txt . üì¶ Estes exerc√≠cios servem como base para comandos mais avan√ßados que ser√£o explorados nas sess√µes seguintes. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#55--exerc%C3%ADcio-5-criar-um-ficheiro-vazio",
    
    "relUrl": "/Modules/Module1/session1.html#55--exerc√≠cio-5-criar-um-ficheiro-vazio"
  },"38": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html",
    
    "relUrl": "/Modules/Module1/session1.html"
  },"39": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "üß≠ Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "content": ". üéØ Objetivo . Explorar os comandos essenciais para trabalhar com PowerShell, aprender a navegar no sistema de ficheiros, interpretar a sa√≠da dos comandos e utilizar a ajuda integrada. | 1. üìñ Ajuda e Descoberta de Comandos . | 1.1. üß™ Exemplos | 1.2. üîç Como ler o output do Help | 1.3. üîé Comando para inspecionar objetos | 1.4. üß© Exerc√≠cios | . | 2. üîå Providers . | 2.1. üìÇ FileSystem | 2.2. üß¨ Registry | 2.3. üå± Environment | 2.4. üè∑Ô∏è Alias | 2.5. ‚úÖ Outros providers | . | 3. üìÅ Navega√ß√£o no Sistema de Ficheiros . | 3.1. üß™ Comandos √∫teis | 3.2. üåê Dicas | 3.3. üß© Exerc√≠cios | . | 4. üå± Vari√°veis de ambiente . | 4.1. üìã Consultar vari√°veis | 4.2. ‚úèÔ∏è Alterar ou definir vari√°veis (temporariamente) | 4.3. üßº Remover vari√°veis | 4.4. üß© Exerc√≠cios | 4.5. üîç Diferen√ßa entre $ e $Env: | . | 5. üè∑Ô∏è Alias . | 5.1. üîé Exemplos simples | 5.2. üß© Exerc√≠cios | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html",
    
    "relUrl": "/Modules/Module1/session2.html"
  },"40": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1. üìñ Ajuda e Descoberta de Comandos",
    "content": "Uma das grandes for√ßas do PowerShell √© a sua documenta√ß√£o integrada. Comandos como Get-Help e Get-Command permitem ao utilizador aprender diretamente a partir da consola. ‚ÑπÔ∏è Nota Importante: Se vires uma mensagem como: ‚ÄúCannot find the Help files for this cmdlet on this computer. It is displaying only partial help.‚Äù Significa que o PowerShell est√° a mostrar apenas uma vers√£o resumida. Podes: . | Tentar usar Update-Help para descarregar a vers√£o completa (se tiveres permiss√µes) | Usar Update-Help -UICulture en-US -ErrorAction SilentlyContinue para contornar restri√ß√µes de idioma ou permiss√µes | Usar o modo online: Get-Help Get-Process -Online | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#1--ajuda-e-descoberta-de-comandos",
    
    "relUrl": "/Modules/Module1/session2.html#1--ajuda-e-descoberta-de-comandos"
  },"41": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1.1. üß™ Exemplos",
    "content": "Get-Help Get-Process # Mostra a ajuda b√°sica Get-Help Get-Process -Examples # Mostra exemplos pr√°ticos Get-Help Get-Process -Online # Abre no browser Get-Command *service* # Procura comandos relacionados Get-Help Get-Service -Detailed # Mostra informa√ß√£o detalhada . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#11--exemplos",
    
    "relUrl": "/Modules/Module1/session2.html#11--exemplos"
  },"42": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1.2. üîç Como ler o output do Help",
    "content": "cls Get-Help Get-Service -Detailed . Este comando permite verificar: . | Name: nome do cmdlet | Synopsis: descri√ß√£o breve | Syntax: formas de utiliza√ß√£o | Description: descri√ß√£o detalhada | Parameters: explica√ß√£o de cada par√¢metro | Remarks: observa√ß√µes adicionais, como compatibilidade | . cls Get-Help Get-Service -Examples . Este comando premite verificar os exemplos de utiliza√ß√£o pr√°ticos. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#12--como-ler-o-output-do-help",
    
    "relUrl": "/Modules/Module1/session2.html#12--como-ler-o-output-do-help"
  },"43": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1.3. üîé Comando para inspecionar objetos",
    "content": "Get-Service | Get-Member . O Get-Member permite ver as propriedades (ex: Status, DisplayName) e m√©todos dos objetos devolvidos. Get-Service | Select-Object Status, DisplayName, ServiceType . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#13--comando-para-inspecionar-objetos",
    
    "relUrl": "/Modules/Module1/session2.html#13--comando-para-inspecionar-objetos"
  },"44": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1.4. üß© Exerc√≠cios",
    "content": "Neste exerc√≠cio vais aprender a usar a ajuda integrada no PowerShell para perceber como um comando funciona. Passos: . | Abre o PowerShell | Corre o seguinte comando para ver uma lista de todos os servi√ßos no sistema: Get-Service . Depois, experimenta filtrar por nome: . | Um servi√ßo espec√≠fico: Get-Service wuauserv . | Usando um wildcard (por exemplo, todos os que come√ßam por ‚Äúc‚Äù): Get-Service c* . | . | Escreve o seguinte comando para veres a ajuda b√°sica: Get-Help Get-Service | V√™ os exemplos com: Get-Help Get-Service -Examples | Tenta abrir a ajuda online (se poss√≠vel): Get-Help Get-Service -Online | Usa o Get-Member para descobrir que propriedades existem em objetos de servi√ßo. Depois usa Select-Object para escolher apenas as propriedades que permitam ver o Status, Nome do utilizador e tipo de servi√ßo. Exemplo de solu√ß√£o Get-Service | Get-Member Get-Service | Select-Object Status, UserName, ServiceType . | Cria um comando que obtenha os detalhes de um ou mais processos que costumas usar, como chrome, notepad, ou outro processo que esteja a correr no teu sistema. Queremos listar os seguintes detalhes: . | Nome do processo | ID (PID - {completa}) | Utiliza√ß√£o de CPU (CPU - mostra o tempo total de CPU utilizado (em segundos).) | Mem√≥ria utilizada (Working Set - mostra a mem√≥ria f√≠sica (em bytes) usada pelo processo.) | Tempo de execu√ß√£o (StartTime - {completa}) | Estado (Responding - indica se a aplica√ß√£o est√° a responder (True ou False)) | . Exemplo de solu√ß√£o Get-Process chrome | Select-Object Name, Id, CPU, WorkingSet, StartTime, Responding . | . üí° Dica: Experimenta com diferentes nomes de processos (ex: notepad, powershell, explorer) e compara os valores. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#14--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module1/session2.html#14--exerc√≠cios"
  },"45": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2. üîå Providers",
    "content": "No PowerShell, providers s√£o interfaces que permitem aceder, navegar e manipular diferentes tipos de armazenamento (como o sistema de ficheiros, o registo do Windows ou vari√°veis de ambiente) usando comandos comuns como Get-ChildItem ou Set-Location, tal como farias com pastas e ficheiros. Ou seja, mesmo que estejas a trabalhar com algo que n√£o √© um disco (como vari√°veis ou chaves de registo), podes usar os mesmos comandos de navega√ß√£o como se estivesses a explorar um sistema de pastas. Podes ver todos os providers dispon√≠veis no teu sistema com o seguinte comando: . Get-PSProvider . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#2--providers",
    
    "relUrl": "/Modules/Module1/session2.html#2--providers"
  },"46": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.1. üìÇ FileSystem",
    "content": "Permite interagir com pastas e ficheiros no disco, tal como estamos habituados. Este √© o provider usado por omiss√£o quando abrimos o PowerShell. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#21--filesystem",
    
    "relUrl": "/Modules/Module1/session2.html#21--filesystem"
  },"47": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.2. üß¨ Registry",
    "content": "Permite navegar no registo do Windows como se fosse uma estrutura de pastas. Tem dois ‚Äúdrives‚Äù: HKLM: (Local Machine) e HKCU: (Current User). Exemplos: . Set-Location HKCU:\\Software Get-ChildItem HKLM:\\SYSTEM . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#22--registry",
    
    "relUrl": "/Modules/Module1/session2.html#22--registry"
  },"48": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.3. üå± Environment",
    "content": "Permite aceder e modificar vari√°veis de ambiente (como PATH, TEMP, USERNAME, etc). Exemplos: . Get-ChildItem Env: $Env:USERNAME $Env:TEMP . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#23--environment",
    
    "relUrl": "/Modules/Module1/session2.html#23--environment"
  },"49": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.4. üè∑Ô∏è Alias",
    "content": "Permite listar e criar atalhos (aliases) para comandos do PowerShell. Exemplos: . Get-ChildItem Alias: Get-Alias ls New-Alias listar Get-ChildItem . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#24-%EF%B8%8F-alias",
    
    "relUrl": "/Modules/Module1/session2.html#24-Ô∏è-alias"
  },"50": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.5. ‚úÖ Outros providers",
    "content": "Consoante o sistema ou m√≥dulos carregados, podem existir outros providers dispon√≠veis. Por exemplo: . | Function: ‚Äì acede √†s fun√ß√µes definidas no PowerShell. | Variable: ‚Äì acede √†s vari√°veis em mem√≥ria. | . Para mais detalhes sobre providers no PowerShell, consulta a documenta√ß√£o oficial: üîó about_Providers - PowerShell Documentation . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#25--outros-providers",
    
    "relUrl": "/Modules/Module1/session2.html#25--outros-providers"
  },"51": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3. üìÅ Navega√ß√£o no Sistema de Ficheiros",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#3--navega%C3%A7%C3%A3o-no-sistema-de-ficheiros",
    
    "relUrl": "/Modules/Module1/session2.html#3--navega√ß√£o-no-sistema-de-ficheiros"
  },"52": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3.1. üß™ Comandos √∫teis",
    "content": "Get-Location # Mostra a localiza√ß√£o atual (pwd) Set-Location .. # Sobe um n√≠vel (cd ..) Get-ChildItem # Lista ficheiros e pastas (ls) Clear-Host # Limpa o terminal (cls) Push-Location # Guarda a localiza√ß√£o atual Pop-Location # Volta √† localiza√ß√£o guardada . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#31--comandos-%C3%BAteis",
    
    "relUrl": "/Modules/Module1/session2.html#31--comandos-√∫teis"
  },"53": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3.2. üåê Dicas",
    "content": ". | -Force mostra ficheiros ocultos. | Caminhos relativos (ex: ..\\Documentos) mudam com a localiza√ß√£o atual. | Caminhos absolutos (ex: C:\\Users\\Nome\\Documentos) s√£o sempre os mesmos. | Usa ~ para ir para a tua pasta pessoal. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#32--dicas",
    
    "relUrl": "/Modules/Module1/session2.html#32--dicas"
  },"54": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3.3. üß© Exerc√≠cios",
    "content": "Nota: Usa sempre os cmdlets do PowerShell como Set-Location ou Get-ChildItem em vez dos comandos do bash como cd ou ls. Neste exerc√≠cio vais praticar os comandos de navega√ß√£o no sistema de ficheiros no PowerShell. Passos: . | Abre o PowerShell. | Vai para a tua pasta pessoal: C√≥digo Set-Location ~ . | Corre o seguinte comando para criar a estrutura de pastas: . New-Item -Path \"~\\CursoPS\\Modulo1\\Exemplos\" -ItemType Directory -Force . | Verifica a estrutura final de pastas executando o seguinte: Set-Location ~ Get-ChildItem -Recurse \"CursoPS\" . Estrutura esperada: . CursoPS ‚îÇ ‚îî‚îÄ‚îÄ Modulo1 ‚îÇ ‚îî‚îÄ‚îÄ Exemplos . | Navega at√© √† pasta CursoPS: C√≥digo Set-Location \"~\\CursoPS\" . | Navega at√© √† pasta Modulo1 usando caminho relativo: C√≥digo Set-Location .\\Modulo1 . | Agora navega at√© √† pasta Exemplos usando: . | Caminho relativo: C√≥digo Set-Location .\\Exemplos . | Caminho absoluto: C√≥digo Set-Location \"~\\CursoPS\\Modulo1\\Exemplos\" . | . | Testa a navega√ß√£o com Push-Location e Pop-Location: . | Guarda a localiza√ß√£o atual, vai para outro local, e volta: Push-Location Set-Location ~ Pop-Location . | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#33--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module1/session2.html#33--exerc√≠cios"
  },"55": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4. üå± Vari√°veis de ambiente",
    "content": "O provider Environment permite aceder e manipular vari√°veis de ambiente do sistema operativo diretamente no PowerShell. Estas vari√°veis s√£o usadas por aplica√ß√µes e scripts para obter informa√ß√µes como o nome do utilizador, a pasta tempor√°ria, o caminho de instala√ß√£o, entre outras. Os restantes tipos de vari√°veis s√£o vistos na sess√£o 3 . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#4--vari%C3%A1veis-de-ambiente",
    
    "relUrl": "/Modules/Module1/session2.html#4--vari√°veis-de-ambiente"
  },"56": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.1. üìã Consultar vari√°veis",
    "content": "Podes ver todas as vari√°veis de ambiente com: . Get-ChildItem Env: . Para consultar uma vari√°vel espec√≠fica: . $Env:USERNAME $Env:PATH $Env:TEMP . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#41--consultar-vari%C3%A1veis",
    
    "relUrl": "/Modules/Module1/session2.html#41--consultar-vari√°veis"
  },"57": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.2. ‚úèÔ∏è Alterar ou definir vari√°veis (temporariamente)",
    "content": "Podes criar ou alterar vari√°veis diretamente: . $Env:NOVAVARIAVEL = \"Valor de teste\" $Env:PATH += \";C:\\Ferramentas\" . ‚ö†Ô∏è Estas altera√ß√µes s√≥ duram enquanto a sess√£o do PowerShell estiver ativa. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#42-%EF%B8%8F-alterar-ou-definir-vari%C3%A1veis-temporariamente",
    
    "relUrl": "/Modules/Module1/session2.html#42-Ô∏è-alterar-ou-definir-vari√°veis-temporariamente"
  },"58": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.3. üßº Remover vari√°veis",
    "content": "Podes remover uma vari√°vel da sess√£o com: . Remove-Item Env:NOVAVARIAVEL . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#43--remover-vari%C3%A1veis",
    
    "relUrl": "/Modules/Module1/session2.html#43--remover-vari√°veis"
  },"59": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.4. üß© Exerc√≠cios",
    "content": "Vamos experimentar criar e aceder a vari√°veis de ambiente. | Cria uma nova vari√°vel chamada ‚ÄúCURSO‚Äù e com o valor ‚ÄúPowerShell &amp; Shell Scripting‚Äù C√≥digo $Env:CURSO = \"PowerShell &amp; Shell Scripting\" . | Verifica o valor: C√≥digo $Env:CURSO . | Acede √† vari√°vel usando letras min√∫sculas: $Env:curso . O que observas? . Explica√ß√£o No PowerShell, as vari√°veis de ambiente n√£o s√£o sens√≠veis a mai√∫sculas ou min√∫sculas. Ou seja, $Env:CURSO, $Env:curso e $Env:Curso referem-se exatamente √† mesma vari√°vel. Isto acontece porque o provider Environment est√° ligado ao sistema operativo Windows, que tamb√©m n√£o distingue entre mai√∫sculas e min√∫sculas neste contexto. | Remove a vari√°vel: Remove-Item Env:CURSO . | Refaz os exerc√≠cios do ponto 3 (navegar no sistema de ficheiros), mas em vez de usares ~ para aceder √† tua pasta pessoal, usa a vari√°vel de ambiente $Env:USERPROFILE. | Vai para a tua pasta pessoal: Set-Location $Env:USERPROFILE . | Se necess√°rio cria novamente a estrutura de pastas: New-Item -Path \"$Env:USERPROFILE\\CursoPS\\Modulo1\\Exemplos\" -ItemType Directory -Force . | Explora a estrutura usando comandos de navega√ß√£o como Set-Location, Get-Location e Push-Location. | . | . üí° Dica: Podes confirmar que $Env:USERPROFILE e ~ apontam para o mesmo local com: . \"$Env:USERPROFILE\" Resolve-Path ~ . ‚ÑπÔ∏è Nota Importante: As vari√°veis definidas ou alteradas com $Env: s√≥ afetam a sess√£o atual do PowerShell. Se quiseres definir vari√°veis de ambiente de forma permanente (por exemplo, para todas as sess√µes), precisas de usar ferramentas do sistema operativo ou editar as defini√ß√µes no Painel de Controlo (Windows) ou via registo (Registry). Podes combinar este provider com outros comandos para criar scripts mais din√¢micos e adapt√°veis ao ambiente onde est√£o a correr. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#44--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module1/session2.html#44--exerc√≠cios"
  },"60": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.5. üîç Diferen√ßa entre $ e $Env:",
    "content": "Quando usas apenas o s√≠mbolo $, est√°s a trabalhar com vari√°veis normais do PowerShell, que existem apenas na sess√£o atual e s√£o controladas pelo pr√≥prio PowerShell. Quando usas $Env:, est√°s a aceder a vari√°veis de ambiente do sistema operativo, atrav√©s do provider Environment. Compara√ß√£o: . | Exemplo | Tipo de vari√°vel | Persist√™ncia | Acess√≠vel fora do PowerShell? | . | $nome = \"Joana\" | Vari√°vel do PowerShell | Sess√£o atual | ‚ùå N√£o | . | $Env:NOME = \"Joana\" | Vari√°vel de ambiente | Sess√£o atual (ou permanente, se configurada no SO) | ‚úÖ Sim (herdada por apps lan√ßadas a partir desta sess√£o) | . üîç Verifica√ß√£o pr√°tica: Para comprovar a diferen√ßa entre vari√°veis normais e vari√°veis de ambiente fora do PowerShell: Cria as duas vari√°veis no PowerShell: . $normal = \"sou normal\" $Env:AMBIENTE = \"sou ambiente\" . Abre uma nova sess√£o do CMD a partir do PowerShell: . cmd /d /k echo %normal% . cmd /d /k echo %AMBIENTE% . | /d ‚Äì Desativa a execu√ß√£o autom√°tica de comandos definidos na vari√°vel de ambiente AutoRun. √ötil para garantir que o CMD come√ßa com um ambiente ‚Äúlimpo‚Äù, sem comandos autom√°ticos. | /k ‚Äì Executa o comando indicado e mant√©m a janela do CMD aberta depois. Se usasses /c em vez de /k, o CMD fechar-se-ia logo ap√≥s o echo. | . Observa o resultado: . %normal% sou ambiente . ‚úÖ Explica√ß√£o: . %normal% aparece como texto literal porque $normal √© uma vari√°vel interna do PowerShell ‚Äî n√£o √© herdada por outras aplica√ß√µes ou shells. %AMBIENTE% mostra o valor correto porque $Env:AMBIENTE √© uma vari√°vel de ambiente, e essas s√£o automaticamente vis√≠veis por processos filhos como o CMD. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#45--diferen%C3%A7a-entre--e-env",
    
    "relUrl": "/Modules/Module1/session2.html#45--diferen√ßa-entre--e-env"
  },"61": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "5. üè∑Ô∏è Alias",
    "content": "No PowerShell, um alias √© um nome alternativo (geralmente mais curto) para um comando. Isto permite escrever comandos de forma mais r√°pida ou usar nomes familiares (por exemplo, do Bash). Exemplo: ls √© um alias para Get-ChildItem. Podes ver todos os aliases dispon√≠veis com: . Get-Alias . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#5-%EF%B8%8F-alias",
    
    "relUrl": "/Modules/Module1/session2.html#5-Ô∏è-alias"
  },"62": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "5.1. üîé Exemplos simples",
    "content": "Verifica o comando por tr√°s de um alias: . Get-Alias ls . Podes ver todos os aliases que apontam para Get-ChildItem com: . Get-Alias | Where-Object {$_.Definition -eq 'Get-ChildItem'} . Resultado ser√° algo como: . | dir | gci | ls | . Cria um alias personalizado: . New-Alias listar Get-ChildItem . Usa o alias que criaste: . listar . Remove o alias: . Remove-Item Alias:listar . ‚ö†Ô∏è Aliases personalizados s√≥ duram durante a sess√£o atual. Mais √† frente veremos como personalizar o profile do utilizador e criar aliases persistentes. üîó Documenta√ß√£o oficial about_Aliases - PowerShell Documentation . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#51--exemplos-simples",
    
    "relUrl": "/Modules/Module1/session2.html#51--exemplos-simples"
  },"63": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "5.2. üß© Exerc√≠cios",
    "content": ". | Descobre que comando est√° por tr√°s dos seguintes aliases: . | ls | pwd | cls | . | Cria um alias chamado meuservicos para o comando Get-Service. | . Resposta New-Alias meuservicos Get-Service . | Corre o alias meuservicos e confirma que funciona. meuservicos . | Remove o alias meuservicos. | . Resposta Remove-Item Alias:meuservicos . | Cria um alias chamado procativos para o comando Get-Process. | . Resposta New-Alias procativos Get-Process procativos . üí° Dica: Como os aliases n√£o aceitam argumentos ou pipelines, devem ser usados apenas para comandos simples. Para comandos mais complexos, como Get-Service | Select-Object ‚Ä¶, considera criar uma fun√ß√£o. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#52--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module1/session2.html#52--exerc√≠cios"
  },"64": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html",
    
    "relUrl": "/Modules/Module1/session2.html"
  },"65": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "üß≠ Sess√£o 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "content": ". üéØ Objetivo Nesta sess√£o vamos aprofundar o entendimento sobre como o PowerShell apresenta e manipula o output dos comandos, como personalizar o ambiente de trabalho, e introduzir fun√ß√µes simples para reutiliza√ß√£o de l√≥gica. | 1. Objetos , Propriedades e M√©todos . | 1.1. O que √© um objeto? | 1.2. Como identificar propriedades e m√©todos? | 1.3. Aceder a propriedades | 1.4. Invocar m√©todos | 1.5. üß© Exerc√≠cios pr√°ticos | . | 2. Par√¢metros em comandos . | 2.1. O que s√£o par√¢metros? | 2.2. Como descobrir os par√¢metros dispon√≠veis? | 2.3. Show-Command ‚Äî Interface gr√°fica para explorar cmdlets | 2.4. Par√¢metros posicionais vs nomeados | 2.5. Como interpretar a ajuda de um par√¢metro | 2.6. üß© Exerc√≠cios pr√°ticos | . | 3. Outputs e Pipeline . | 3.1. Introdu√ß√£o | 3.2. Output para o terminal | 3.3. Formatar o output | 3.4. Redirecionar output para ficheiros | 3.5. O pipeline (|) | 3.6. $_ ‚Äì o objeto atual no pipeline | 3.7. Boas pr√°ticas | 3.8. üß© Exerc√≠cios pr√°ticos | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html",
    
    "relUrl": "/Modules/Module1/session3.html"
  },"66": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1. Objetos , Propriedades e M√©todos",
    "content": "No PowerShell, quase tudo √© um objeto. Isso significa que os comandos n√£o devolvem apenas texto, mas sim objetos com propriedades e m√©todos que podes explorar e manipular. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#1-objetos--propriedades-e-m%C3%A9todos",
    
    "relUrl": "/Modules/Module1/session3.html#1-objetos--propriedades-e-m√©todos"
  },"67": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.1. O que √© um objeto?",
    "content": "Um objeto √© uma estrutura que cont√©m: . | Propriedades ‚Äì informa√ß√µes sobre o objeto (ex: nome, tamanho, data de cria√ß√£o) | M√©todos ‚Äì a√ß√µes que o objeto pode executar (ex: copiar, apagar, converter) | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#11-o-que-%C3%A9-um-objeto",
    
    "relUrl": "/Modules/Module1/session3.html#11-o-que-√©-um-objeto"
  },"68": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.2. Como identificar propriedades e m√©todos?",
    "content": "Podes visualizar as propriedades e m√©todos de um objeto atrav√©s de comandos que mostrem o seu conte√∫do completo. Este comando mostra todos os m√©todos e propriedades dispon√≠veis no objeto $hoje, que representa a data e hora atual. $hoje = Get-Date $hoje | Get-Member . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#12-como-identificar-propriedades-e-m%C3%A9todos",
    
    "relUrl": "/Modules/Module1/session3.html#12-como-identificar-propriedades-e-m√©todos"
  },"69": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.3. Aceder a propriedades",
    "content": "Podes visualizar os valores das propriedades de um objeto com: . $hoje | Format-List * . Podes aceder a uma propriedade com o operador . Exemplo: . $hoje.Year $hoje.Month $hoje.DayOfWeek . $hoje.Year devolve o ano atual (ex: 2025) $hoje.Month devolve o n√∫mero do m√™s (ex: 4) $hoje.DayOfWeek devolve o dia da semana por extenso (ex: Friday) . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#13-aceder-a-propriedades",
    
    "relUrl": "/Modules/Module1/session3.html#13-aceder-a-propriedades"
  },"70": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.4. Invocar m√©todos",
    "content": "Os m√©todos s√£o a√ß√µes que um objeto pode executar. Para invocar um m√©todo, usas o operador de ponto seguido de par√™ntesis (). Podes descobrir quais os m√©todos dispon√≠veis para um objeto com o comando: $objeto | Get-Member . Exemplo: . $hoje | Get-Member . Isto mostra todos os membros do objeto $data, incluindo os m√©todos como AddDays, AddHours, ToShortDateString, etc. O m√©todo AddDays() pertence ao tipo System.DateTime Aceita um n√∫mero (double) como argumento, que representa o n√∫mero de dias a somar ou subtrair. O resultado √© um novo objeto datetime com a data ajustada. | O m√©todo chama-se AddDays | Recebe como par√¢metro de entrada um valor do tipo double (por exemplo: 1, 2.5, -3) | Devolve como resultado um objeto do tipo datetime | Exemplos . $maisMeioDia = $hoje.AddDays(0.5) $amanha = $hoje.AddDays(1) . | . üîé Nota Get-Location | Get-Member mostra-te os m√©todos e propriedades que podes usar sobre os objetos devolvidos pelo comando Get-Location, e n√£o sobre o pr√≥prio comando. Se escreveres: . Get-Location.ToString() . O PowerShell interpreta isto como uma tentativa de chamar o m√©todo ToString() sobre o comando Get-Location em si, e n√£o sobre o objeto que ele devolve. Ora, Get-Location √© um comando, n√£o √© um objeto. Est√°s, na pr√°tica, a tentar aplicar .ToString() a um scriptblock impl√≠cito, o que resulta num erro ou num comportamento inesperado. A forma correta de o fazer √© com par√™ntesis: . (Get-Location).ToString() . Assim, o PowerShell executa primeiro o comando Get-Location e s√≥ depois chama o m√©todo ToString() sobre o objeto retornado (que √© do tipo PathInfo). Documenta√ß√£o oficial: https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/03-discovering-objects . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#14-invocar-m%C3%A9todos",
    
    "relUrl": "/Modules/Module1/session3.html#14-invocar-m√©todos"
  },"71": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.5. üß© Exerc√≠cios pr√°ticos",
    "content": "üß© Exerc√≠cio 1 . | Cria uma vari√°vel $frase com o valor ‚ÄúPowerShell √© poderoso‚Äù. | Mostra o comprimento total da frase usando a propriedade adequada. | . Resposta $frase = \"PowerShell √© poderoso\" $frase.Length . üß© Exerc√≠cio 2 . | Cria uma vari√°vel $texto com o valor \"PowerShell √© fixe\". | Converte para mai√∫sculas. | Verifica se cont√©m a palavra \"fixe\". | . Resposta $texto = \"PowerShell √© fixe\" $texto.ToUpper() $texto.Contains(\"fixe\") . üß© Exerc√≠cio 3 . | Guarda a data atual numa vari√°vel chamada $hoje. | Cria uma nova vari√°vel $amanha com a data de amanh√£. | Mostra o dia da semana correspondente. | . Resposta $hoje = Get-Date $amanha = $hoje.AddDays(1) $amanha.DayOfWeek . üß© Exerc√≠cio 4 . Usa o comando Get-Location e acede √† propriedade que te mostra o caminho atual da localiza√ß√£o. Resposta (Get-Location).Path Usa o mesmo comando e chama o m√©todo que devolve o o caminho atual da localiza√ß√£o. Resposta (Get-Location).ToString() Nota Ambos os comandos devolvem exatamente o mesmo texto ‚Äî o caminho atual. Isto acontece porque o m√©todo ToString() do objeto PathInfo foi implementado para devolver o mesmo valor da propriedade Path. Este √© um bom exemplo de como m√©todos podem ser usados para produzir representa√ß√µes leg√≠veis de objetos, mesmo que haja uma propriedade que contenha o mesmo valor. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#15--exerc%C3%ADcios-pr%C3%A1ticos",
    
    "relUrl": "/Modules/Module1/session3.html#15--exerc√≠cios-pr√°ticos"
  },"72": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2. Par√¢metros em comandos",
    "content": "Muitos comandos no PowerShell aceitam par√¢metros para alterar o seu comportamento ou filtrar os resultados. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#2-par%C3%A2metros-em-comandos",
    
    "relUrl": "/Modules/Module1/session3.html#2-par√¢metros-em-comandos"
  },"73": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.1. O que s√£o par√¢metros?",
    "content": ". | Um par√¢metro √© uma op√ß√£o que controlas ao chamar um comando. | Um argumento √© o valor que passas a esse par√¢metro. | . Exemplo: . Get-Process -Name \"notepad\" . | -Name √© o par√¢metro | \"notepad\" √© o argumento | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#21-o-que-s%C3%A3o-par%C3%A2metros",
    
    "relUrl": "/Modules/Module1/session3.html#21-o-que-s√£o-par√¢metros"
  },"74": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.2. Como descobrir os par√¢metros dispon√≠veis?",
    "content": "Usa os seguintes comandos: . Mostra todos os par√¢metros, exemplos e descri√ß√µes. Get-Help Get-Process -Full . Mostra apenas os par√¢metros Get-Help Get-Process -Parameter * . Mostra a sintaxe resumida. Get-Command Get-Process -Syntax . Abre uma janela gr√°fica com os par√¢metros Show-Command Get-Process . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#22-como-descobrir-os-par%C3%A2metros-dispon%C3%ADveis",
    
    "relUrl": "/Modules/Module1/session3.html#22-como-descobrir-os-par√¢metros-dispon√≠veis"
  },"75": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.3. Show-Command ‚Äî Interface gr√°fica para explorar cmdlets",
    "content": "O Show-Command abre uma interface gr√°fica (GUI) onde podes preencher os par√¢metros de um cmdlet. √â especialmente √∫til para quem est√° a come√ßar ou quer explorar rapidamente os par√¢metros dispon√≠veis sem consultar o Get-Help. Como funciona? . | Ao executar Show-Command Get-Process, abre-se uma janela com todos os par√¢metros organizados em tabs. | Em alguns casos, o Show-Command apresenta os par√¢metros numa √∫nica vista simples (sem separadores). Noutros cmdlets mais complexos, podem surgir abas (tabs) como Default, CommonParameters e All, dependendo da vers√£o do PowerShell e do n√∫mero de par√¢metros. | Podes preencher os campos manualmente, ver o comando PowerShell resultante (bot√£o Copy) e at√© execut√°-lo diretamente (bot√£o Run). | . Exemplo visual . Show-Command Get-Process . Quando usar? . | Quando n√£o conheces bem os par√¢metros de um cmdlet. | Para aprender a construir comandos mais complexos. | Em apresenta√ß√µes ou aulas para demonstrar cmdlets de forma intuitiva. | . Aten√ß√£o . | S√≥ funciona em ambientes com interface gr√°fica (n√£o funciona em PowerShell sem GUI, como o PowerShell Core em Linux ou WSL sem suporte gr√°fico). | √ötil para aprendizagem, mas na pr√°tica avan√ßada √© mais r√°pido usar diretamente o terminal. | . üîó Show-Command - Documenta√ß√£o oficial . üß™ Exerc√≠cio ‚Äì Explorar processos com Show-Command . | Corre: . Show-Command Get-Process . | Preenche o campo Name com notepad. | Clica em Copy e cola no terminal. O que aparece? | Agora clica em Run. | . üîó Show-Command . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#23-show-command--interface-gr%C3%A1fica-para-explorar-cmdlets",
    
    "relUrl": "/Modules/Module1/session3.html#23-show-command--interface-gr√°fica-para-explorar-cmdlets"
  },"76": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.4. Par√¢metros posicionais vs nomeados",
    "content": ". | Explicito: Escreves explicitamente o nome do par√¢metro. Ex: Get-Process -Name notepad . | Posicional: O PowerShell assume o par√¢metro com base na posi√ß√£o do argumento. Ex: Get-Process notepad ‚Üí √© equivalente a -Name notepad . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#24-par%C3%A2metros-posicionais-vs-nomeados",
    
    "relUrl": "/Modules/Module1/session3.html#24-par√¢metros-posicionais-vs-nomeados"
  },"77": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.5. Como interpretar a ajuda de um par√¢metro",
    "content": "Exemplo retirado de Get-Help Get-Service -Parameter Name: . -Name &lt;System.String[]&gt; Specifies the service names of services to be retrieved. Wildcards are permitted. Required? false Position? 0 Default value None Accept pipeline input? True (ByPropertyName, ByValue) Accept wildcard characters? true . | -Name √© o nome do par√¢metro | O tipo esperado √© uma string ou lista de strings | N√£o √© obrigat√≥rio (Required? false) | Pode ser usado sem escrever o nome, se for o primeiro argumento (Position? 0) | Aceita wildcards (*, ?) | Aceita input de pipeline por nome de propriedade ou por valor | . Com base nesta informa√ß√£o podemos usar: . Get-Service -Name ms* Get-Service ms* . üí° Dica: Usa Tab para completar o nome dos par√¢metros . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#25-como-interpretar-a-ajuda-de-um-par%C3%A2metro",
    
    "relUrl": "/Modules/Module1/session3.html#25-como-interpretar-a-ajuda-de-um-par√¢metro"
  },"78": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.6. üß© Exerc√≠cios pr√°ticos",
    "content": "üß© Exerc√≠cio - Explorar par√¢metros com Get-EventLog . Usa Get-Help Get-EventLog -Full e tenta descobrir: . | Como listar os √∫ltimos 5 eventos do log System | Que par√¢metro te permite limitar a quantidade de eventos | . Resposta Get-EventLog -LogName System -Newest 5 üß© Exerc√≠cio - Explorar par√¢metros com Get-ChildItem . Usa Get-Help Get-ChildItem -Parameter * para responder √†s seguintes perguntas: . | Qual o par√¢metro que permite procurar ficheiros de forma recursiva? | Qual o par√¢metro que permite usar filtros com wildcards? | Constr√≥i um comando que mostre todos os ficheiros .txt em todos os subdiret√≥rios da tua pasta pessoal. | . üí° Nota: Podes usar a vari√°vel de ambiente $Env:USERPROFILE para aceder √† tua pasta pessoal. Resposta Get-ChildItem -Path $Env:USERPROFILE -Filter *.txt -Recurse Vers√£o reduzida Get-ChildItem $Env:USERPROFILE *.txt -Recurse `$Env:USERPROFILE` ‚Üí corresponde ao 1.¬∫ par√¢metro posicional, que √© -Path `*.txt` ‚Üí corresponde ao 2.¬∫ par√¢metro posicional, que √© -Filter `-Recurse` ‚Üí continua a ser necess√°rio indicar o nome, pois n√£o √© posicional Este comando √© menos leg√≠vel, pelo que √© melhor usar sempre o nome dos par√¢metros ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#26--exerc%C3%ADcios-pr%C3%A1ticos",
    
    "relUrl": "/Modules/Module1/session3.html#26--exerc√≠cios-pr√°ticos"
  },"79": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3. Outputs e Pipeline",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#3-outputs-e-pipeline",
    
    "relUrl": "/Modules/Module1/session3.html#3-outputs-e-pipeline"
  },"80": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.1. Introdu√ß√£o",
    "content": "No PowerShell, o output refere-se √† informa√ß√£o que um comando devolve depois de ser executado. Esse resultado pode ser: . | Visualizado no terminal | Armazenado numa vari√°vel | Redirecionado para ficheiros | Passado para outro comando atrav√©s do pipeline | . O que √© o pipeline (|) . O s√≠mbolo | (barra vertical) chama-se pipeline. √â uma das funcionalidades mais poderosas do PowerShell e permite ligar comandos, passando o output de um comando como input para o pr√≥ximo. Exemplo: . Get-Process | Where-Object { $_.CPU -gt 100 } . Neste exemplo: . | Get-Process devolve uma lista de processos | O output √© enviado atrav√©s do pipeline (|) | Where-Object filtra os processos com mais de 100 segundos de CPU | . O que pode ser feito com o output? . Podes fazer v√°rias coisas com o resultado de um comando: . | Visualizar diretamente no terminal (com formata√ß√£o opcional) | Transformar o conte√∫do (filtrar, ordenar, formatar) | Guardar o resultado em ficheiros (texto, CSV, etc.) | Encadear o resultado em comandos seguintes com | . Esta flexibilidade torna o PowerShell uma ferramenta poderosa para automatiza√ß√£o e an√°lise de dados. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#31-introdu%C3%A7%C3%A3o",
    
    "relUrl": "/Modules/Module1/session3.html#31-introdu√ß√£o"
  },"81": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.2. Output para o terminal",
    "content": "Quando executas um comando no PowerShell, o resultado (output) √© mostrado automaticamente no terminal, sem necessidade de comandos adicionais. Exibi√ß√£o por defeito . Se escreveres apenas uma express√£o ou comando, o PowerShell mostra o resultado automaticamente. Exemplos: . Get-Date \"Ol√°, mundo\" 2 + 3 $variavel = \"valor\" # neste caso n√£o h√° output, apenas atribui√ß√£o . O PowerShell mostra o resultado porque o motor de execu√ß√£o avalia a express√£o e, se for apropriado, envia-a para o sistema de formata√ß√£o (que define como o output ser√° apresentado). O que √© o sistema de formata√ß√£o no PowerShell? . Sempre que executas um comando, o PowerShell n√£o imprime diretamente o objeto devolvido. Em vez disso, envia esse objeto para o sistema de formata√ß√£o, que define como o conte√∫do ser√° apresentado no terminal. Esse sistema baseia-se em regras internas, definidas em ficheiros .format.ps1xml, que indicam: . | Que propriedades devem ser mostradas | Em que ordem | Com que t√≠tulos | E em que tipo de estrutura (tabela, lista, etc.) | . Exemplo 1 ‚Äì Get-Process . Get-Process . Este comando devolve objetos do tipo System.Diagnostics.Process. O PowerShell aplica regras de formata√ß√£o espec√≠ficas para esse tipo, e mostra automaticamente uma tabela com colunas como: . | Handles | NPM | CPU | Id | ProcessName | . Exemplo 2 ‚Äì Get-Date . Get-Date . Este comando devolve um objeto System.DateTime. Esse tipo de objeto tem o m√©todo .ToString() bem definido, por isso o PowerShell mostra diretamente: . s√°bado, 20 de abril de 2025 09:32:01 . Se quiseres ver todas as propriedades do objeto: . Get-Date | Format-List * . E se o tipo de objeto n√£o tiver formata√ß√£o definida? . O PowerShell tenta chamar o m√©todo .ToString() do objeto. Por exemplo o comando New-Object -TypeName System.Objectvai criar um objeto gen√©rico sem propriedades nem m√©todos personalizados (al√©m dos herdados) que ter√° como resultado: . System.Object . Isto √© semelhante ao que acontece em linguagens como C# ou Java quando tentas imprimir um objeto sem sobrepor o m√©todo ToString(). Write-Output (opcional mas √∫til) . O comando Write-Output envia explicitamente dados para o output. Na maioria dos casos, n√£o √© necess√°rio us√°-lo ‚Äî mas pode ser √∫til quando queres tornar o c√≥digo mais claro ou construir scripts mais estruturados. Exemplos: . Write-Output \"Isto vai aparecer no terminal\" Write-Output (Get-Date) . Nota: Write-Output envia o conte√∫do para o pipeline, o que significa que podes continuar a trabalhar com o valor. Por oposi√ß√£o, Write-Host escreve diretamente no ecr√£ e n√£o envia nada para o pipeline. Exemplo de diferen√ßa: . Write-Output \"Ol√°\" | ForEach-Object { $_.ToUpper() } # funciona Write-Host \"Ol√°\" | ForEach-Object { $_.ToUpper() } # n√£o funciona . üí° Usa Write-Output quando quiseres manter a informa√ß√£o no fluxo de dados. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#32-output-para-o-terminal",
    
    "relUrl": "/Modules/Module1/session3.html#32-output-para-o-terminal"
  },"82": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.3. Formatar o output",
    "content": "Por defeito, o PowerShell aplica uma formata√ß√£o autom√°tica com base no tipo de objeto devolvido. No entanto, podes personalizar a forma como a informa√ß√£o √© apresentada usando os comandos Format-Table, Format-List e Select-Object. Format-Table . Apresenta os dados em forma de tabela, com colunas. Exemplo: . Get-Process | Select-Object -First 10 | Format-Table Name, Id, CPU . Podes tamb√©m usar -AutoSize para ajustar automaticamente a largura das colunas: . Get-Process | Select-Object -First 10 | Format-Table Name, Id, CPU -AutoSize . Format-List . Mostra as propriedades em lista vertical, √∫til quando h√° muitos detalhes ou quando o conte√∫do n√£o cabe numa linha. Exemplo: . Get-Process | Select-Object -First 10 | Format-List Name, Id, CPU . üí° Usa Format-List quando quiseres ver tudo com mais detalhe, e Format-Table quando quiseres uma vis√£o geral e comparativa. üîé Select-Object . Permite selecionar apenas algumas propriedades de um objeto, sem alterar o tipo de output. Isto √© √∫til para controlar os dados que passam no pipeline, sem aplicar formata√ß√£o visual. Exemplo: . Get-Process | Select-Object Name, Id . üí° Select-Object √© usado para preparar dados para exporta√ß√£o, filtragem ou uso posterior, n√£o apenas para apresenta√ß√£o. üÜö Compara√ß√£o pr√°tica com Get-Member . Get-Process | Select-Object Name, Id | Get-Member . ‚Üí Mostra os membros (propriedades e m√©todos) dos objetos que passaram pelo pipeline. O tipo de output √©: . TypeName: Selected.System.Diagnostics.Process . Ou seja, o resultado continua a ser um objeto com estrutura, com propriedades acess√≠veis como .Name e .Id. Get-Process | Format-Table Name, Id | Get-Member . ‚Üí Aqui Get-Member mostra os membros de um objeto de formata√ß√£o, e n√£o os do processo original. O tipo de output √©: . TypeName: Microsoft.PowerShell.Commands.Internal.Format.FormatStartData . Isto acontece porque Format-Table transforma os objetos em texto formatado, e os dados originais j√° n√£o est√£o acess√≠veis como propriedades estruturadas. Nota: Select-Object mant√©m os dados ‚Äúvivos‚Äù como objetos. Format-Table ‚Äúmata‚Äù os objetos e transforma-os em texto ‚Äî √∫til para ver, mas in√∫til para processar depois. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#33-formatar-o-output",
    
    "relUrl": "/Modules/Module1/session3.html#33-formatar-o-output"
  },"83": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.4. Redirecionar output para ficheiros",
    "content": "Podes guardar o resultado de comandos PowerShell em ficheiros para consulta posterior, documenta√ß√£o, exporta√ß√£o de dados, ou integra√ß√£o com outras ferramentas. Out-File . O comando Out-File envia texto formatado para um ficheiro. Exemplo: . Get-Process | Out-File -FilePath \"processos.txt\" . Isto cria (ou substitui) o ficheiro processos.txt com a sa√≠da formatada do comando Get-Process. üí° Podes usar o par√¢metro -Append se quiseres adicionar ao conte√∫do existente: . Get-Date | Out-File -FilePath \"log.txt\" -Append . Controlar o encoding . O Out-File usa por defeito o encoding utf-16. Se quiseres guardar em UTF-8 (mais comum e compat√≠vel), usa: . Get-Process | Out-File -FilePath \"processos.txt\" -Encoding utf8 . Export-Csv . O comando Export-Csv √© ideal para exportar objetos estruturados como listas de processos, servi√ßos, utilizadores, etc. Exemplo: . Get-Process | Select-Object Name, Id, CPU | Export-Csv -Path \"processos.csv\" -NoTypeInformation . | Cada linha do ficheiro CSV representa um objeto | Cada coluna corresponde a uma propriedade | O par√¢metro -NoTypeInformation evita que a primeira linha contenha metadados do tipo. | . üí° Este comando √© muito √∫til quando vais trabalhar os dados em Excel ou Power BI. Testar Correr o comando com e sem -NoTypeInformation e verificar a primeira linha do ficheiro. Set-Content e Add-Content . Estes comandos permitem escrever diretamente em ficheiros linha a linha (sem passar por formata√ß√£o especial). | Set-Content cria ou substitui um ficheiro | Add-Content adiciona ao conte√∫do existente | . Exemplos: . Set-Content -Path \"ficheiro.txt\" -Value \"Primeira linha\" Add-Content -Path \"ficheiro.txt\" -Value \"Segunda linha\" . üí° Estes comandos s√£o √∫teis quando precisas de escrever dados simples como strings, logs ou resultados de scripts, n√£o dependem do sistema de formata√ß√£o do PowerShell ‚Äî escrevem exatamente o que pedires, linha por linha. ‚ö†Ô∏è Nota importante: Se precisares de guardar dados estruturados (com propriedades), usa Export-Csv. Se o que queres √© guardar texto formatado tal como aparece no terminal, usa Out-File. Usa Set-Content ou Add-Content quando quiseres escrever diretamente texto simples ou valores individuais, sem formata√ß√£o autom√°tica. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#34-redirecionar-output-para-ficheiros",
    
    "relUrl": "/Modules/Module1/session3.html#34-redirecionar-output-para-ficheiros"
  },"84": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.5. O pipeline (|)",
    "content": "O s√≠mbolo |, chamado pipeline, √© uma das funcionalidades mais poderosas do PowerShell. Permite encadear comandos, onde o output de um comando √© passado como input para o seguinte. Como funciona? . Cada comando no pipeline recebe os objetos produzidos pelo comando anterior. Isso permite aplicar filtros, transforma√ß√µes ou a√ß√µes sucessivas de forma leg√≠vel e modular. Exemplo pr√°tico . Get-Process | Where-Object { $_.CPU -gt 100 } | Sort-Object CPU . Explica√ß√£o passo a passo: . | Get-Process devolve todos os processos em execu√ß√£o. | Where-Object filtra os que t√™m mais de 100 segundos de uso de CPU. | Sort-Object ordena os resultados com base na propriedade CPU. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#35-o-pipeline-",
    
    "relUrl": "/Modules/Module1/session3.html#35-o-pipeline-"
  },"85": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.6. $_ ‚Äì o objeto atual no pipeline",
    "content": "A vari√°vel especial $_, que representa o objeto atual no pipeline, ser√° explicada mais √† frente quando abordarmos blocos de script. Para j√° vamos apenas ver um breve exemplo . Get-Process | ForEach-Object { $_.Name } . Aqui, $_ √© o objeto atual, e acedemos √† sua propriedade Name. üí° Dica: O pipeline torna os comandos mais leg√≠veis, reutiliz√°veis e poderosos. Em vez de criar vari√°veis tempor√°rias ou escrever muitos passos, podes fazer tudo numa s√≥ linha de forma clara. ‚Äî . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#36-_--o-objeto-atual-no-pipeline",
    
    "relUrl": "/Modules/Module1/session3.html#36-_--o-objeto-atual-no-pipeline"
  },"86": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.7. Boas pr√°ticas",
    "content": "Ao usares comandos com pipeline e redirecionamento de output, h√° algumas boas pr√°ticas que ajudam a evitar erros e a manter os scripts mais limpos e eficientes. Filtra o mais cedo poss√≠vel . Aplica filtros (Where-Object, Select-Object, etc.) no in√≠cio do pipeline para reduzir a quantidade de dados processados. Melhor: . Get-Process | Where-Object { $_.CPU -gt 100 } | Sort-Object CPU . Pior (menos eficiente): . Get-Process | Sort-Object CPU | Where-Object { $_.CPU -gt 100 } . Usa Select-Object para preparar dados para exporta√ß√£o . Antes de exportar dados (por exemplo, para CSV), seleciona apenas as propriedades relevantes com Select-Object. Get-Process | Select-Object Name, Id, CPU | Export-Csv -Path \"proc.csv\" -NoTypeInformation . Evita usar Format-* antes de exportar ou guardar . Comandos como Format-Table ou Format-List devem ser usados s√≥ para visualiza√ß√£o, e no final do pipeline. Se os usares antes de comandos como Export-Csv ou Out-File, perdes a estrutura dos dados. Errado: . Get-Process | Format-Table Name, Id | Export-Csv \"proc.csv\" ‚ùå . Correto: . Get-Process | Select-Object Name, Id | Export-Csv \"proc.csv\" ‚úÖ . Verifica o que vai sair antes de redirecionar . Testa sempre o output no terminal antes de o guardar em ficheiros. Assim evitas ficheiros com dados errados ou formatados de forma inesperada. Usa Export-Csv para dados estruturados . Se est√°s a exportar dados com v√°rias propriedades (como tabelas), usa Export-Csv. Evita usar Out-File nesses casos, porque vais guardar apenas o texto renderizado, e n√£o os dados reais. Usa Out-File, Set-Content ou Add-Content com prop√≥sitos espec√≠ficos . | Out-File: quando queres guardar o texto formatado como aparece no terminal | Set-Content: para criar ficheiros de texto simples com conte√∫do direto | Add-Content: para adicionar linhas a ficheiros existentes (ex: logs) | . üí° Dica: Ao seguir estas boas pr√°ticas, consegues criar scripts mais fi√°veis, reutiliz√°veis e mais f√°ceis de manter. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#37-boas-pr%C3%A1ticas",
    
    "relUrl": "/Modules/Module1/session3.html#37-boas-pr√°ticas"
  },"87": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.8. üß© Exerc√≠cios pr√°ticos",
    "content": "üß© Exerc√≠cio 1 ‚Äì Format-Table . | Mostra os primeiros 5 processos no sistema. | Exibe apenas o nome, o ID e o tempo de CPU de cada processo. | Usa Format-Table com -AutoSize. | . Resposta Get-Process | Select-Object -First 5 | Format-Table Name, Id, CPU -AutoSize . üß© Exerc√≠cio 2 ‚Äì Format-List . | Mostra os detalhes do primeiro servi√ßo do sistema. | Exibe todas as propriedades usando Format-List. | . Resposta Get-Service | Select-Object -First 1 | Format-List * . üß© Exerc√≠cio 3 ‚Äì Guardar o output num ficheiro . | Guarda a lista de servi√ßos num ficheiro chamado servicos.txt. | Usa Out-File com encoding UTF-8. | . Resposta Get-Service | Out-File -FilePath \"servicos.txt\" -Encoding utf8 . üß© Exerc√≠cio 4 ‚Äì Exportar para CSV . | Exporta o nome e o estado de todos os servi√ßos para um ficheiro chamado servicos.csv. | Garante que a primeira linha n√£o cont√©m o tipo de objeto. | . Resposta Get-Service | Select-Object Name, Status | Export-Csv -Path \"servicos.csv\" -NoTypeInformation . üß© Exerc√≠cio 5 ‚Äì Adicionar conte√∫do a um ficheiro . | Cria um ficheiro log.txt com uma linha inicial. | Acrescenta a data e hora atuais √† linha seguinte. | . Resposta Set-Content -Path \"log.txt\" -Value \"In√≠cio do log\" Add-Content -Path \"log.txt\" -Value (Get-Date) . üß© Exerc√≠cio 6 ‚Äì Usar pipeline com filtros . | Lista todos os processos que estejam a consumir mais de 50 segundos de CPU. | Ordena os resultados por tempo de CPU. | . Resposta Get-Process | Where-Object { $_.CPU -gt 50 } | Sort-Object CPU üß© Exerc√≠cio 7 ‚Äì An√°lise de processos . | Usa Get-Process para explorar todas as propriedades dispon√≠veis (usa Format-List * ou Get-Member). | Escolhe tr√™s propriedades que aches √∫teis para analisar o estado dos processos (ex: Name, CPU, WorkingSet). | Filtra os 10 processos que est√£o a usar mais mem√≥ria (WorkingSet). | Exporta essa informa√ß√£o para um ficheiro processos_memoria.csv, sem incluir o tipo de objeto na primeira linha. | . üí° Dica: WorkingSet representa a quantidade de mem√≥ria f√≠sica usada por um processo (em bytes). Resposta Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 Name, CPU, WorkingSet | Export-Csv -Path \"processos_memoria.csv\" -NoTypeInformation ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#38--exerc%C3%ADcios-pr%C3%A1ticos",
    
    "relUrl": "/Modules/Module1/session3.html#38--exerc√≠cios-pr√°ticos"
  },"88": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html",
    
    "relUrl": "/Modules/Module1/session3.html"
  }
}
