{"0": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "üéØ Objetivo do M√≥dulo",
    "content": "Compreender os fundamentos de PowerShell e Shell Scripting, configurar o ambiente de trabalho e dominar os comandos b√°sicos antes de avan√ßar para l√≥gica e scripting. ",
    "url": "/Curso_Powershell/Modules/Module1/#-objetivo-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module1/#-objetivo-do-m√≥dulo"
  },"1": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "üìå Estrutura do M√≥dulo",
    "content": "Sess√µes: . | Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o . | Introdu√ß√£o, instala√ß√£o, configura√ß√£o do ambiente e primeiros passos na consola. | . | Sess√£o 2: Comandos, Navega√ß√£o e Ajuda . | Explora√ß√£o de comandos, navega√ß√£o no sistema de ficheiros, ajuda integrada e tipos de comandos. | . | Sess√£o 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes Interpreta√ß√£o do output, manipula√ß√£o de objetos, propriedades e m√©todos, formata√ß√£o e redirecionamento de resultados. | . üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o . ",
    "url": "/Curso_Powershell/Modules/Module1/#-estrutura-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module1/#-estrutura-do-m√≥dulo"
  },"2": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/",
    
    "relUrl": "/Modules/Module1/"
  },"3": {
    "doc": "Module 4: Automa√ß√£o de Tarefas no Windows e Linux",
    "title": "Module 4: Automa√ß√£o de Tarefas no Windows e Linux",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module4/",
    
    "relUrl": "/Modules/Module4/"
  },"4": {
    "doc": "M√≥dulo 3: Module 3: Gest√£o de Ficheiros e Processos",
    "title": "üéØ Objetivo do M√≥dulo",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module3/#-objetivo-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module3/#-objetivo-do-m√≥dulo"
  },"5": {
    "doc": "M√≥dulo 3: Module 3: Gest√£o de Ficheiros e Processos",
    "title": "üìå Estrutura do M√≥dulo",
    "content": ". | Sess√£o 1: Scripts, Seguran√ßa, Fun√ß√µes e Personaliza√ß√£o Consolidar pr√°ticas seguras e profissionais na cria√ß√£o de scripts PowerShell, introduzir o conceito de fun√ß√µes reutiliz√°veis, refor√ßar a recolha e valida√ß√£o de inputs. | Sess√£o 2: Personaliza√ß√£o do Ambiente PowerShell Aprender a configurar o ambiente pessoal de desenvolvimento, criar aliases e fun√ß√µes persistentes, e automatizar a√ß√µes ao iniciar o PowerShell. | . üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Scripts, Seguran√ßa, Fun√ß√µes e Personaliza√ß√£o . ",
    "url": "/Curso_Powershell/Modules/Module3/#-estrutura-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module3/#-estrutura-do-m√≥dulo"
  },"6": {
    "doc": "M√≥dulo 3: Module 3: Gest√£o de Ficheiros e Processos",
    "title": "M√≥dulo 3: Module 3: Gest√£o de Ficheiros e Processos",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module3/",
    
    "relUrl": "/Modules/Module3/"
  },"7": {
    "doc": "M√≥dulo 2: Fundamentos de Scripting e L√≥gica em PowerShell",
    "title": "üéØ Objetivo do M√≥dulo",
    "content": "Neste m√≥dulo, vais dominar os fundamentos essenciais para criar scripts em PowerShell. Aprender√°s a trabalhar com vari√°veis, tipos de dados, controlo de erros, estruturas condicionais e ciclos de repeti√ß√£o. Tamb√©m vais adquirir compet√™ncias pr√°ticas para construir scripts mais organizados, reutiliz√°veis e adapt√°veis a diferentes cen√°rios. Ao concluir este m√≥dulo, ser√°s capaz de: . | Escrever scripts em ficheiros .ps1 e configurar permiss√µes de execu√ß√£o . | Criar e utilizar vari√°veis e tipos de dados corretamente . | Implementar estruturas condicionais e ciclos (for, foreach, while, do-until) . | Tratar erros de forma robusta com try/catch/finally . | Manipular texto, n√∫meros, arrays e datas . | Organizar a l√≥gica de scripts para reutiliza√ß√£o e manuten√ß√£o eficiente . | . ",
    "url": "/Curso_Powershell/Modules/Module2/#-objetivo-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module2/#-objetivo-do-m√≥dulo"
  },"8": {
    "doc": "M√≥dulo 2: Fundamentos de Scripting e L√≥gica em PowerShell",
    "title": "üìå Estrutura do M√≥dulo",
    "content": ". | Sess√£o 1: Criar e Executar Scripts Como escrever scripts, permiss√µes de execu√ß√£o, estrutura de scripts, usar vari√°veis e l√≥gica dentro de ficheiros .ps1. | Sess√£o 2: Vari√°veis e Tipos de Dados Vari√°veis primitivas (string, int, bool), vari√°veis compostas (arrays, hashtables), e operadores b√°sicos. | Session 3: Tratamento de Erros com try, catch e finally‚Äô Aprender a capturar e tratar erros em PowerShell para tornar os scripts mais robustos, previs√≠veis e f√°ceis de manter. | Sess√£o 4: Manipula√ß√£o de Texto e Dados Simples Aprender a trabalhar com texto (strings), n√∫meros, arrays simples e datas de forma pr√°tica, incluindo convers√µes b√°sicas de tipos de dados em PowerShell. | Sess√£o 5: Estruturas Condicionais Uso de if, elseif, else, operadores de compara√ß√£o e booleanos. | Sess√£o 6: Loops e Itera√ß√µes for, foreach, while, do-until, uso em cen√°rios reais como valida√ß√µes ou repeti√ß√£o de comandos. | Sess√£o 7: Introdu√ß√£o a Fun√ß√µes Simples Definir fun√ß√µes (function Nome {}), passar par√¢metros, reutilizar c√≥digo e boas pr√°ticas b√°sicas. | . üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Criar e Executar Scripts . ",
    "url": "/Curso_Powershell/Modules/Module2/#-estrutura-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module2/#-estrutura-do-m√≥dulo"
  },"9": {
    "doc": "M√≥dulo 2: Fundamentos de Scripting e L√≥gica em PowerShell",
    "title": "M√≥dulo 2: Fundamentos de Scripting e L√≥gica em PowerShell",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/",
    
    "relUrl": "/Modules/Module2/"
  },"10": {
    "doc": "Curso de PowerShell & Shell Scripting",
    "title": "Bem-vindo ao Curso!",
    "content": "Este curso ir√° gui√°-lo atrav√©s dos fundamentos de PowerShell e Shell Scripting, introduzindo gradualmente conceitos mais avan√ßados por meio de exerc√≠cios pr√°ticos e exemplos do mundo real. üåü Estrutura do Curso . O curso est√° dividido em m√≥dulos, cada um contendo v√°rias sess√µes. O conte√∫do ser√° progressivamente disponibilizado de acordo com o calend√°rio das aulas. üìÖ Hor√°rio . | As aulas decorrem √†s segundas e quartas-feiras, das 19h √†s 21h. | O curso completo ter√° uma dura√ß√£o total de 30 horas. | . üìö Vis√£o Geral dos M√≥dulos e Sess√µes . M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting . Fundamentos essenciais para come√ßares a trabalhar com PowerShell de forma produtiva. Aprende a explorar o ambiente, comandos e o comportamento dos objetos. | Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o Instala√ß√£o, configura√ß√£o do ambiente, primeiros comandos na consola. | Sess√£o 2: Comandos, Navega√ß√£o e Ajuda Navegar no sistema de ficheiros, explorar comandos e utilizar a ajuda integrada. | Sess√£o 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes Compreender o sistema de objetos do PowerShell, formata√ß√£o de output, exporta√ß√µes e boas pr√°ticas no uso de comandos . | . M√≥dulo 2: Fundamentos de Scripting e L√≥gica em PowerShell . Aprende a construir a tua l√≥gica com vari√°veis, condi√ß√µes, ciclos e scripts reutiliz√°veis. | Sess√£o 1: Criar e Executar Scripts Como escrever scripts, permiss√µes de execu√ß√£o, estrutura de scripts, usar vari√°veis e l√≥gica dentro de ficheiros .ps1. | Sess√£o 2: Vari√°veis e Tipos de Dados Vari√°veis primitivas (string, int, bool), vari√°veis compostas (arrays, hashtables), e operadores b√°sicos. | Session 3: Tratamento de Erros com try, catch e finally‚Äô Aprender a capturar e tratar erros em PowerShell para tornar os scripts mais robustos, previs√≠veis e f√°ceis de manter. | Sess√£o 4: Manipula√ß√£o de Texto e Dados Simples Aprender a trabalhar com texto (strings), n√∫meros, arrays simples e datas de forma pr√°tica, incluindo convers√µes b√°sicas de tipos de dados em PowerShell. | Sess√£o 5: Estruturas Condicionais Uso de if, elseif, else, operadores de compara√ß√£o e booleanos. | Sess√£o 6: Loops e Itera√ß√µes for, foreach, while, do-until, uso em cen√°rios reais como valida√ß√µes ou repeti√ß√£o de comandos. | . M√≥dulo 3: Scripts, Ficheiros e Processos . Trabalha com ficheiros, diret√≥rios e processos do sistema. Aprende a modularizar c√≥digo com fun√ß√µes, automatizar tarefas e criar scripts mais robustos. | Sess√£o 1: Scripts B√°sicos, Seguran√ßa e Fun√ß√µes Execu√ß√£o de scripts, fun√ß√µes reutiliz√°veis, permiss√µes, $PSScriptRoot, input do utilizador e personaliza√ß√£o com $PROFILE. | Sess√£o 2: Scripts Tem√°ticos com Ficheiros Automatizar tarefas do dia-a-dia com ficheiros: contar linhas, procurar conte√∫do, renomear, organizar pastas. | Sess√£o 3: Pesquisa, Filtragem e Exporta√ß√£o Criar relat√≥rios com Where-Object, Select-String, Export-Csv, pesquisa recursiva e tratamento de grandes volumes. | Sess√£o 4: Processos e Servi√ßos Monitorizar uso de CPU, listar processos ativos, criar logs, gerir servi√ßos com Start-Service e Stop-Service. | Sess√£o 5: Desafio de Automatiza√ß√£o Criar um script completo que automatize a recolha e exporta√ß√£o de informa√ß√£o sobre o sistema, aplicando todas as t√©cnicas anteriores. | . M√≥dulo 4: Automa√ß√£o de Tarefas no Windows e Linux . Usa o PowerShell para criar automa√ß√µes reais, com tarefas agendadas, notifica√ß√µes e integra√ß√£o com ficheiros de log. | Sess√£o 1: Tarefas Agendadas e Cron Jobs Criar e gerir tarefas agendadas no Windows ou cron jobs no Linux. | Sess√£o 2: Trabalhar com Servi√ßos e Logs Exportar logs de eventos, monitorizar servi√ßos, criar alertas simples. | Sess√£o 3: Notifica√ß√µes e Relat√≥rios Automatizados Gerar relat√≥rios CSV ou HTML, enviar por email, alertas com popups. | Sess√£o 4: Projeto Pr√°tico Final Desafio para consolidar conhecimentos: criar um script completo com l√≥gica, ciclos, exporta√ß√£o e agendamento. | . üîë Nota . O conte√∫do ser√° gradualmente disponibilizado. Por favor, siga de acordo com o calend√°rio das aulas. üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o . ",
    "url": "/Curso_Powershell/#bem-vindo-ao-curso",
    
    "relUrl": "/#bem-vindo-ao-curso"
  },"11": {
    "doc": "Curso de PowerShell & Shell Scripting",
    "title": "Curso de PowerShell & Shell Scripting",
    "content": " ",
    "url": "/Curso_Powershell/",
    
    "relUrl": "/"
  },"12": {
    "doc": "Refer√™ncia R√°pida",
    "title": "Comandos Essenciais em PowerShell",
    "content": "| O que fazer | Comando(s) | Observa√ß√£o | . | Ver ajuda completa de um comando | Get-Help 'comando' -Full ou Help 'comando' -Full | Mostra tudo: par√¢metros, descri√ß√£o, exemplos | . | Ver s√≥ os par√¢metros de um comando | Get-Help 'comando' -Parameter * | Lista apenas os par√¢metros | . | Ver m√©todos e propriedades de uma vari√°vel ou objeto | 'objeto' | Get-Member ou Get-Member -InputObject 'objeto' | Mostra m√©todos e propriedades | . | Ver vari√°veis no ambiente | Get-Variable | Mostra todas as vari√°veis atuais | . | Listar todos os comandos dispon√≠veis | Get-Command | Podes filtrar com -Verb Get ou -Noun Process | . | Ver o tipo de uma vari√°vel | ($variavel).GetType() | Mostra o tipo (System.String, etc.) | . | Criar ou alterar uma vari√°vel | $variavel = 'valor' | Atribui valores | . | Ver conte√∫do de uma vari√°vel | $variavel | S√≥ digitar o nome no terminal | . | Pedir input ao utilizador | Read-Host \"Pergunta\" | Guarda o input numa vari√°vel: $resposta = Read-Host \"Qual o teu nome?\" | . | Pausar o script durante alguns segundos | Start-Sleep -Seconds 5 | Tamb√©m podes usar -Milliseconds | . | Selecionar apenas algumas propriedades | Select-Object Name, CPU | Muito √∫til depois de Get-Process, Get-Service, etc. | . | Repetir um bloco de c√≥digo com contador | for ($i = 1; $i -le 10; $i++) { ... } | Exemplo t√≠pico de loop com incremento | . | Filtrar elementos de uma lista | Where-Object { $_ -gt 10 } | Usado com | e $_ para filtrar arrays ou cole√ß√µes | . | Ver tempo atual | Get-Date | Mostra data e hora. Usa .AddDays(), .ToShortTimeString(), etc. | . | Ver tipo e valor de uma vari√°vel | $var.GetType().Name; $var | Alternativa r√°pida a GetType() isolado | . ",
    "url": "/Curso_Powershell/refRapida.html#comandos-essenciais-em-powershell",
    
    "relUrl": "/refRapida.html#comandos-essenciais-em-powershell"
  },"13": {
    "doc": "Refer√™ncia R√°pida",
    "title": "Refer√™ncia R√°pida",
    "content": " ",
    "url": "/Curso_Powershell/refRapida.html",
    
    "relUrl": "/refRapida.html"
  },"14": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "üß≠ Sess√£o 1: Criar e Executar Scripts",
    "content": ". üéØ Objetivo Aprender a escrever scripts PowerShell em ficheiros .ps1, configurar permiss√µes de execu√ß√£o e correr os scripts com seguran√ßa. | 1. Scripts . | 1.1. Comandos interativos vs scripts guardados | 1.2. Vantagens de usar scripts | 1.3. Onde criar scripts | 1.4. Criar o primeiro script | 1.5. üß© Exerc√≠cio | 1.6. Boas pr√°ticas iniciais com scripts | 1.7. üß© Exerc√≠cio ‚Äì Corrigir caminhos relativos com $PSScriptRoot | . | 2. Execution Policies no PowerShell . | 2.1. Tipos principais de Execution Policy | 2.2. Alterar pol√≠tica | . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html",
    
    "relUrl": "/Modules/Module2/session1.html"
  },"15": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "1. Scripts",
    "content": "O que √© um script PowerShell? . Um script PowerShell √© um conjunto de comandos guardados num ficheiro de texto com a extens√£o .ps1. Ao contr√°rio de comandos que s√£o executados diretamente na linha de comandos (modo interativo), os scripts permitem guardar l√≥gica mais complexa, reutiliz√°vel e organizada para ser executada de forma automatizada. ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#1-scripts",
    
    "relUrl": "/Modules/Module2/session1.html#1-scripts"
  },"16": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "1.1. Comandos interativos vs scripts guardados",
    "content": "| Tipo | Exemplo | Descri√ß√£o | . | Interativo | Get-Process | Comando √∫nico executado diretamente no terminal. Ideal para testes r√°pidos. | . | Script (.ps1) | meu_script.ps1 | Cont√©m m√∫ltiplos comandos, l√≥gica de decis√£o, loops e fun√ß√µes. Usado para automatizar tarefas. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#11-comandos-interativos-vs-scripts-guardados",
    
    "relUrl": "/Modules/Module2/session1.html#11-comandos-interativos-vs-scripts-guardados"
  },"17": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "1.2. Vantagens de usar scripts",
    "content": ". | Guardar e reutilizar l√≥gica complexa | Automatizar tarefas repetitivas | Documentar o que foi feito | Facilitar a partilha de solu√ß√µes com outras pessoas | . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#12-vantagens-de-usar-scripts",
    
    "relUrl": "/Modules/Module2/session1.html#12-vantagens-de-usar-scripts"
  },"18": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "1.3. Onde criar scripts",
    "content": "Podes criar scripts com qualquer editor de texto, mas os mais recomendados s√£o: . | Visual Studio Code com a extens√£o PowerShell | PowerShell ISE (pr√©-instalado em muitas vers√µes do Windows) | Notepad (menos recomendado, pois n√£o tem destaques de sintaxe) | . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#13-onde-criar-scripts",
    
    "relUrl": "/Modules/Module2/session1.html#13-onde-criar-scripts"
  },"19": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "1.4. Criar o primeiro script",
    "content": "Os scripts PowerShell devem come√ßar com coment√°rios (#) que ajudam a documentar o que o script faz. A seguir, colocas os comandos que queres executar. Exemplo de script simples (ola.ps1) . # ola.ps1 # Este script imprime uma sauda√ß√£o $nome = \"Nuno\" Write-Output \"Ol√°, $nome! Bem-vindo ao PowerShell.\" . Guarda o ficheiro com a extens√£o .ps1 e executa com: .\\ola.ps1 . ‚ö†Ô∏è Aten√ß√£o: Scripts descarregados da internet . Se descarregares um script da internet, o Windows pode marc√°-lo como potencialmente perigoso. Mesmo que o conte√∫do seja seguro, o PowerShell pode bloquear a execu√ß√£o. Para desbloquear o ficheiro, usa: . Unblock-File -Path .\\script_descarregado.ps1 . Este passo √© essencial se estiveres a testar scripts obtidos de blogs, f√≥runs ou reposit√≥rios p√∫blicos. Mais informa√ß√£o Consulta a documenta√ß√£o oficial da Microsoft: üîó about_Scripts . ‚ùóNota: Se ao tentares correr o teu script aparecer um erro a dizer que a execu√ß√£o de scripts est√° desativada, n√£o te preocupes ‚Äî vamos j√° ver porqu√™ e como resolver isso. ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#14-criar-o-primeiro-script",
    
    "relUrl": "/Modules/Module2/session1.html#14-criar-o-primeiro-script"
  },"20": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "1.5. üß© Exerc√≠cio",
    "content": "Cria um script chamado apresentacao.ps1 que: . | Guarda o teu nome numa vari√°vel | Usa Write-Output para mostrar uma mensagem de apresenta√ß√£o | Mostra a data atual com Get-Date | . Exemplo de sa√≠da ao correr o script: . Ol√°, o meu nome √© Nuno. Hoje √©: domingo, 21 de abril de 2025 09:42:17 . Guarda e executa com: .\\apresentacao.ps1 . Resposta # apresentacao.ps1 # Apresenta√ß√£o simples com nome e data atual $nome = \"Nuno\" Write-Output \"Ol√°, o meu nome √© $nome.\" Write-Output \"Hoje √©:\" Get-Date . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#15--exerc%C3%ADcio",
    
    "relUrl": "/Modules/Module2/session1.html#15--exerc√≠cio"
  },"21": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "1.6. Boas pr√°ticas iniciais com scripts",
    "content": "A partir do momento em que come√ßas a escrever scripts, √© importante adotar boas pr√°ticas simples que v√£o facilitar o teu trabalho no futuro: . | Guarda os scripts em pastas organizadas Cria uma pasta como MeusScripts e guarda l√° os teus ficheiros .ps1 para os localizares facilmente. | Executa scripts a partir da pasta onde est√£o guardados Usa cd para navegar at√© √† pasta onde o script est√° e depois executa com: .\\nome_do_script.ps1 . | Evita erros com caminhos absolutos e relativos Se o teu script usa ficheiros (por exemplo, l√™ ou escreve em .txt), um caminho como este: .\\dados\\ficheiro.txt . s√≥ vai funcionar se correres o script a partir da mesma pasta onde ele est√°. Se correres o script a partir de outra pasta, o caminho relativo pode falhar porque est√° a ser interpretado em rela√ß√£o √† pasta atual do terminal, n√£o √† localiza√ß√£o do script. ‚û°Ô∏è Boa pr√°tica: dentro do script, usa $PSScriptRoot para construir caminhos relativos √† localiza√ß√£o do pr√≥prio script, por exemplo: . $ficheiro = Join-Path $PSScriptRoot \"dados\\ficheiro.txt\" . Isto garante que o script funciona corretamente mesmo que seja chamado a partir de outras localiza√ß√µes. | Come√ßa sempre com coment√°rios descritivos Inclui uma ou duas linhas no in√≠cio do script a explicar o que ele faz: . # Este script mostra o nome do utilizador e a data atual . | Separa a l√≥gica por blocos Usa linhas em branco e coment√°rios para organizar a estrutura: . # Sec√ß√£o 1 ‚Äì Definir vari√°veis # Sec√ß√£o 2 ‚Äì Mostrar mensagens . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#16-boas-pr%C3%A1ticas-iniciais-com-scripts",
    
    "relUrl": "/Modules/Module2/session1.html#16-boas-pr√°ticas-iniciais-com-scripts"
  },"22": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "1.7. üß© Exerc√≠cio ‚Äì Corrigir caminhos relativos com $PSScriptRoot",
    "content": "Vamos simular um pequeno projeto com ficheiros organizados em pastas e perceber porque √© que os caminhos relativos podem causar erros. Passo 1 ‚Äì Preparar a estrutura . | Cria uma pasta chamada Projeto1 | Dentro dessa pasta, cria uma subpasta chamada dados | Dentro da pasta dados, cria um ficheiro chamado mensagem.txt com o conte√∫do: . Bem-vindo ao PowerShell! . | . Passo 2 ‚Äì Criar um script com caminho relativo . | Na pasta Projeto1, cria um script chamado ler.ps1 com o seguinte conte√∫do: . # ler.ps1 # Tentativa de ler um ficheiro usando caminho relativo (forma incorreta) $ficheiro = \".\\dados\\mensagem.txt\" Get-Content $ficheiro . | . Passo 3 ‚Äì Executar o script fora da pasta . | Abre o PowerShell, navega at√© a localiza√ß√£o do script e corre o mesmo .\\ler.ps1 . | Agora navega at√© outra pasta qualquer (por exemplo, C:\\Utilizadores\\TeuNome). | Executa o script com o caminho completo: . C:\\Caminho\\Para\\Projeto1\\ler.ps1 . Ou: . cd C:\\Caminho\\Para\\ .\\Projeto1\\ler.ps1 . | Observa o erro que aparece. O script n√£o consegue encontrar o ficheiro porque o caminho . \\dados\\mensagem.txt √© relativo √† localiza√ß√£o atual do terminal, e n√£o √† localiza√ß√£o do script. | . O teu desafio . Corrige o script para que funcione corretamente, independentemente da pasta onde o terminal est√° aberto. | Usa a vari√°vel autom√°tica $PSScriptRoot | Usa Join-Path para construir o caminho completo | . üí° Dica: $PSScriptRoot representa a pasta onde o script est√° guardado. Resposta # ler.ps1 # Caminho constru√≠do corretamente com base na localiza√ß√£o do script $ficheiro = Join-Path $PSScriptRoot \"dados\\mensagem.txt\" Get-Content $ficheiro . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#17--exerc%C3%ADcio--corrigir-caminhos-relativos-com-psscriptroot",
    
    "relUrl": "/Modules/Module2/session1.html#17--exerc√≠cio--corrigir-caminhos-relativos-com-psscriptroot"
  },"23": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "2. Execution Policies no PowerShell",
    "content": "O PowerShell inclui um sistema de seguran√ßa chamado Execution Policy (Pol√≠tica de Execu√ß√£o) que define se e como scripts podem ser executados no teu sistema. Estas pol√≠ticas n√£o s√£o um mecanismo de seguran√ßa forte, mas servem para evitar a execu√ß√£o acidental de scripts maliciosos, especialmente em ambientes corporativos. ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#2-execution-policies-no-powershell",
    
    "relUrl": "/Modules/Module2/session1.html#2-execution-policies-no-powershell"
  },"24": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "2.1. Tipos principais de Execution Policy",
    "content": "| Pol√≠tica | Descri√ß√£o | . | Restricted | Padr√£o em muitos sistemas. N√£o permite executar scripts. Apenas comandos interativos. | . | AllSigned | Permite apenas scripts assinados digitalmente por uma entidade de confian√ßa. | . | RemoteSigned | Scripts locais podem correr. Scripts da internet precisam de estar assinados. Ideal para desenvolvimento local. | . | Unrestricted | Permite todos os scripts, mas mostra avisos se o ficheiro vier da internet. | . | Bypass | Nenhuma restri√ß√£o. √ötil para automa√ß√µes espec√≠ficas (evitar em uso geral). | . Ver a pol√≠tica atual: . Get-ExecutionPolicy . Ver todas as pol√≠ticas por n√≠vel (MachinePolicy, UserPolicy, etc.): . Get-ExecutionPolicy -List . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#21-tipos-principais-de-execution-policy",
    
    "relUrl": "/Modules/Module2/session1.html#21-tipos-principais-de-execution-policy"
  },"25": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "2.2. Alterar pol√≠tica",
    "content": "Alterar a pol√≠tica s√≥ para o teu utilizador: . Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned . ‚ö†Ô∏è Aten√ß√£o: S√≥ deves alterar a Execution Policy se souberes o que est√°s a fazer. Usa sempre o -Scope CurrentUser para n√£o afetar outros utilizadores do sistema. Repor para o valor padr√£o (Restrito): . Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Restricted . Como saber se um script veio da internet? . Se fizeres download de um .ps1 da internet, o Windows pode marc√°-lo com um bloqueio. Podes remover esse bloqueio com: . Unblock-File -Path .\\script.ps1 . Mais informa√ß√£o: üîó about_Execution_Policies ‚Äî Documenta√ß√£o Oficial . ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html#22-alterar-pol%C3%ADtica",
    
    "relUrl": "/Modules/Module2/session1.html#22-alterar-pol√≠tica"
  },"26": {
    "doc": "Session 1: Criar e Executar Scripts",
    "title": "Session 1: Criar e Executar Scripts",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/session1.html",
    
    "relUrl": "/Modules/Module2/session1.html"
  },"27": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "üß≠ Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o",
    "content": ". üéØ Objetivo Introduzir os conceitos b√°sicos de PowerShell e Shell Scripting, compar√°-los, e configurar o ambiente de trabalho. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html",
    
    "relUrl": "/Modules/Module1/session1.html"
  },"28": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1. Introdu√ß√£o (20 min)",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#1-introdu%C3%A7%C3%A3o-20-min",
    
    "relUrl": "/Modules/Module1/session1.html#1-introdu√ß√£o-20-min"
  },"29": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.1. O que √© um Shell?",
    "content": ". | Um Shell √© um programa que serve como interface entre o utilizador e o sistema operacional. Ele recebe comandos do utilizador, interpreta esses comandos e instrui o sistema operacional a execut√°-los. Os resultados da execu√ß√£o s√£o ent√£o exibidos de volta ao utilizador. | Existem dois tipos principais de Shells: | . Shells de Linha de Comando (CLI - Command Line Interface): . | Interfaces textuais onde o usu√°rio interage digitando comandos e recebendo respostas em forma de texto. | Exemplos: PowerShell, Bash, cmd.exe (Prompt de Comando do Windows). | . Shells Gr√°ficos (GUI - Graphical User Interface): . | Interfaces visuais com √≠cones, janelas e menus. | Exemplos: Windows Explorer, Finder no macOS. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#11-o-que-%C3%A9-um-shell",
    
    "relUrl": "/Modules/Module1/session1.html#11-o-que-√©-um-shell"
  },"30": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.2. O que √© PowerShell?",
    "content": ". | PowerShell √© um exemplo de shell de linha de comando e uma linguagem de script integrados em um √∫nico ambiente. | Foi inicialmente projetado como uma framework para automatizar tarefas administrativas no Windows, mas evoluiu para uma ferramenta multiplataforma dispon√≠vel em Windows, Linux e MacOS. | Atualmente, √© utilizado para diversos tipos de tarefas, como administra√ß√£o de sistemas, automa√ß√£o de fluxos de trabalho e integra√ß√£o com servi√ßos na cloud. | O PowerShell oferece muitos comandos √∫teis, mas suas capacidades podem ser expandidas a qualquer momento pela instala√ß√£o de m√≥dulos adicionais. | Baseia-se em .NET e inclui uma linguagem de scripting, bem como um interpretador de linha de comandos. | Permite a automa√ß√£o de tarefas administrativas no Windows, Linux e MacOS. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#12-o-que-%C3%A9-powershell",
    
    "relUrl": "/Modules/Module1/session1.html#12-o-que-√©-powershell"
  },"31": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.3. Diferen√ßa entre CMD e PowerShell no Windows",
    "content": "O CMD (Command Prompt) e o PowerShell s√£o ambos Shells de linha de comando no Windows, mas t√™m diferen√ßas fundamentais em termos de capacidade, sintaxe, funcionalidade e uso. | Aspecto | CMD (Command Prompt) | PowerShell | . | Lan√ßamento | D√©cada de 1980 (MS-DOS, Windows NT) | 2006 (Windows PowerShell), 2016 (PowerShell Core) | . | Linguagem | N√£o √© uma linguagem de programa√ß√£o completa. | Linguagem de scripting poderosa e orientada a objetos. | . | Comandos | Baseados em MS-DOS e Windows NT. Ex.: dir, copy, del. | Usa cmdlets (Get-Process, Get-Service) e aceita comandos do CMD. | . | Suporte a Objetos | Trabalha apenas com texto puro. | Trabalha com objetos .NET, permitindo manipula√ß√£o avan√ßada de dados. | . | Automa√ß√£o | Limitada, mais adequada para tarefas b√°sicas. | Ideal para automa√ß√£o de sistemas, CI/CD, gerenciamento de servidores e cloud. | . | Pipeline | Simples (envia texto de um comando para outro). | Complexo e poderoso (envia objetos completos entre cmdlets). | . | Compatibilidade | Compat√≠vel com comandos antigos do MS-DOS. | Compat√≠vel com comandos do CMD, mas oferece muito mais funcionalidades. | . | Integra√ß√£o | Focado apenas no sistema operacional local. | Pode gerenciar sistemas locais, remotos e na nuvem (Azure, AWS). | . | Editor Integrado | N√£o possui. | Inclui PowerShell ISE e √© totalmente integrado ao Visual Studio Code. | . | Exemplos de Uso | dir, ipconfig, netstat. | Get-Process, Get-Service, Get-Command, Invoke-RestMethod. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#13-diferen%C3%A7a-entre-cmd-e-powershell-no-windows",
    
    "relUrl": "/Modules/Module1/session1.html#13-diferen√ßa-entre-cmd-e-powershell-no-windows"
  },"32": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.4. üöÄ Resumo",
    "content": ". | CMD: √â antigo, limitado e trabalha apenas com texto puro. Ideal para tarefas b√°sicas e r√°pidas. | PowerShell: √â moderno, poderoso e trabalha com objetos, facilitando automa√ß√£o avan√ßada, administra√ß√£o de sistemas e integra√ß√£o com plataformas na nuvem. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#14--resumo",
    
    "relUrl": "/Modules/Module1/session1.html#14--resumo"
  },"33": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.5. O que √© Shell Scripting?",
    "content": ". | Shell Scripting √© um m√©todo de automatizar tarefas por meio de scripts executados pelo Shell do sistema operacional. | Amplamente utilizado em sistemas Unix/Linux, mas tamb√©m dispon√≠vel no Windows (especialmente com o WSL - Windows Subsystem for Linux). | Inclui linguagens como Bash, Zsh, e outras. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#15-o-que-%C3%A9-shell-scripting",
    
    "relUrl": "/Modules/Module1/session1.html#15-o-que-√©-shell-scripting"
  },"34": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.6. Casos de uso t√≠picos de cada linguagem:",
    "content": ". | PowerShell: Administra√ß√£o de sistemas Windows, automatiza√ß√£o de tarefas de infraestrutura em Azure, manipula√ß√£o de arquivos e relat√≥rios. | Bash: Gest√£o de servidores Linux, manipula√ß√£o de arquivos e diret√≥rios, automatiza√ß√£o de backups e processos de instala√ß√£o. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#16-casos-de-uso-t%C3%ADpicos-de-cada-linguagem",
    
    "relUrl": "/Modules/Module1/session1.html#16-casos-de-uso-t√≠picos-de-cada-linguagem"
  },"35": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.7. Funcionalidades do PowerShell",
    "content": ". | Sistema de Ajuda Integrado: Get-Help Get-Process . | Pipeline Poderoso: Get-Process | Where-Object {$_.CPU -gt 100} . | Aliases: Exemplo: ls, cls, cd funcionam no PowerShell. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#17-funcionalidades-do-powershell",
    
    "relUrl": "/Modules/Module1/session1.html#17-funcionalidades-do-powershell"
  },"36": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1.8. Como o PowerShell √© Diferente de Shells Tradicionais",
    "content": ". | Trabalha com objetos, n√£o com texto. | Usa cmdlets com sintaxe Verbo-Substantivo. | Diferentes tipos de comandos: execut√°veis, cmdlets, fun√ß√µes, aliases. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#18-como-o-powershell-%C3%A9-diferente-de-shells-tradicionais",
    
    "relUrl": "/Modules/Module1/session1.html#18-como-o-powershell-√©-diferente-de-shells-tradicionais"
  },"37": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "2. Instala√ß√£o e Configura√ß√£o do Ambiente",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#2-instala%C3%A7%C3%A3o-e-configura%C3%A7%C3%A3o-do-ambiente",
    
    "relUrl": "/Modules/Module1/session1.html#2-instala√ß√£o-e-configura√ß√£o-do-ambiente"
  },"38": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "2.1. Windows PowerShell vs. PowerShell Core",
    "content": "Windows PowerShell . | Plataforma: Apenas Windows. | Baseado em: .NET Framework (antigo e obsoleto para novos projetos). | √öltima vers√£o: 5.1 (Lan√ßada em 2016, com √∫ltimas atualiza√ß√µes de seguran√ßa em 2019). | Instala√ß√£o: Pr√©-instalado em vers√µes modernas do Windows (Windows 7 SP1, Windows Server 2008 R2 e posteriores). | Objetivo Principal: Administra√ß√£o de sistemas Windows e automa√ß√£o de tarefas locais. | Limita√ß√µes: . | Apenas dispon√≠vel no Windows, sem suporte para Linux ou MacOS. | N√£o suporta .NET Core ou vers√µes modernas de .NET. | Desenvolvimento interrompido, apenas com atualiza√ß√µes de seguran√ßa. | . | Recomenda√ß√£o: Usar apenas para manter compatibilidade com sistemas antigos ou quando funcionalidades espec√≠ficas do Windows PowerShell s√£o necess√°rias. | . PowerShell Core (Agora chamado apenas de PowerShell) . | Plataforma: Multiplataforma (Windows, Linux, MacOS). | Baseado em: .NET Core / .NET 5+ (mais recente, mais eficiente e de c√≥digo aberto). | √öltima vers√£o: 7.x (Atualizado regularmente). | Instala√ß√£o: Dispon√≠vel para download no GitHub. | Objetivo Principal: Automa√ß√£o e administra√ß√£o de sistemas em m√∫ltiplas plataformas, incluindo integra√ß√£o com servi√ßos em cloud (Azure, AWS, etc). | Vantagens: . | Funciona em m√∫ltiplos sistemas operacionais. | Melhor desempenho, menor consumo de mem√≥ria e suporte para APIs modernas do .NET. | Desenvolvimento ativo e cont√≠nuo com novas funcionalidades. | Melhor compatibilidade com plataformas cloud e ferramentas DevOps. | . | Recomenda√ß√£o: Ideal para novos projetos, especialmente quando a compatibilidade multiplataforma √© necess√°ria. | . üí° Nota: Desde a vers√£o 7.0, o PowerShell Core √© simplesmente chamado de PowerShell. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#21-windows-powershell-vs-powershell-core",
    
    "relUrl": "/Modules/Module1/session1.html#21-windows-powershell-vs-powershell-core"
  },"39": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "2.2. Bash no Linux, MacOS e Windows (WSL)",
    "content": "Linux e MacOS . | Disponibilidade: O Bash √© instalado por padr√£o em praticamente todas as distribui√ß√µes Linux e no MacOS. | Alternativas: Pode ser substitu√≠do por shells modernos como zsh, fish, ou ksh. | Popularidade: Especialmente comum em sistemas Linux, onde √© usado para tarefas administrativas, scripts de inicializa√ß√£o e automa√ß√£o. | Atualiza√ß√£o: No Linux, pode ser atualizado usando o sistema de pacotes da distribui√ß√£o (ex.: apt, yum, dnf). | . Windows (WSL - Windows Subsystem for Linux) . | Disponibilidade: Dispon√≠vel nativamente no Windows 10 e 11. | Objetivo: Permitir que os utilizadores executem um ambiente Linux diretamente no Windows sem necessidade de uma m√°quina virtual completa. | Vantagens: . | Permite desenvolver e testar scripts Bash nativamente no Windows. | F√°cil integra√ß√£o com ferramentas de desenvolvimento modernas (ex.: Docker). | Melhor suporte para automa√ß√£o e ferramentas Linux em ambientes Windows. | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#22-bash-no-linux-macos-e-windows-wsl",
    
    "relUrl": "/Modules/Module1/session1.html#22-bash-no-linux-macos-e-windows-wsl"
  },"40": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3. Como Instalar e Configurar PowerShell Core e Bash",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#3-como-instalar-e-configurar-powershell-core-e-bash",
    
    "relUrl": "/Modules/Module1/session1.html#3-como-instalar-e-configurar-powershell-core-e-bash"
  },"41": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3.1. Instalar PowerShell (Core)",
    "content": ". | Windows (WinGet - Recomendado): winget install --id Microsoft.PowerShell --source winget . | Windows (MSI Installer): . | Baixar o instalador mais recente do GitHub Releases. | Executar o instalador e seguir as instru√ß√µes. | . | Linux (Debian/Ubuntu): sudo apt-get install -y powershell . | Linux (Fedora/CentOS/RHEL): sudo dnf install -y powershell . | MacOS (via Homebrew): brew install --cask powershell . | Executar o PowerShell: pwsh . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#31-instalar-powershell-core",
    
    "relUrl": "/Modules/Module1/session1.html#31-instalar-powershell-core"
  },"42": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3.2. Instalar Bash no Windows (WSL)",
    "content": ". | Habilitar o WSL: wsl --install . | Listar distribui√ß√µes disponiveis wsl --list --online . | Instalar uma distribui√ß√£o espec√≠fica (ex.: Ubuntu): wsl --install -d Ubuntu . | Verificar a vers√£o do WSL instalada: wsl -l -v . | Atualizar o WSL para a vers√£o 2: wsl --set-default-version 2 . | Executar o Bash no Windows: wsl . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#32-instalar-bash-no-windows-wsl",
    
    "relUrl": "/Modules/Module1/session1.html#32-instalar-bash-no-windows-wsl"
  },"43": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3.3. Comandos √∫teis do WSL",
    "content": "| wsl -l: Lista todas as distribui√ß√µes WSL instaladas. | wsl -d &lt;distribution name&gt;: Inicia uma nova sess√£o WSL usando a distribui√ß√£o especificada. | wsl --shutdown: Encerra todas as sess√µes WSL em execu√ß√£o. | wsl --terminate &lt;distribution name&gt;: Termina a sess√£o WSL da distribui√ß√£o especificada. | wsl --default &lt;distribution name&gt; ou wsl --setdefault &lt;distribution name&gt;: Define a distribui√ß√£o WSL padr√£o (usada quando se executa apenas wsl no terminal). | wsl --terminate &lt;distribution name&gt;: Termina uma distribui√ß√£o WSL em execu√ß√£o. | wsl --shutdown: Encerra todas as inst√¢ncias WSL em execu√ß√£o. | . üîó Refer√™ncias: . | https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.5 | https://www.gnu.org/software/bash/manual/ | https://learn.microsoft.com/en-us/windows/wsl/install | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#33-comandos-%C3%BAteis-do-wsl",
    
    "relUrl": "/Modules/Module1/session1.html#33-comandos-√∫teis-do-wsl"
  },"44": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4. Primeiros Comandos B√°sicos",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#4-primeiros-comandos-b%C3%A1sicos",
    
    "relUrl": "/Modules/Module1/session1.html#4-primeiros-comandos-b√°sicos"
  },"45": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4.1. Comandos Comuns em PowerShell e Bash",
    "content": "(tabela pwd, ls, cd, etc.) . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#41-comandos-comuns-em-powershell-e-bash",
    
    "relUrl": "/Modules/Module1/session1.html#41-comandos-comuns-em-powershell-e-bash"
  },"46": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4.2. Diferen√ßas entre PowerShell e Bash",
    "content": ". | PowerShell usa objetos e cmdlets. | Bash usa texto e comandos Unix-like. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#42-diferen%C3%A7as-entre-powershell-e-bash",
    
    "relUrl": "/Modules/Module1/session1.html#42-diferen√ßas-entre-powershell-e-bash"
  },"47": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4.3. üîç Exemplo Pr√°tico de Diferen√ßa: Objetos vs. Texto",
    "content": ". | PowerShell: Get-Process | Where-Object { $_.CPU -gt 100 } . | Bash: top -b -n 1 | awk '{ if($9 &gt; 0.1) print $0 }' . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#43--exemplo-pr%C3%A1tico-de-diferen%C3%A7a-objetos-vs-texto",
    
    "relUrl": "/Modules/Module1/session1.html#43--exemplo-pr√°tico-de-diferen√ßa-objetos-vs-texto"
  },"48": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5. Pr√°tica",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#5-pr%C3%A1tica",
    
    "relUrl": "/Modules/Module1/session1.html#5-pr√°tica"
  },"49": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.1. üíª Exerc√≠cio 1: Onde estamos?",
    "content": "pwd . pwd . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#51--exerc%C3%ADcio-1-onde-estamos",
    
    "relUrl": "/Modules/Module1/session1.html#51--exerc√≠cio-1-onde-estamos"
  },"50": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.2. üíª Exerc√≠cio 2: O que existe aqui?",
    "content": "ls ls | Format-List . ls ls -l . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#52--exerc%C3%ADcio-2-o-que-existe-aqui",
    
    "relUrl": "/Modules/Module1/session1.html#52--exerc√≠cio-2-o-que-existe-aqui"
  },"51": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.3. üíª Exerc√≠cio 3: Criar diret√≥rios",
    "content": "mkdir Aula1 . mkdir Aula1 . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#53--exerc%C3%ADcio-3-criar-diret%C3%B3rios",
    
    "relUrl": "/Modules/Module1/session1.html#53--exerc√≠cio-3-criar-diret√≥rios"
  },"52": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.4. üíª Exerc√≠cio 4: Entrar e sair da pasta",
    "content": "cd Aula1 cd .. cd Aula1 cd .. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#54--exerc%C3%ADcio-4-entrar-e-sair-da-pasta",
    
    "relUrl": "/Modules/Module1/session1.html#54--exerc√≠cio-4-entrar-e-sair-da-pasta"
  },"53": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5.5. üíª Exerc√≠cio 5: Criar um ficheiro vazio",
    "content": "New-Item -Name exemplo.txt -ItemType File . touch exemplo.txt . üì¶ Estes exerc√≠cios servem como base para comandos mais avan√ßados que ser√£o explorados nas sess√µes seguintes. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#55--exerc%C3%ADcio-5-criar-um-ficheiro-vazio",
    
    "relUrl": "/Modules/Module1/session1.html#55--exerc√≠cio-5-criar-um-ficheiro-vazio"
  },"54": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html",
    
    "relUrl": "/Modules/Module1/session1.html"
  },"55": {
    "doc": "Session 1: Manipula√ß√£o de Ficheiros e Diret√≥rios",
    "title": "üß≠ Sess√£o 1: Scripts, Seguran√ßa, Fun√ß√µes e Personaliza√ß√£o",
    "content": ". üéØ Objetivo Consolidar pr√°ticas seguras e profissionais na cria√ß√£o de scripts PowerShell, introduzir o conceito de fun√ß√µes reutiliz√°veis, refor√ßar a recolha e valida√ß√£o de inputs, e personalizar o ambiente PowerShell para desenvolvimento. | 1. Relembrar: Execu√ß√£o de Scripts e Caminhos . | 1.1. Executar scripts .ps1 | 1.2. Caminhos absolutos vs caminhos relativos | 1.3. Usar $PSScriptRoot + Join-Path | . | 2. Seguran√ßa e Boas Pr√°ticas ao Trabalhar com Scripts . | 2.1. Scripts de fontes desconhecidas | 2.2. Boas pr√°ticas ao correr scripts externos | 2.3. L√≥gica de confirma√ß√£o antes de a√ß√µes sens√≠veis | 2.4. Registo e controlo (logging b√°sico) | 2.5. Exemplo: Uso simples de Write-Verbose | 2.6. Dica adicional | 2.7. Tipos de mensagens no terminal (canais de escrita) | . | 3. Criar Logs em PowerShell . | 3.1. O que colocar nos logs? | 3.2. Formatos de data √∫teis | 3.3. Iniciar um log com informa√ß√µes b√°sicas | 3.4. Exemplo de entradas de log com tags | 3.5. Criar ficheiro de log √∫nico por execu√ß√£o | 3.6. Fechar o log com mensagem de fim | 3.7. Exemplo completo: script que apaga um ficheiro com logging e confirma√ß√£o | 3.8. üß© Exerc√≠cio: copiar ficheiro com logging personalizado | . | 4. Fun√ß√µes em PowerShell . | 4.1. O que √© uma fun√ß√£o? | 4.2. Fun√ß√µes com par√¢metros | 4.3. Tipagem de par√¢metros (opcional) | 4.4. Fun√ß√µes para modularizar scripts | 4.5. Usar return para devolver valores | 4.6. Boas pr√°ticas ao criar fun√ß√µes | 4.7. üß© Exerc√≠cios com fun√ß√µes | . | 5. Recolha de Inputs do Utilizador . | 5.1. Recolher input com Read-Host | 5.2. Converter e validar o input | 5.3. Confirmar a√ß√µes com input | 5.4. Input com janela gr√°fica | 5.5. Sanitiza√ß√£o e boas pr√°ticas | 5.6. Exemplo: sem sanitiza√ß√£o vs com sanitiza√ß√£o (simples e seguro) | 5.7. üß© Exerc√≠cios sobre Input | . | . ",
    "url": "/Curso_Powershell/Modules/Module3/session1.html",
    
    "relUrl": "/Modules/Module3/session1.html"
  },"56": {
    "doc": "Session 1: Manipula√ß√£o de Ficheiros e Diret√≥rios",
    "title": "1. Relembrar: Execu√ß√£o de Scripts e Caminhos",
    "content": "Nesta sec√ß√£o vamos relembrar rapidamente como funcionam os scripts PowerShell (.ps1), a import√¢ncia de usar caminhos corretos e como garantir que os scripts s√£o port√°teis e seguros. 1.1. Executar scripts .ps1 . Um script PowerShell √© um ficheiro de texto com a extens√£o .ps1 que cont√©m uma sequ√™ncia de comandos. Se o script estiver na mesma pasta onde o terminal est√° aberto: .\\script.ps1 . Se estiver noutra pasta: . C:\\Utilizadores\\Nuno\\Documentos\\script.ps1 . üîó J√° vimos a execu√ß√£o de scripts e permiss√µes na Sess√£o 1 do M√≥dulo 2 . 1.2. Caminhos absolutos vs caminhos relativos . Evita usar caminhos absolutos nos scripts: . ‚úñ $ficheiro = \"C:\\dados\\ficheiro.txt\" . Prefere caminhos relativos: . ‚úî $ficheiro = \".\\dados\\ficheiro.txt\" . Mas aten√ß√£o: esse caminho √© relativo ao terminal, n√£o ao local onde o script est√° guardado. 1.3. Usar $PSScriptRoot + Join-Path . Para garantir que o caminho √© relativo ao script, usa a vari√°vel autom√°tica $PSScriptRoot: . $ficheiro = Join-Path $PSScriptRoot \"dados\\ficheiro.txt\" . Este m√©todo torna o script mais robusto e port√°til. Exemplo completo: . $ficheiro = Join-Path $PSScriptRoot \"dados\\frases.txt\" $linhas = Get-Content $ficheiro Write-Output \"Conte√∫do lido:\" $linhas . üîó Esta t√©cnica foi aplicada com mais detalhe na Sess√£o 1 do M√≥dulo 2 . ",
    "url": "/Curso_Powershell/Modules/Module3/session1.html#1-relembrar-execu%C3%A7%C3%A3o-de-scripts-e-caminhos",
    
    "relUrl": "/Modules/Module3/session1.html#1-relembrar-execu√ß√£o-de-scripts-e-caminhos"
  },"57": {
    "doc": "Session 1: Manipula√ß√£o de Ficheiros e Diret√≥rios",
    "title": "2. Seguran√ßa e Boas Pr√°ticas ao Trabalhar com Scripts",
    "content": "Nesta fase do curso, √© importante adotar h√°bitos seguros ao desenvolver, testar e partilhar scripts PowerShell. Mesmo em ambientes internos, pr√°ticas inseguras podem causar perda de dados ou comprometer sistemas. 2.1. Scripts de fontes desconhecidas . Sempre que receberes um script .ps1 de outra pessoa ou da internet: . | N√£o corras diretamente. Abre o ficheiro num editor e l√™ o conte√∫do. | Verifica se existem comandos perigosos como Remove-Item, Stop-Service, Invoke-WebRequest, Start-Process com privil√©gios. | Se estiver ofuscado (c√≥digo dif√≠cil de ler de prop√≥sito), n√£o o uses. | . 2.2. Boas pr√°ticas ao correr scripts externos . | Rever manualmente o conte√∫do | Executar em ambiente de testes sempre que poss√≠vel | Se tiveres d√∫vidas, pergunta ou executa num PowerShell isolado (Windows Sandbox, por exemplo) | Se o ficheiro veio da internet, pode ser necess√°rio usar: . Unblock-File -Path \".\\nome-do-script.ps1\" . | . Nota: Como testar scripts em seguran√ßa . Executar scripts num ambiente de testes √© uma das melhores formas de evitar danos acidentais, especialmente quando os scripts fazem altera√ß√µes no sistema, nos ficheiros ou nos servi√ßos. Como criar um ambiente de testes simples em casa . | Cria uma m√°quina virtual com Windows (pode ser com o VirtualBox ou Hyper-V) | Instala o PowerShell e edita os teus scripts √† vontade | Alternativa mais simples: usa o Windows Sandbox se tiveres o Windows 10/11 Pro | . O Windows Sandbox √© um Windows tempor√°rio e isolado. Tudo o que fizeres l√° √© apagado ao fechar. Basta ativar nas funcionalidades do Windows e abrir pelo menu iniciar. Ambientes de testes em contexto empresarial . | Muitas empresas usam ambientes de testes (test/dev) separados dos sistemas reais (prod) | Se estiveres num ambiente empresarial: . | Pergunta se existe uma m√°quina virtual ou ambiente ‚Äúsandbox‚Äù para testes | Nunca corras scripts diretamente em servidores de produ√ß√£o sem valida√ß√£o | . | . 2.3. L√≥gica de confirma√ß√£o antes de a√ß√µes sens√≠veis . Se o teu script pode modificar ou eliminar algo, adiciona confirma√ß√µes expl√≠citas para evitar erros acidentais. Exemplo: . $confirmar = Read-Host \"Este script vai apagar ficheiros. Continuar? (S/N)\" if ($confirmar -ne \"N\") { Write-Output \"Opera√ß√£o cancelada.\" exit } . Outros exemplos: . | Confirmar antes de correr Remove-Item, Stop-Process, Restart-Service | Verificar se ficheiros existem antes de os apagar | . 2.4. Registo e controlo (logging b√°sico) . Para facilitar auditoria ou debugging, regista o que o script fez: . | Escrever no terminal: √∫til para feedback visual imediato . Write-Output \"Apagar ficheiro $ficheiro...\" . | Gravar em ficheiro de log: ideal para manter registo do que foi feito . Add-Content -Path \".\\log.txt\" -Value \"[$(Get-Date -Format \"yyyy-MM-dd HH:mm\")] Ficheiro removido: $ficheiro\" . | Escrever mensagens detalhadas (avan√ßado): √∫til para scripts com modo ‚Äúverbose‚Äù . Write-Verbose \"O ficheiro $ficheiro foi apagado com sucesso.\" . | . Para que as mensagens Write-Verbose apare√ßam, o script deve ser executado com o par√¢metro -Verbose e conter [CmdletBinding()] no topo, se for uma fun√ß√£o ou script avan√ßado. 2.5. Exemplo: Uso simples de Write-Verbose . O Write-Verbose permite mostrar mensagens detalhadas apenas quando o script √© executado com o par√¢metro -Verbose. [CmdletBinding()] param() Write-Output \"In√≠cio do script\" Write-Verbose \"Esta √© uma mensagem de debug detalhada\" Write-Output \"Fim do script\" . Ao correr o script normalmente: .\\meu-script.ps1 ‚Üí s√≥ aparecem as mensagens Write-Output . Ao correr com -Verbose: .\\meu-script.ps1 -Verbose ‚Üí tamb√©m aparece a linha Write-Verbose . 2.6. Dica adicional . | Mesmo scripts pequenos devem seguir estas boas pr√°ticas. Com o tempo, √© f√°cil esquecer o que um script faz ‚Äî um bom log e mensagens claras fazem a diferen√ßa. | Este tipo de prote√ß√£o n√£o √© s√≥ para servidores ‚Äî √© tamb√©m para ti, enquanto desenvolvedor. | . 2.7. Tipos de mensagens no terminal (canais de escrita) . Em PowerShell, existem v√°rios comandos para enviar mensagens para o terminal ‚Äî cada um com um objetivo espec√≠fico. Alguns s√£o vis√≠veis por defeito, outros s√≥ aparecem quando s√£o ativados com par√¢metros como -Verbose ou -Debug. üß© Comandos de escrita mais comuns . | Comando | Canal | Vis√≠vel por defeito? | Utiliza√ß√£o t√≠pica | . | Write-Output | Output (stream 1) | ‚úÖ Sim | Devolver valores ou mensagens ao pipeline | . | Write-Host | Host (direto) | ‚úÖ Sim | Mostrar mensagens diretamente no terminal | . | Write-Verbose | Verbose (stream 4) | ‚ùå S√≥ com -Verbose | Mensagens de depura√ß√£o mais detalhadas | . | Write-Debug | Debug (stream 5) | ‚ùå S√≥ com -Debug | Mensagens passo a passo para troubleshooting | . | Write-Warning | Warning (stream 3) | ‚úÖ Sim | Mostrar avisos (normalmente a amarelo) | . | Write-Error | Error (stream 2) | ‚úÖ Sim | Mensagens de erro, vis√≠veis e registadas em $Error | . | Write-Information | Information (stream 6) | ‚ùå S√≥ com -InformationAction | Mensagens informativas para logging ou debug | . Exemplos r√°pidos . Write-Output \"Isto √© output normal\" Write-Host \"Mensagem direta ao terminal\" Write-Verbose \"Detalhes internos\" # S√≥ com -Verbose Write-Warning \"Aten√ß√£o: algo n√£o est√° certo\" Write-Error \"Erro grave\" Write-Debug \"Valor da vari√°vel x = 5\" # S√≥ com -Debug Write-Information \"Info extra\" # Requer -InformationAction Continue . üí° Usa Write-Output para devolver valores, e Write-Host apenas para mensagens visuais. Para mensagens t√©cnicas ou auxiliares, usa Write-Verbose, Write-Warning ou Write-Information conforme o objetivo. O que s√£o os streams (fluxos de sa√≠da)? . PowerShell usa diferentes ‚Äúcanais‚Äù para enviar informa√ß√£o para fora dos comandos. Cada canal √© chamado de stream e tem um n√∫mero associado: . | 1 ‚Äì Output: valores normais devolvidos por comandos (Write-Output) | 2 ‚Äì Error: mensagens de erro (Write-Error) | 3 ‚Äì Warning: avisos (Write-Warning) | 4 ‚Äì Verbose: mensagens detalhadas de debug (Write-Verbose) | 5 ‚Äì Debug: mensagens passo a passo (Write-Debug) | 6 ‚Äì Information: mensagens informativas control√°veis (Write-Information) | . Cada stream pode ser mostrado, redirecionado ou ignorado de forma independente. Isto permite separar resultados normais, erros, e mensagens auxiliares num script mais profissional. Redirecionamento de Streams: √â poss√≠vel redirecionar os streams para ficheiros ou outros destinos. Por exemplo, para redirecionar erros para um ficheiro: . Get-Process -Name \"ProcessoInexistente\" 2&gt; erros.txt Para redirecionar todos os streams para um √∫nico ficheiro: .\\script.ps1 *&gt; sa√≠da_completa.txt O operador `*&gt;` redireciona todos os streams (1 a 6) para o destino especificado. Compreender e utilizar corretamente os streams permite um controlo mais preciso sobre a sa√≠da dos scripts e facilita a identifica√ß√£o e resolu√ß√£o de problemas. ",
    "url": "/Curso_Powershell/Modules/Module3/session1.html#2-seguran%C3%A7a-e-boas-pr%C3%A1ticas-ao-trabalhar-com-scripts",
    
    "relUrl": "/Modules/Module3/session1.html#2-seguran√ßa-e-boas-pr√°ticas-ao-trabalhar-com-scripts"
  },"58": {
    "doc": "Session 1: Manipula√ß√£o de Ficheiros e Diret√≥rios",
    "title": "3. Criar Logs em PowerShell",
    "content": "Criar logs √© uma pr√°tica fundamental para saber o que os scripts fizeram, quando correram e quem os executou. Isto √© essencial para an√°lise, auditoria e resolu√ß√£o de problemas. 3.1. O que colocar nos logs? . Um bom log deve incluir: . | Data e hora de cada evento | A√ß√£o realizada e respetivo resultado | Mensagens de erro claras | Informa√ß√£o contextual: quem executou, onde e quando | Separa√ß√£o por tipo: [INFO], [ERRO], [WARN], etc. | . 3.2. Formatos de data √∫teis . Get-Date -Format ‚Äúyyyy-MM-dd HH:mm‚Äù # leg√≠vel Get-Date -Format ‚ÄúyyyyMMdd_HHmmss‚Äù # √∫til para nomes de ficheiro (Get-Date).ToString(‚Äúo‚Äù) # formato ISO 8601 . 3.3. Iniciar um log com informa√ß√µes b√°sicas . $logPath = \".\\log.txt\" $data = Get-Date -Format \"yyyy-MM-dd HH:mm\" $utilizador = $env:USERNAME $maquina = $env:COMPUTERNAME $pasta = Get-Location Add-Content -Path $logPath -Value \"\" Add-Content -Path $logPath -Value \"$data [INFO] === In√≠cio do Script ===\" Add-Content -Path $logPath -Value \"$data [INFO] Utilizador: $utilizador\" Add-Content -Path $logPath -Value \"$data [INFO] M√°quina: $maquina\" Add-Content -Path $logPath -Value \"$data [INFO] Diret√≥rio atual: $pasta\" Add-Content -Path $logPath -Value \"$data [INFO] ==========================\" . 3.4. Exemplo de entradas de log com tags . $acao = \"Ficheiro apagado: exemplo.txt\" $data = Get-Date -Format \"yyyy-MM-dd HH:mm\" Add-Content -Path $logPath -Value \"$data [INFO] $acao\" . Em caso de erro . $erro = \"Falha ao apagar ficheiro: acesso negado\" Add-Content -Path $logPath -Value \"$data [ERRO] $erro\" . Aviso . Add-Content -Path $logPath -Value \"$data [WARN] Nenhum ficheiro foi encontrado para apagar\" . 3.5. Criar ficheiro de log √∫nico por execu√ß√£o . $timestamp = Get-Date -Format \"yyyyMMdd_HHmmss\" $logPath = \".\\log_$timestamp.txt\" . 3.6. Fechar o log com mensagem de fim . $data = Get-Date -Format \"yyyy-MM-dd HH:mm\" Add-Content -Path $logPath -Value \"$data [INFO] Script terminado com sucesso\" . 3.7. Exemplo completo: script que apaga um ficheiro com logging e confirma√ß√£o . # Criar nome √∫nico para o ficheiro de log $timestamp = Get-Date -Format \"yyyyMMdd_HHmmss\" $logPath = \".\\log_$timestamp.txt\" # Cabe√ßalho com informa√ß√µes b√°sicas $data = Get-Date -Format \"yyyy-MM-dd HH:mm\" $utilizador = $env:USERNAME $maquina = $env:COMPUTERNAME $pasta = Get-Location Add-Content -Path $logPath -Value \"$data [INFO] === In√≠cio do Script ===\" Add-Content -Path $logPath -Value \"$data [INFO] Utilizador: $utilizador\" Add-Content -Path $logPath -Value \"$data [INFO] M√°quina: $maquina\" Add-Content -Path $logPath -Value \"$data [INFO] Diret√≥rio atual: $pasta\" # Input do utilizador $ficheiro = Read-Host \"Introduz o caminho do ficheiro a apagar\" # Verifica√ß√£o se o ficheiro existe if (-not (Test-Path $ficheiro)) { Write-Output \"Ficheiro n√£o encontrado.\" Add-Content -Path $logPath -Value \"$data [ERRO] Ficheiro n√£o encontrado: $ficheiro\" return } # Confirma√ß√£o antes de apagar $confirmar = Read-Host \"Tens a certeza que queres apagar este ficheiro? (S/N)\" if ($confirmar -ne \"N\") { Write-Output \"Opera√ß√£o cancelada.\" Add-Content -Path $logPath -Value \"$data [INFO] Opera√ß√£o cancelada pelo utilizador\" return } # Apagar o ficheiro e registar no log try { Remove-Item -Path $ficheiro -ErrorAction Stop Write-Output \"Ficheiro apagado com sucesso.\" $data = Get-Date -Format \"yyyy-MM-dd HH:mm\" Add-Content -Path $logPath -Value \"$data [INFO] Ficheiro apagado: $ficheiro\" } catch { Write-Output \"Erro ao apagar ficheiro: $_\" $data = Get-Date -Format \"yyyy-MM-dd HH:mm\" Add-Content -Path $logPath -Value \"$data [ERRO] Falha ao apagar ficheiro: $_\" } # Fim do script $data = Get-Date -Format \"yyyy-MM-dd HH:mm\" Add-Content -Path $logPath -Value \"$data [INFO] Script terminado\" . 3.8. üß© Exerc√≠cio: copiar ficheiro com logging personalizado . Pretende-se criar um script que copie um ficheiro de um local para outro. A c√≥pia j√° est√° feita ‚Äî o teu foco ser√° criar entradas de log √∫teis, completas e bem estruturadas. O que deves implementar: . | Criar um ficheiro de log com nome baseado na data/hora | Escrever um cabe√ßalho com: . | Data de in√≠cio do script | Utilizador | Nome da m√°quina | Diret√≥rio atual | N√∫mero de processos ativos (usa Get-Process) | . | Registar: . | Se o ficheiro de origem existe ou n√£o | A√ß√£o de c√≥pia (sucesso ou falha) | Hora em que o script terminou | . | Utiliza tags como [INFO], [ERRO], [WARN] nas linhas do log | Usa Get-Date -Format \"yyyy-MM-dd HH:mm\" para adicionar a data em cada linha | . C√≥digo base do exerc√≠cio . # Caminho para o ficheiro de log (deves gerar um nome com timestamp) $logPath = \"\" # INPUTS do utilizador $origem = Read-Host \"Introduz o caminho do ficheiro de origem\" $destino = Read-Host \"Introduz o caminho de destino (ficheiro ou pasta)\" # VERIFICAR se o ficheiro de origem existe if (-not (Test-Path $origem)) { Write-Output \"Ficheiro n√£o encontrado: $origem\" # TODO: Adicionar entrada ao log com [ERRO] e a mensagem do erro return } # COPIAR o ficheiro try { Copy-Item -Path $origem -Destination $destino -Force Write-Output \"Ficheiro copiado com sucesso.\" # TODO: Adicionar entrada ao log com [INFO] sobre o sucesso da c√≥pia } catch { Write-Output \"Erro ao copiar ficheiro: $_\" # TODO: Adicionar entrada ao log com [ERRO] e o conte√∫do da vari√°vel $_ } # TODO: Escrever uma linha final no log com [INFO] indicando que o script terminou . ",
    "url": "/Curso_Powershell/Modules/Module3/session1.html#3-criar-logs-em-powershell",
    
    "relUrl": "/Modules/Module3/session1.html#3-criar-logs-em-powershell"
  },"59": {
    "doc": "Session 1: Manipula√ß√£o de Ficheiros e Diret√≥rios",
    "title": "4. Fun√ß√µes em PowerShell",
    "content": "Fun√ß√µes s√£o blocos de c√≥digo reutiliz√°veis que permitem organizar scripts, evitar repeti√ß√µes e tornar o c√≥digo mais limpo e f√°cil de manter. 4.1. O que √© uma fun√ß√£o? . Uma fun√ß√£o √© um grupo de comandos que executam uma tarefa espec√≠fica. Em PowerShell, definimos fun√ß√µes com a palavra-chave function. Sintaxe b√°sica: . function NomeDaFuncao { # Comandos } . Exemplo: . function Saudacao { Write-Output \"Ol√°, bem-vindo ao script!\" } . Para executar: . Saudacao . Nota sobre o scope das fun√ß√µes: . | Se criares uma fun√ß√£o no terminal, ela s√≥ estar√° dispon√≠vel enquanto essa sess√£o estiver aberta. | Se definires uma fun√ß√£o dentro de um script, ela s√≥ pode ser usada dentro desse mesmo script, durante a sua execu√ß√£o. | Para tornares uma fun√ß√£o dispon√≠vel em qualquer terminal, coloca-a no ficheiro $PROFILE. | . 4.2. Fun√ß√µes com par√¢metros . Podes passar valores para uma fun√ß√£o usando param(). function SaudacaoPersonalizada { param($nome) Write-Output \"Ol√°, $nome! Bem-vindo.\" } . Para correr: . SaudacaoPersonalizada -nome \"Rita\" . Podes tamb√©m definir mais do que um par√¢metro: . function Soma { param($a, $b) $resultado = $a + $b Write-Output \"Resultado: $resultado\" } . Para correr: . Soma -a 5 -b 3 . 4.3. Tipagem de par√¢metros (opcional) . Podes indicar que esperas um tipo espec√≠fico de valor (ex: string, int, etc.) . function Dobro { param([int]$numero) return $numero * 2 } . Para correr: . Dobro -numero 4 . 4.4. Fun√ß√µes para modularizar scripts . Se tens scripts com v√°rias partes repetidas (como logging, valida√ß√£o de inputs, confirma√ß√£o), podes coloc√°-las em fun√ß√µes. Exemplo: fun√ß√£o para confirmar uma a√ß√£o . function Confirmar-Acao { param($mensagem) $resposta = Read-Host \"$mensagem (S/N)\" if ($resposta -ne \"N\") { Write-Output \"Opera√ß√£o cancelada.\" return $false } return $true } . Para utilizar: . if (-not (Confirmar-Acao \"Queres apagar este ficheiro?\")) { return } . 4.5. Usar return para devolver valores . Podes usar return numa fun√ß√£o para devolver um valor, tal como noutras linguagens. Exemplo simples: . function Triplo { param([int]$numero) return $numero * 3 } $resultado = Triplo -numero 4 Write-Output \"Triplo: $resultado\" . Diferen√ßa entre Write-Output e return . | Write-Output envia o valor para o stream de sa√≠da (output) do PowerShell, normalmente vis√≠vel no terminal. | return termina a fun√ß√£o imediatamente e devolve o valor para ser usado noutro contexto, como numa vari√°vel, num if, ou noutra fun√ß√£o. | . Em muitos casos, ambos os comandos parecem funcionar da mesma forma, mas o return √© preferido quando queremos usar o valor de forma controlada, sem poluir a sa√≠da do script. Exemplo 1 ‚Äì usar return para c√°lculo: . function Soma { param($x, $y) return $x + $y } $total = Soma -x 5 -y 7 if ($total -gt 10) { Write-Output \"Resultado maior que 10\" } . Exemplo 2 ‚Äì usar Write-Output apenas envia para o terminal: . function Soma { param($x, $y) Write-Output ($x + $y) } # Este tamb√©m funciona: $total = Soma -x 5 -y 7 # Mas se fores usar num contexto mais complexo, pode ser problem√°tico . Recomenda√ß√£o: Usa return quando quiseres devolver valores para serem usados noutros blocos de c√≥digo. Usa Write-Output quando quiseres mostrar informa√ß√£o no terminal (mensagens, instru√ß√µes, etc.). Podes devolver texto, n√∫meros, arrays, objetos‚Ä¶ . function Lista-Extensoes { return @(\"txt\", \"csv\", \"log\") } $extensoes = Lista-Extensoes $extensoes | ForEach-Object { Write-Output \"Tipo: $_\" } . Se n√£o usares return, o PowerShell devolve implicitamente o √∫ltimo valor calculado. 4.6. Boas pr√°ticas ao criar fun√ß√µes . | O nome da fun√ß√£o deve indicar claramente o que faz | Usa verbos no infinitivo (ex: Mostrar-Mensagem, Copiar-Ficheiro, Validar-Input) | Usa return quando quiseres devolver valores | Escreve fun√ß√µes pequenas e com um prop√≥sito claro | Testa individualmente cada fun√ß√£o antes de a integrar num script | . 4.7. üß© Exerc√≠cios com fun√ß√µes . Exerc√≠cio 1 ‚Äì Converter temperatura . Cria uma fun√ß√£o chamada Converter-CelsiusParaFahrenheit que: . | Recebe uma temperatura em Celsius como par√¢metro | Converte para Fahrenheit usando a f√≥rmula: F = C √ó 1.8 + 32 | Devolve o valor convertido | . Depois de criar a fun√ß√£o, chama-a com um valor (por exemplo, 25) e mostra o resultado no terminal. Exerc√≠cio 2 ‚Äì Verificar se n√∫mero √© par . Cria uma fun√ß√£o chamada EhPar que: . | Recebe um n√∫mero como par√¢metro | Devolve True se for par, False caso contr√°rio | . Exerc√≠cio 3 ‚Äì Calcular total de ficheiros . Cria uma fun√ß√£o Contar-Ficheiros que: . | Recebe uma pasta como par√¢metro | Conta e devolve o n√∫mero de ficheiros existentes nessa pasta | . ",
    "url": "/Curso_Powershell/Modules/Module3/session1.html#4-fun%C3%A7%C3%B5es-em-powershell",
    
    "relUrl": "/Modules/Module3/session1.html#4-fun√ß√µes-em-powershell"
  },"60": {
    "doc": "Session 1: Manipula√ß√£o de Ficheiros e Diret√≥rios",
    "title": "5. Recolha de Inputs do Utilizador",
    "content": "Scripts mais interativos recolhem informa√ß√£o diretamente do utilizador. J√° us√°mos Read-Host em exemplos anteriores ‚Äî agora vamos refor√ßar e expandir com novas formas de entrada, valida√ß√£o e seguran√ßa. üîó Relembrar: Read-Host foi introduzido na Sess√£o 5 do M√≥dulo 2 . 5.1. Recolher input com Read-Host . Read-Host permite obter um valor simples do utilizador como string: . $nome = Read-Host \"Qual √© o teu nome?\" Write-Output \"Ol√°, $nome!\" . Todos os valores recolhidos com Read-Host s√£o tratados inicialmente como texto ([string]). 5.2. Converter e validar o input . Podes for√ßar a convers√£o para outros tipos (como [int]) ou validar com condi√ß√µes: . $idade = Read-Host \"Qual √© a tua idade?\" if ($idade -match '^\\d+$') { Write-Output \"Tens $idade anos\" } else { Write-Output \"Idade inv√°lida.\" } . Outra forma: . try { $numero = [int](Read-Host \"Introduz um n√∫mero inteiro\") Write-Output \"N√∫mero v√°lido: $numero\" } catch { Write-Output \"Valor inv√°lido!\" } . 5.3. Confirmar a√ß√µes com input . Antes de executar a√ß√µes importantes, como apagar ou modificar ficheiros, pede confirma√ß√£o: . $confirma = Read-Host \"Tens a certeza que queres continuar? (S/N)\" if ($confirma -ne \"S\") { Write-Output \"Opera√ß√£o cancelada.\" return } . 5.4. Input com janela gr√°fica . PowerShell permite criar caixas de input com janelas (√∫til em scripts mais amig√°veis): . Add-Type -AssemblyName Microsoft.VisualBasic $valor = [Microsoft.VisualBasic.Interaction]::InputBox(\"Introduz o teu nome\", \"Nome\") Write-Output \"Ol√°, $valor!\" . N√£o requer instala√ß√£o adicional, funciona no Windows com interface gr√°fica. Explica√ß√£o r√°pida do exemplo com InputBox: Linha 1: Add-Type -AssemblyName Microsoft.VisualBasic Carrega uma biblioteca que permite usar janelas gr√°ficas simples no PowerShell. Linha 2: $valor = [Microsoft.VisualBasic.Interaction]::InputBox(\"Introduz o teu nome\", \"Nome\") Mostra uma caixa de input com o texto ‚ÄúIntroduz o teu nome‚Äù e o t√≠tulo ‚ÄúNome‚Äù. O valor introduzido √© guardado na vari√°vel $valor. 5.5. Sanitiza√ß√£o e boas pr√°ticas . | Verifica sempre se o input √© v√°lido antes de usar | Evita inputs perigosos em comandos (Remove-Item $input sem validar pode ser arriscado) | Usa regex ou valida√ß√£o com [int], [datetime], etc. | D√° feedback claro ao utilizador | . 5.6. Exemplo: sem sanitiza√ß√£o vs com sanitiza√ß√£o (simples e seguro) . Sem sanitiza√ß√£o . $opcao = Read-Host \"Escolhe uma op√ß√£o (1 = Ver lista, 2 = Sair)\" if ($opcao -eq 1) { Write-Output \"Lista de produtos: ...\" } elseif ($opcao -eq 2) { Write-Output \"A sair...\" } else { Write-Output \"Op√ß√£o inv√°lida\" } . Se o utilizador escrever 1; Remove-Item *, o PowerShell pode interpretar como dois comandos separados (em certos contextos ou se o input for passado sem valida√ß√£o para outra fun√ß√£o). Tamb√©m aceita inputs como abc, dois, ou espa√ßos ‚Äî e o script responde com ‚ÄúOp√ß√£o inv√°lida‚Äù, mas o c√≥digo ainda processa a string, o que pode ser arriscado se usado noutra fun√ß√£o. Com sanitiza√ß√£o . $opcao = Read-Host \"Escolhe uma op√ß√£o (1 = Ver lista, 2 = Sair)\" if ($opcao -match '^[12]$') { if ($opcao -eq '1') { Write-Output \"Lista de produtos: ...\" } else { Write-Output \"A sair...\" } } else { Write-Output \"Op√ß√£o inv√°lida. Introduz apenas 1 ou 2.\" } . Aqui s√≥ s√£o aceites os valores 1 ou 2. Tudo o resto √© bloqueado √† partida. 5.7. üß© Exerc√≠cios sobre Input . Exerc√≠cio 1 ‚Äì Validar n√∫mero . | Pede um n√∫mero ao utilizador | Verifica se √© par ou √≠mpar | Se n√£o for um n√∫mero v√°lido, mostra erro | . Exerc√≠cio 2 ‚Äì Valida√ß√£o de data . | Pede ao utilizador uma data no formato ‚Äúdd/MM/yyyy‚Äù | Valida se o input √© uma data v√°lida usando [datetime] | Se for v√°lida, mostra a data no formato longo (ex: ‚Äúsegunda-feira, 20 de maio de 2024‚Äù) | Caso contr√°rio, mostra mensagem de erro | . Exerc√≠cio 3 ‚Äì Usar InputBox . | Mostra uma InputBox com a pergunta ‚ÄúQual o teu nome?‚Äù | Mostra uma sauda√ß√£o personalizada no terminal | . ",
    "url": "/Curso_Powershell/Modules/Module3/session1.html#5-recolha-de-inputs-do-utilizador",
    
    "relUrl": "/Modules/Module3/session1.html#5-recolha-de-inputs-do-utilizador"
  },"61": {
    "doc": "Session 1: Manipula√ß√£o de Ficheiros e Diret√≥rios",
    "title": "Session 1: Manipula√ß√£o de Ficheiros e Diret√≥rios",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module3/session1.html",
    
    "relUrl": "/Modules/Module3/session1.html"
  },"62": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "üß≠ Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "content": ". üéØ Objetivo . Explorar os comandos essenciais para trabalhar com PowerShell, aprender a navegar no sistema de ficheiros, interpretar a sa√≠da dos comandos e utilizar a ajuda integrada. | 1. üìñ Ajuda e Descoberta de Comandos . | 1.1. üß™ Exemplos | 1.2. üîç Como ler o output do Help | 1.3. üîé Comando para inspecionar objetos | 1.4. üß© Exerc√≠cios | . | 2. üîå Providers . | 2.1. üìÇ FileSystem | 2.2. üß¨ Registry | 2.3. üå± Environment | 2.4. üè∑Ô∏è Alias | 2.5. ‚úÖ Outros providers | . | 3. üìÅ Navega√ß√£o no Sistema de Ficheiros . | 3.1. üß™ Comandos √∫teis | 3.2. üåê Dicas | 3.3. üß© Exerc√≠cios | . | 4. üå± Vari√°veis de ambiente . | 4.1. üìã Consultar vari√°veis | 4.2. ‚úèÔ∏è Alterar ou definir vari√°veis (temporariamente) | 4.3. üßº Remover vari√°veis | 4.4. üß© Exerc√≠cios | 4.5. üîç Diferen√ßa entre $ e $Env: | . | 5. üè∑Ô∏è Alias . | 5.1. üîé Exemplos simples | 5.2. üß© Exerc√≠cios | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html",
    
    "relUrl": "/Modules/Module1/session2.html"
  },"63": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1. üìñ Ajuda e Descoberta de Comandos",
    "content": "Uma das grandes for√ßas do PowerShell √© a sua documenta√ß√£o integrada. Comandos como Get-Help e Get-Command permitem ao utilizador aprender diretamente a partir da consola. ‚ÑπÔ∏è Nota Importante: Se vires uma mensagem como: ‚ÄúCannot find the Help files for this cmdlet on this computer. It is displaying only partial help.‚Äù Significa que o PowerShell est√° a mostrar apenas uma vers√£o resumida. Podes: . | Tentar usar Update-Help para descarregar a vers√£o completa (se tiveres permiss√µes) | Usar Update-Help -UICulture en-US -ErrorAction SilentlyContinue para contornar restri√ß√µes de idioma ou permiss√µes | Usar o modo online: Get-Help Get-Process -Online | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#1--ajuda-e-descoberta-de-comandos",
    
    "relUrl": "/Modules/Module1/session2.html#1--ajuda-e-descoberta-de-comandos"
  },"64": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1.1. üß™ Exemplos",
    "content": "Get-Help Get-Process # Mostra a ajuda b√°sica Get-Help Get-Process -Examples # Mostra exemplos pr√°ticos Get-Help Get-Process -Online # Abre no browser Get-Command *service* # Procura comandos relacionados Get-Help Get-Service -Detailed # Mostra informa√ß√£o detalhada . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#11--exemplos",
    
    "relUrl": "/Modules/Module1/session2.html#11--exemplos"
  },"65": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1.2. üîç Como ler o output do Help",
    "content": "cls Get-Help Get-Service -Detailed . Este comando permite verificar: . | Name: nome do cmdlet | Synopsis: descri√ß√£o breve | Syntax: formas de utiliza√ß√£o | Description: descri√ß√£o detalhada | Parameters: explica√ß√£o de cada par√¢metro | Remarks: observa√ß√µes adicionais, como compatibilidade | . cls Get-Help Get-Service -Examples . Este comando premite verificar os exemplos de utiliza√ß√£o pr√°ticos. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#12--como-ler-o-output-do-help",
    
    "relUrl": "/Modules/Module1/session2.html#12--como-ler-o-output-do-help"
  },"66": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1.3. üîé Comando para inspecionar objetos",
    "content": "Get-Service | Get-Member . O Get-Member permite ver as propriedades (ex: Status, DisplayName) e m√©todos dos objetos devolvidos. Get-Service | Select-Object Status, DisplayName, ServiceType . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#13--comando-para-inspecionar-objetos",
    
    "relUrl": "/Modules/Module1/session2.html#13--comando-para-inspecionar-objetos"
  },"67": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1.4. üß© Exerc√≠cios",
    "content": "Neste exerc√≠cio vais aprender a usar a ajuda integrada no PowerShell para perceber como um comando funciona. Passos: . | Abre o PowerShell | Corre o seguinte comando para ver uma lista de todos os servi√ßos no sistema: Get-Service . Depois, experimenta filtrar por nome: . | Um servi√ßo espec√≠fico: Get-Service wuauserv . | Usando um wildcard (por exemplo, todos os que come√ßam por ‚Äúc‚Äù): Get-Service c* . | . | Escreve o seguinte comando para veres a ajuda b√°sica: Get-Help Get-Service | V√™ os exemplos com: Get-Help Get-Service -Examples | Tenta abrir a ajuda online (se poss√≠vel): Get-Help Get-Service -Online | Usa o Get-Member para descobrir que propriedades existem em objetos de servi√ßo. Depois usa Select-Object para escolher apenas as propriedades que permitam ver o Status, Nome do utilizador e tipo de servi√ßo. Exemplo de solu√ß√£o Get-Service | Get-Member Get-Service | Select-Object Status, UserName, ServiceType . | Cria um comando que obtenha os detalhes de um ou mais processos que costumas usar, como chrome, notepad, ou outro processo que esteja a correr no teu sistema. Queremos listar os seguintes detalhes: . | Nome do processo | ID (PID - {completa}) | Utiliza√ß√£o de CPU (CPU - mostra o tempo total de CPU utilizado (em segundos).) | Mem√≥ria utilizada (Working Set - mostra a mem√≥ria f√≠sica (em bytes) usada pelo processo.) | Tempo de execu√ß√£o (StartTime - {completa}) | Estado (Responding - indica se a aplica√ß√£o est√° a responder (True ou False)) | . Exemplo de solu√ß√£o Get-Process chrome | Select-Object Name, Id, CPU, WorkingSet, StartTime, Responding . | . üí° Dica: Experimenta com diferentes nomes de processos (ex: notepad, powershell, explorer) e compara os valores. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#14--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module1/session2.html#14--exerc√≠cios"
  },"68": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2. üîå Providers",
    "content": "No PowerShell, providers s√£o interfaces que permitem aceder, navegar e manipular diferentes tipos de armazenamento (como o sistema de ficheiros, o registo do Windows ou vari√°veis de ambiente) usando comandos comuns como Get-ChildItem ou Set-Location, tal como farias com pastas e ficheiros. Ou seja, mesmo que estejas a trabalhar com algo que n√£o √© um disco (como vari√°veis ou chaves de registo), podes usar os mesmos comandos de navega√ß√£o como se estivesses a explorar um sistema de pastas. Podes ver todos os providers dispon√≠veis no teu sistema com o seguinte comando: . Get-PSProvider . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#2--providers",
    
    "relUrl": "/Modules/Module1/session2.html#2--providers"
  },"69": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.1. üìÇ FileSystem",
    "content": "Permite interagir com pastas e ficheiros no disco, tal como estamos habituados. Este √© o provider usado por omiss√£o quando abrimos o PowerShell. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#21--filesystem",
    
    "relUrl": "/Modules/Module1/session2.html#21--filesystem"
  },"70": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.2. üß¨ Registry",
    "content": "Permite navegar no registo do Windows como se fosse uma estrutura de pastas. Tem dois ‚Äúdrives‚Äù: HKLM: (Local Machine) e HKCU: (Current User). Exemplos: . Set-Location HKCU:\\Software Get-ChildItem HKLM:\\SYSTEM . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#22--registry",
    
    "relUrl": "/Modules/Module1/session2.html#22--registry"
  },"71": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.3. üå± Environment",
    "content": "Permite aceder e modificar vari√°veis de ambiente (como PATH, TEMP, USERNAME, etc). Exemplos: . Get-ChildItem Env: $Env:USERNAME $Env:TEMP . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#23--environment",
    
    "relUrl": "/Modules/Module1/session2.html#23--environment"
  },"72": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.4. üè∑Ô∏è Alias",
    "content": "Permite listar e criar atalhos (aliases) para comandos do PowerShell. Exemplos: . Get-ChildItem Alias: Get-Alias ls New-Alias listar Get-ChildItem . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#24-%EF%B8%8F-alias",
    
    "relUrl": "/Modules/Module1/session2.html#24-Ô∏è-alias"
  },"73": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2.5. ‚úÖ Outros providers",
    "content": "Consoante o sistema ou m√≥dulos carregados, podem existir outros providers dispon√≠veis. Por exemplo: . | Function: ‚Äì acede √†s fun√ß√µes definidas no PowerShell. | Variable: ‚Äì acede √†s vari√°veis em mem√≥ria. | . Para mais detalhes sobre providers no PowerShell, consulta a documenta√ß√£o oficial: üîó about_Providers - PowerShell Documentation . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#25--outros-providers",
    
    "relUrl": "/Modules/Module1/session2.html#25--outros-providers"
  },"74": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3. üìÅ Navega√ß√£o no Sistema de Ficheiros",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#3--navega%C3%A7%C3%A3o-no-sistema-de-ficheiros",
    
    "relUrl": "/Modules/Module1/session2.html#3--navega√ß√£o-no-sistema-de-ficheiros"
  },"75": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3.1. üß™ Comandos √∫teis",
    "content": "Get-Location # Mostra a localiza√ß√£o atual (pwd) Set-Location .. # Sobe um n√≠vel (cd ..) Get-ChildItem # Lista ficheiros e pastas (ls) Clear-Host # Limpa o terminal (cls) Push-Location # Guarda a localiza√ß√£o atual Pop-Location # Volta √† localiza√ß√£o guardada . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#31--comandos-%C3%BAteis",
    
    "relUrl": "/Modules/Module1/session2.html#31--comandos-√∫teis"
  },"76": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3.2. üåê Dicas",
    "content": ". | -Force mostra ficheiros ocultos. | Caminhos relativos (ex: ..\\Documentos) mudam com a localiza√ß√£o atual. | Caminhos absolutos (ex: C:\\Users\\Nome\\Documentos) s√£o sempre os mesmos. | Usa ~ para ir para a tua pasta pessoal. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#32--dicas",
    
    "relUrl": "/Modules/Module1/session2.html#32--dicas"
  },"77": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3.3. üß© Exerc√≠cios",
    "content": "Nota: Usa sempre os cmdlets do PowerShell como Set-Location ou Get-ChildItem em vez dos comandos do bash como cd ou ls. Neste exerc√≠cio vais praticar os comandos de navega√ß√£o no sistema de ficheiros no PowerShell. Passos: . | Abre o PowerShell. | Vai para a tua pasta pessoal: C√≥digo Set-Location ~ . | Corre o seguinte comando para criar a estrutura de pastas: . New-Item -Path \"~\\CursoPS\\Modulo1\\Exemplos\" -ItemType Directory -Force . | Verifica a estrutura final de pastas executando o seguinte: Set-Location ~ Get-ChildItem -Recurse \"CursoPS\" . Estrutura esperada: . CursoPS ‚îÇ ‚îî‚îÄ‚îÄ Modulo1 ‚îÇ ‚îî‚îÄ‚îÄ Exemplos . | Navega at√© √† pasta CursoPS: C√≥digo Set-Location \"~\\CursoPS\" . | Navega at√© √† pasta Modulo1 usando caminho relativo: C√≥digo Set-Location .\\Modulo1 . | Agora navega at√© √† pasta Exemplos usando: . | Caminho relativo: C√≥digo Set-Location .\\Exemplos . | Caminho absoluto: C√≥digo Set-Location \"~\\CursoPS\\Modulo1\\Exemplos\" . | . | Testa a navega√ß√£o com Push-Location e Pop-Location: . | Guarda a localiza√ß√£o atual, vai para outro local, e volta: Push-Location Set-Location ~ Pop-Location . | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#33--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module1/session2.html#33--exerc√≠cios"
  },"78": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4. üå± Vari√°veis de ambiente",
    "content": "O provider Environment permite aceder e manipular vari√°veis de ambiente do sistema operativo diretamente no PowerShell. Estas vari√°veis s√£o usadas por aplica√ß√µes e scripts para obter informa√ß√µes como o nome do utilizador, a pasta tempor√°ria, o caminho de instala√ß√£o, entre outras. Os restantes tipos de vari√°veis s√£o vistos na sess√£o 3 . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#4--vari%C3%A1veis-de-ambiente",
    
    "relUrl": "/Modules/Module1/session2.html#4--vari√°veis-de-ambiente"
  },"79": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.1. üìã Consultar vari√°veis",
    "content": "Podes ver todas as vari√°veis de ambiente com: . Get-ChildItem Env: . Para consultar uma vari√°vel espec√≠fica: . $Env:USERNAME $Env:PATH $Env:TEMP . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#41--consultar-vari%C3%A1veis",
    
    "relUrl": "/Modules/Module1/session2.html#41--consultar-vari√°veis"
  },"80": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.2. ‚úèÔ∏è Alterar ou definir vari√°veis (temporariamente)",
    "content": "Podes criar ou alterar vari√°veis diretamente: . $Env:NOVAVARIAVEL = \"Valor de teste\" $Env:PATH += \";C:\\Ferramentas\" . ‚ö†Ô∏è Estas altera√ß√µes s√≥ duram enquanto a sess√£o do PowerShell estiver ativa. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#42-%EF%B8%8F-alterar-ou-definir-vari%C3%A1veis-temporariamente",
    
    "relUrl": "/Modules/Module1/session2.html#42-Ô∏è-alterar-ou-definir-vari√°veis-temporariamente"
  },"81": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.3. üßº Remover vari√°veis",
    "content": "Podes remover uma vari√°vel da sess√£o com: . Remove-Item Env:NOVAVARIAVEL . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#43--remover-vari%C3%A1veis",
    
    "relUrl": "/Modules/Module1/session2.html#43--remover-vari√°veis"
  },"82": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.4. üß© Exerc√≠cios",
    "content": "Vamos experimentar criar e aceder a vari√°veis de ambiente. | Cria uma nova vari√°vel chamada ‚ÄúCURSO‚Äù e com o valor ‚ÄúPowerShell &amp; Shell Scripting‚Äù C√≥digo $Env:CURSO = \"PowerShell &amp; Shell Scripting\" . | Verifica o valor: C√≥digo $Env:CURSO . | Acede √† vari√°vel usando letras min√∫sculas: $Env:curso . O que observas? . Explica√ß√£o No PowerShell, as vari√°veis de ambiente n√£o s√£o sens√≠veis a mai√∫sculas ou min√∫sculas. Ou seja, $Env:CURSO, $Env:curso e $Env:Curso referem-se exatamente √† mesma vari√°vel. Isto acontece porque o provider Environment est√° ligado ao sistema operativo Windows, que tamb√©m n√£o distingue entre mai√∫sculas e min√∫sculas neste contexto. | Remove a vari√°vel: Remove-Item Env:CURSO . | Refaz os exerc√≠cios do ponto 3 (navegar no sistema de ficheiros), mas em vez de usares ~ para aceder √† tua pasta pessoal, usa a vari√°vel de ambiente $Env:USERPROFILE. | Vai para a tua pasta pessoal: Set-Location $Env:USERPROFILE . | Se necess√°rio cria novamente a estrutura de pastas: New-Item -Path \"$Env:USERPROFILE\\CursoPS\\Modulo1\\Exemplos\" -ItemType Directory -Force . | Explora a estrutura usando comandos de navega√ß√£o como Set-Location, Get-Location e Push-Location. | . | . üí° Dica: Podes confirmar que $Env:USERPROFILE e ~ apontam para o mesmo local com: . \"$Env:USERPROFILE\" Resolve-Path ~ . ‚ÑπÔ∏è Nota Importante: As vari√°veis definidas ou alteradas com $Env: s√≥ afetam a sess√£o atual do PowerShell. Se quiseres definir vari√°veis de ambiente de forma permanente (por exemplo, para todas as sess√µes), precisas de usar ferramentas do sistema operativo ou editar as defini√ß√µes no Painel de Controlo (Windows) ou via registo (Registry). Podes combinar este provider com outros comandos para criar scripts mais din√¢micos e adapt√°veis ao ambiente onde est√£o a correr. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#44--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module1/session2.html#44--exerc√≠cios"
  },"83": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4.5. üîç Diferen√ßa entre $ e $Env:",
    "content": "Quando usas apenas o s√≠mbolo $, est√°s a trabalhar com vari√°veis normais do PowerShell, que existem apenas na sess√£o atual e s√£o controladas pelo pr√≥prio PowerShell. Quando usas $Env:, est√°s a aceder a vari√°veis de ambiente do sistema operativo, atrav√©s do provider Environment. Compara√ß√£o: . | Exemplo | Tipo de vari√°vel | Persist√™ncia | Acess√≠vel fora do PowerShell? | . | $nome = \"Joana\" | Vari√°vel do PowerShell | Sess√£o atual | ‚ùå N√£o | . | $Env:NOME = \"Joana\" | Vari√°vel de ambiente | Sess√£o atual (ou permanente, se configurada no SO) | ‚úÖ Sim (herdada por apps lan√ßadas a partir desta sess√£o) | . üîç Verifica√ß√£o pr√°tica: Para comprovar a diferen√ßa entre vari√°veis normais e vari√°veis de ambiente fora do PowerShell: Cria as duas vari√°veis no PowerShell: . $normal = \"sou normal\" $Env:AMBIENTE = \"sou ambiente\" . Abre uma nova sess√£o do CMD a partir do PowerShell: . cmd /d /k echo %normal% . cmd /d /k echo %AMBIENTE% . | /d ‚Äì Desativa a execu√ß√£o autom√°tica de comandos definidos na vari√°vel de ambiente AutoRun. √ötil para garantir que o CMD come√ßa com um ambiente ‚Äúlimpo‚Äù, sem comandos autom√°ticos. | /k ‚Äì Executa o comando indicado e mant√©m a janela do CMD aberta depois. Se usasses /c em vez de /k, o CMD fechar-se-ia logo ap√≥s o echo. | . Observa o resultado: . %normal% sou ambiente . ‚úÖ Explica√ß√£o: . %normal% aparece como texto literal porque $normal √© uma vari√°vel interna do PowerShell ‚Äî n√£o √© herdada por outras aplica√ß√µes ou shells. %AMBIENTE% mostra o valor correto porque $Env:AMBIENTE √© uma vari√°vel de ambiente, e essas s√£o automaticamente vis√≠veis por processos filhos como o CMD. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#45--diferen%C3%A7a-entre--e-env",
    
    "relUrl": "/Modules/Module1/session2.html#45--diferen√ßa-entre--e-env"
  },"84": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "5. üè∑Ô∏è Alias",
    "content": "No PowerShell, um alias √© um nome alternativo (geralmente mais curto) para um comando. Isto permite escrever comandos de forma mais r√°pida ou usar nomes familiares (por exemplo, do Bash). Exemplo: ls √© um alias para Get-ChildItem. Podes ver todos os aliases dispon√≠veis com: . Get-Alias . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#5-%EF%B8%8F-alias",
    
    "relUrl": "/Modules/Module1/session2.html#5-Ô∏è-alias"
  },"85": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "5.1. üîé Exemplos simples",
    "content": "Verifica o comando por tr√°s de um alias: . Get-Alias ls . Podes ver todos os aliases que apontam para Get-ChildItem com: . Get-Alias | Where-Object {$_.Definition -eq 'Get-ChildItem'} . Resultado ser√° algo como: . | dir | gci | ls | . Cria um alias personalizado: . New-Alias listar Get-ChildItem . Usa o alias que criaste: . listar . Remove o alias: . Remove-Item Alias:listar . ‚ö†Ô∏è Aliases personalizados s√≥ duram durante a sess√£o atual. Mais √† frente veremos como personalizar o profile do utilizador e criar aliases persistentes. üîó Documenta√ß√£o oficial about_Aliases - PowerShell Documentation . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#51--exemplos-simples",
    
    "relUrl": "/Modules/Module1/session2.html#51--exemplos-simples"
  },"86": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "5.2. üß© Exerc√≠cios",
    "content": ". | Descobre que comando est√° por tr√°s dos seguintes aliases: . | ls | pwd | cls | . | Cria um alias chamado meuservicos para o comando Get-Service. | . Resposta New-Alias meuservicos Get-Service . | Corre o alias meuservicos e confirma que funciona. meuservicos . | Remove o alias meuservicos. | . Resposta Remove-Item Alias:meuservicos . | Cria um alias chamado procativos para o comando Get-Process. | . Resposta New-Alias procativos Get-Process procativos . üí° Dica: Como os aliases n√£o aceitam argumentos ou pipelines, devem ser usados apenas para comandos simples. Para comandos mais complexos, como Get-Service | Select-Object ‚Ä¶, considera criar uma fun√ß√£o. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#52--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module1/session2.html#52--exerc√≠cios"
  },"87": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html",
    
    "relUrl": "/Modules/Module1/session2.html"
  },"88": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "üß≠ Sess√£o 2: Vari√°veis e Tipos de Dados",
    "content": ". üéØ Objetivo Compreender o que s√£o vari√°veis, como funcionam os tipos de dados em PowerShell e como utiliz√°-los corretamente em scripts. | 1. Vari√°veis e Tipos de Dados . | 1.1. O que √© uma vari√°vel? | 1.2. Tipagem expl√≠cita | 1.3. üß© Exercicio ‚Äì Corrigir script com erros | 1.4. Scope de vari√°veis | 1.5. Vari√°veis autom√°ticas | 1.6. Vari√°veis preferenciais | 1.7. Vari√°veis com nomes especiais | 1.8. Dicas pr√°ticas | 1.9. Verificar o tipo de uma vari√°vel | 1.10. Interpola√ß√£o e formata√ß√£o de strings | 1.11. üß© Exercicio ‚Äì Identificar tipos de dados | . | 2. Tipos de dados em PowerShell . | 2.1. Tipos primitivos | 2.2. Tipos compostos | 2.3. üß© Exercicios | 2.4. Lista de tipos | 2.5. Operadores b√°sicos | 2.6. üß© Exerc√≠cios | 2.7. Boas pr√°ticas com vari√°veis | 2.8. Recursos adicionais | 2.9. Extras √∫teis com estruturas compostas | . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html",
    
    "relUrl": "/Modules/Module2/session2.html"
  },"89": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1. Vari√°veis e Tipos de Dados",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#1-vari%C3%A1veis-e-tipos-de-dados",
    
    "relUrl": "/Modules/Module2/session2.html#1-vari√°veis-e-tipos-de-dados"
  },"90": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.1. O que √© uma vari√°vel?",
    "content": "Uma vari√°vel √© um espa√ßo de mem√≥ria que guarda um valor. Em PowerShell, todas as vari√°veis come√ßam com o s√≠mbolo $. Podes us√°-las para guardar texto, n√∫meros, listas, objetos, entre outros. Sintaxe base . Em PowerShell, podes declarar uma vari√°vel atribuindo-lhe um valor diretamente: . $nome = \"Nuno\" $idade = 30 $ativo = $true . | O PowerShell determina automaticamente o tipo com base no valor atribu√≠do ‚Äî isto chama-se tipagem din√¢mica. | O nome da vari√°vel n√£o √© case sensitive, ou seja, $var, $VAR e $Var s√£o tratados como a mesma vari√°vel. | O nome deve come√ßar com uma letra ou underscore (_), n√£o com n√∫mero | Pode conter letras, n√∫meros e underscores | N√£o pode conter espa√ßos nem s√≠mbolos especiais | Para valores booleanos, usa-se $true e $false, que s√£o constantes internas (n√£o s√£o vari√°veis) | . Exemplos . $cidade = \"Lisboa\" $ano = 2025 $pi = 3.14 $temAcesso = $false Write-Output \"Cidade: $cidade\" Write-Output \"Ano atual: $ano\" . Boas pr√°ticas de nomea√ß√£o . | Usa nomes descritivos: $nomeCliente, $totalFinal | Evita siglas confusas: $nc, $t | N√£o uses espa√ßos nem acentos | Podes usar CamelCase ou snake_case, mas mant√©m a consist√™ncia | . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#11-o-que-%C3%A9-uma-vari%C3%A1vel",
    
    "relUrl": "/Modules/Module2/session2.html#11-o-que-√©-uma-vari√°vel"
  },"91": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.2. Tipagem expl√≠cita",
    "content": "Tamb√©m √© poss√≠vel definir o tipo da vari√°vel manualmente usando [Tipo] antes do nome. [string]$nome = \"Nuno\" [int]$idade = 30 [bool]$ativo = $true . Isto impede que o valor da vari√°vel seja substitu√≠do por algo incompat√≠vel sem erro. [int]$idade = \"trinta\" # Erro de convers√£o . Diferen√ßa entre tipagem din√¢mica e expl√≠cita . | ¬† | Tipagem din√¢mica | Tipagem expl√≠cita | . | Sintaxe | $x = \"texto\" | [string]$x = \"texto\" | . | Flexibilidade | Alta | Restrita ao tipo definido | . | Convers√£o | Impl√≠cita | Pode falhar se n√£o for compat√≠vel | . | Quando usar | Scripts simples, testes | Scripts em produ√ß√£o, valida√ß√£o, fun√ß√µes | . Dica: usa tipagem expl√≠cita quando queres garantir que os dados t√™m o tipo certo, especialmente ao passar valores para fun√ß√µes ou APIs. ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#12-tipagem-expl%C3%ADcita",
    
    "relUrl": "/Modules/Module2/session2.html#12-tipagem-expl√≠cita"
  },"92": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.3. üß© Exercicio ‚Äì Corrigir script com erros",
    "content": "Corrige os erros no script seguinte: . $idade = \"trinta\" Write-Output \"Idade: \" + $idade $idade += 1 . Perguntas: . | O que est√° errado? | Como corrigir? | . Resposta [int]$idade = 30 Write-Output \"Idade: $idade\" $idade += 1 Write-Output \"Nova idade: $idade\" . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#13--exercicio--corrigir-script-com-erros",
    
    "relUrl": "/Modules/Module2/session2.html#13--exercicio--corrigir-script-com-erros"
  },"93": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.4. Scope de vari√°veis",
    "content": "O scope define onde a vari√°vel est√° acess√≠vel. | Scope | Descri√ß√£o | Quando usar | . | Local | V√°lido apenas no bloco atual (fun√ß√£o, script, etc.) | Quase sempre ‚Äî √© o padr√£o, mant√©m o c√≥digo modular | . | Global | Dispon√≠vel em toda a sess√£o PowerShell | Com cuidado ‚Äî apenas se precisares de partilhar dados entre scripts/sess√µes | . | Script | Vis√≠vel em todo o ficheiro .ps1 | √ötil em scripts com v√°rias fun√ß√µes que partilham dados | . | Private | Apenas acess√≠vel dentro do bloco onde foi criada | Quando queres garantir isolamento total da vari√°vel | . Exemplo: . $Local:minhaVar = \"Apenas aqui\" $Global:minhaVar = \"Em toda a sess√£o\" $Script:minhaVar = \"Vis√≠vel no script\" $Private:minhaVar = \"S√≥ neste bloco\" . ‚ö†Ô∏è Quando n√£o usas nenhum prefixo, o PowerShell assume o escopo mais local poss√≠vel automaticamente (normalmente Local). ‚ö†Ô∏è Evita criar vari√°veis globais a menos que seja mesmo necess√°rio. Elas persistem na sess√£o e podem causar bugs dif√≠ceis de detetar se forem reutilizadas acidentalmente noutros scripts. ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#14-scope-de-vari%C3%A1veis",
    
    "relUrl": "/Modules/Module2/session2.html#14-scope-de-vari√°veis"
  },"94": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.5. Vari√°veis autom√°ticas",
    "content": "O PowerShell define v√°rias vari√°veis que est√£o sempre dispon√≠veis. Algumas das mais √∫teis: . | Vari√°vel | Descri√ß√£o | . | $null | Representa ‚Äúsem valor‚Äù | . | $true / $false | Booleanos l√≥gicos | . | $args | Argumentos passados a scripts ou fun√ß√µes | . | $PSVersionTable | Informa√ß√µes sobre a vers√£o do PowerShell | . Mais informa√ß√£o: üîó about_Automatic_Variables ‚Äî Documenta√ß√£o Oficial . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#15-vari%C3%A1veis-autom%C3%A1ticas",
    
    "relUrl": "/Modules/Module2/session2.html#15-vari√°veis-autom√°ticas"
  },"95": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.6. Vari√°veis preferenciais",
    "content": "As vari√°veis preferenciais controlam o comportamento global da sess√£o PowerShell, como o que fazer perante erros, avisos, mensagens verbose ou debug. | Vari√°vel | Controla o qu√™? | Valores comuns | . | $ErrorActionPreference | O que fazer quando ocorre um erro | \"Continue\", \"Stop\" | . | $VerbosePreference | Se mensagens Write-Verbose s√£o mostradas ou n√£o | \"SilentlyContinue\", \"Continue\" | . | $WarningPreference | Exibi√ß√£o de avisos (Write-Warning) | \"Continue\", \"SilentlyContinue\" | . | $DebugPreference | Exibi√ß√£o de mensagens Write-Debug | \"SilentlyContinue\", \"Continue\" | . Mais informa√ß√£o: üîó about_Preference_Variables ‚Äî Documenta√ß√£o Oficial . Exemplo com $ErrorActionPreference . Vamos ver como esta vari√°vel influencia a execu√ß√£o de scripts com erros. Passo 1 ‚Äì Criar um script simples . | Cria um ficheiro chamado TestError.ps1 com este conte√∫do: . Write-Output \"In√≠cio do script\" Get-Item \"ficheiro_inexistente.txt\" Write-Output \"Fim do script\" . | Corre o script: .\\TestError.ps1 . | . O que acontece? . | Vais ver uma mensagem de erro, mas o script continua a correr. | A linha \"Fim do script\" √© executada. | Isto acontece porque o erro √© do tipo non-terminating e a prefer√™ncia por omiss√£o √© \"Continue\". | . Passo 2 ‚Äì Modificar para interromper com erro . | Edita o ficheiro TestError.ps1 e adiciona a linha seguinte antes do Get-Item: . $ErrorActionPreference = \"Stop\" . | O novo conte√∫do deve ficar assim: . $ErrorActionPreference = \"Stop\" Write-Output \"In√≠cio do script\" Get-Item \"ficheiro_inexistente.txt\" Write-Output \"Fim do script\" . | Corre novamente: .\\TestError.ps1 . | . O que acontece agora? . | O erro do Get-Item faz com que o script pare imediatamente. | A linha \"Fim do script\" n√£o √© executada. | . Explica√ß√£o . | Com $ErrorActionPreference = \"Continue\" (ou omisso): erros n√£o param o script. | Com $ErrorActionPreference = \"Stop\": qualquer erro interrompe imediatamente a execu√ß√£o. | Isto √© √∫til quando n√£o queres que o script continue ap√≥s falhas cr√≠ticas. | . A altera√ß√£o √© permanente? . Quando alteras uma vari√°vel de prefer√™ncia (como $ErrorActionPreference), o novo valor s√≥ √© v√°lido durante a sess√£o atual. | No terminal: o valor permanece at√© fechares a janela do PowerShell. | Num script: o valor afeta apenas a execu√ß√£o do pr√≥prio script. | . Se voltares a abrir uma nova sess√£o, o valor volta ao padr√£o. ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#16-vari%C3%A1veis-preferenciais",
    
    "relUrl": "/Modules/Module2/session2.html#16-vari√°veis-preferenciais"
  },"96": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.7. Vari√°veis com nomes especiais",
    "content": "Vari√°veis podem conter quase qualquer nome, se forem colocadas entre {}: . ${Nome com espa√ßos} = \"Valor\" Write-Output ${Nome com espa√ßos} . ‚ö†Ô∏è Esta pr√°tica deve ser evitada, exceto em casos muito espec√≠ficos. ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#17-vari%C3%A1veis-com-nomes-especiais",
    
    "relUrl": "/Modules/Module2/session2.html#17-vari√°veis-com-nomes-especiais"
  },"97": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.8. Dicas pr√°ticas",
    "content": ". | Inicializa sempre vari√°veis antes de as usares | Usa nomes descritivos: $caminhoRelatorio, $totalFinal | Evita sobrescrever vari√°veis autom√°ticas (ex: $args ou $null) | . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#18-dicas-pr%C3%A1ticas",
    
    "relUrl": "/Modules/Module2/session2.html#18-dicas-pr√°ticas"
  },"98": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.9. Verificar o tipo de uma vari√°vel",
    "content": "Podes verificar o tipo de uma vari√°vel de duas formas principais: . Usar .GetType().Name . $var = 42 $var.GetType().Name # Int32 . Usar o operador -is . $var -is [int] # True $var -is [string] # False --- . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#19-verificar-o-tipo-de-uma-vari%C3%A1vel",
    
    "relUrl": "/Modules/Module2/session2.html#19-verificar-o-tipo-de-uma-vari√°vel"
  },"99": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.10. Interpola√ß√£o e formata√ß√£o de strings",
    "content": "Em PowerShell, podes facilmente incluir vari√°veis dentro de strings, usando interpola√ß√£o. Incluir vari√°veis diretamente . Se usares aspas duplas \", podes escrever o nome da vari√°vel dentro do texto: . $nome = \"Nuno\" Write-Output \"Ol√°, $nome!\" # Ol√°, Nuno! . ‚ö° Aten√ß√£o: funciona apenas com aspas duplas \"...\", n√£o com aspas simples '...'. Concatena√ß√£o de strings . Podes juntar texto usando o operador + ou interpola√ß√£o com aspas. $nome = \"Nuno\" Write-Output \"Ol√°, \" + $nome + \"!\" # concatena√ß√£o Write-Output \"Ol√°, $nome!\" # interpola√ß√£o . Incluir express√µes com $() . Se quiseres usar express√µes dentro da string (como chamadas a m√©todos ou opera√ß√µes), deves colocar a express√£o dentro de $(): . $valores = 5, 10, 15, 20 Write-Output \"N.¬∫ de elementos: $($valores.Count)\" . Sem $(), o PowerShell tentaria apenas encontrar uma vari√°vel chamada $valores.Count, o que daria erro. Outro exemplo: . $preco = 10 $quantidade = 3 Write-Output \"Total: $($preco * $quantidade)‚Ç¨\" # Total: 30‚Ç¨ . Compara√ß√£o entre m√©todos . | M√©todo | Exemplo | Coment√°rio | . | Vari√°vel direta | ‚ÄúNome: $nome‚Äù | Simples e r√°pido | . | Express√£o com $() | ‚ÄúTotal: $($preco * $quantidade)‚Äù | Para c√°lculos e m√©todos | . Dicas pr√°ticas . | Usa $() sempre que precisares de fazer c√°lculos ou aceder a propriedades/m√©todos. | Para texto simples, podes escrever apenas $variavel. | Se tiveres d√∫vidas, usa sempre $() ‚Äî √© mais seguro. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#110-interpola%C3%A7%C3%A3o-e-formata%C3%A7%C3%A3o-de-strings",
    
    "relUrl": "/Modules/Module2/session2.html#110-interpola√ß√£o-e-formata√ß√£o-de-strings"
  },"100": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "1.11. üß© Exercicio ‚Äì Identificar tipos de dados",
    "content": "Verifica os tipos de diferentes vari√°veis. | Cria tr√™s vari√°veis: . | $a = 42 | $b = \"Ol√°\" | $c = $true | . | Mostra o tipo de cada vari√°vel com .GetType().Name | Usa o operador -is para confirmar o tipo | . Resposta $a = 42 $b = \"Ol√°\" $c = $true $a.GetType().Name # Int32 $b.GetType().Name # String $c.GetType().Name # Boolean $a -is [int] # True $b -is [string] # True $c -is [bool] # True . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#111--exercicio--identificar-tipos-de-dados",
    
    "relUrl": "/Modules/Module2/session2.html#111--exercicio--identificar-tipos-de-dados"
  },"101": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2. Tipos de dados em PowerShell",
    "content": "Em PowerShell, cada valor tem um tipo de dado associado: texto, n√∫mero, booleano, lista, dicion√°rio, etc. https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-04 . Porque √© importante conhecer os tipos? . | Alguns comandos esperam tipos espec√≠ficos | Ajuda a prever resultados e evitar erros | Permite usar m√©todos e propriedades corretamente | . Categorias principais . | Primitivos ‚Äì valores simples como texto, n√∫meros e booleanos | Compostos ‚Äì estruturas com m√∫ltiplos valores (arrays, hashtables) | Objetos ‚Äì estruturas complexas devolvidas por comandos (Get-Process, etc.) | . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#2-tipos-de-dados-em-powershell",
    
    "relUrl": "/Modules/Module2/session2.html#2-tipos-de-dados-em-powershell"
  },"102": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.1. Tipos primitivos",
    "content": "String . Texto entre aspas: . $nome = \"Nuno\" $mensagem = \"Ol√°, $nome!\" . Integer . N√∫mero inteiro (Int32 por padr√£o): . $ano = 2025 $quantidade = 10 . Boolean . Valores l√≥gicos: . $ativo = $true $temAcesso = $false . Double . N√∫meros com v√≠rgula/ponto decimal: . $pi = 3.14 $temp = -2.7 . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#21-tipos-primitivos",
    
    "relUrl": "/Modules/Module2/session2.html#21-tipos-primitivos"
  },"103": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.2. Tipos compostos",
    "content": "Arrays . Um array guarda uma lista de valores, acedidos por posi√ß√£o (√≠ndice). $nomes = @(\"Ana\", \"Bruno\", \"Carlos\") $numeros = 1, 2, 3, 4 . Aceder a elementos: . $nomes[0] # Ana $numeros[2] # 3 . Adicionar um elemento: . $nomes += \"Diana\" . ‚ö†Ô∏è O operador += cria um novo array. Para muitos elementos, usa ArrayList. Ver n√∫mero de elementos: . $nomes.Count . Nota: @() √© a forma expl√≠cita de criar arrays, mesmo com 1 elemento. $umElemento = @(\"Ana\") # Array com 1 item $vazio = @() # Array vazio . Arrays din√¢micos: ArrayList . Mais eficiente para adicionar valores dinamicamente: . $lista = New-Object System.Collections.ArrayList $lista.Add(\"Ana\") $lista.Add(\"Bruno\") . Ver conte√∫do e n√∫mero de elementos: . $lista $lista.Count . Remover elementos de um ArrayList . $lista.Remove(\"Ana\")` # remove a primeira ocorr√™ncia de 'Ana' $lista.RemoveAt(0)` # remove o valor que est√° na posi√ß√£o . Adicionar v√°rios elementos ao mesmo tempo . $lista.AddRange(@(\"Carlos\",\"David\",\"Elsa\")) . | ¬† | Array | ArrayList | . | Tamanho fixo | Sim (cria nova c√≥pia) | N√£o (cresce com .Add()) | . | Ideal para | Listas simples e pequenas | Adi√ß√µes frequentes ou din√¢micas | . Hashtables . Uma hashtable √© uma cole√ß√£o de pares chave/valor, semelhante a um dicion√°rio em Python. $aluno = @{ Nome = \"Joana\" Idade = 27 Ativo = $true } . Aceder a valores: . $aluno[\"Nome\"] # Joana $aluno.Idade # 27 . Adicionar novo par: . $aluno[\"Curso\"] = \"PowerShell\" . Listar chaves e valores: . $aluno.Keys $aluno.Values . Hashtables ordenadas com [ordered] . Por padr√£o, as hashtables n√£o mant√™m a ordem dos elementos. Se quiseres garantir ordem: . $aluno = [ordered]@{ Nome = \"Joana\" Idade = 27 Ativo = $true } . Dica: Usa hashtables para representar objetos simples ou configurar par√¢metros. Mais informa√ß√£o oficial: üîó PowerShell Language Specification ‚Äì Chapter 4 . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#22-tipos-compostos",
    
    "relUrl": "/Modules/Module2/session2.html#22-tipos-compostos"
  },"104": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.3. üß© Exercicios",
    "content": "üß© Exerc√≠cio - Trabalhar com arrays de n√∫meros . Cria um array com n√∫meros e manipula-o. | Cria um array $valores com os n√∫meros 5, 10, 15, 20 | Mostra quantos elementos tem o array | Soma o primeiro e o √∫ltimo valor | Substitui o valor 15 por 30 | Mostra o array atualizado | . Resposta $valores = 5, 10, 15, 20 Write-Output \"N.¬∫ de elementos: $($valores.Count)\" Write-Output \"Soma: $($valores[0] + $valores[-1])\" $valores[2] = 30 Write-Output \"Array atualizado:\" $valores . üß© Exerc√≠cio ‚Äì Aceder e modificar valores num Array cl√°ssico . Imagina que est√°s a guardar os nomes dos participantes de um workshop. | Cria um array $participantes com os nomes: \"Ana\", \"Bruno\", \"Carlos\", \"Diana\", \"Eduardo\" | Mostra o nome que est√° na 4.¬™ posi√ß√£o (√≠ndice 3) | Carlos avisou que n√£o vai poder participar ‚Äî substitui \"Carlos\" por \"Catarina\" | Mostra o array atualizado | . Resposta # Criar array $participantes = @(\"Ana\", \"Bruno\", \"Carlos\", \"Diana\", \"Eduardo\") # Mostrar o valor da 4¬™ posi√ß√£o (√≠ndice 3) Write-Output \"Participante na 4¬™ posi√ß√£o: $($participantes[3])\" # Alterar \"Carlos\" (√≠ndice 2) para \"Catarina\" $participantes[2] = \"Catarina\" # Mostrar array atualizado Write-Output \"Lista atualizada:\" $participantes . üß© Exerc√≠cio ‚Äì Aceder e modificar valores num ArrayList . Est√°s a gerir uma lista din√¢mica de tarefas. | Cria um ArrayList chamado $tarefas | Adiciona as seguintes tarefas: \"Enviar email\", \"Rever relat√≥rio\", \"Atualizar base de dados\" | Mostra a tarefa que est√° na 1.¬™ posi√ß√£o | A tarefa \"Rever relat√≥rio\" j√° n√£o √© necess√°ria ‚Äî remove-a | Adiciona a tarefa \"Ligar ao cliente\" | Mostra a lista final | . Resposta # Criar ArrayList $tarefas = New-Object System.Collections.ArrayList $tarefas.Add(\"Enviar email\") &gt; $null $tarefas.Add(\"Rever relat√≥rio\") &gt; $null $tarefas.Add(\"Atualizar base de dados\") &gt; $null # Mostrar 1¬™ tarefa (√≠ndice 0) Write-Output \"Primeira tarefa: $($tarefas[0])\" # Remover \"Rever relat√≥rio\" $tarefas.Remove(\"Rever relat√≥rio\") # Adicionar nova tarefa $tarefas.Add(\"Ligar ao cliente\") &gt; $null # Mostrar tarefas finais Write-Output \"Lista final de tarefas:\" $tarefas . üß© Exerc√≠cio ‚Äì Aceder e modificar valores numa Hashtable . Tens os dados de um utilizador numa hashtable. Vais atualizar a informa√ß√£o com base em novos dados recebidos. | Cria uma hashtable chamada $utilizador com: . | Nome = \"Tiago\" | Idade = 34 | Email = \"tiago@email.com\" | . | Mostra o valor do campo Email | Tiago pediu para atualizar o email para \"tiago.silva@email.com\" | Adiciona uma nova chave Ativo = $true | Mostra todos os pares chave/valor | . Resposta # Criar hashtable $utilizador = @{ Nome = \"Tiago\" Idade = 34 Email = \"tiago@email.com\" } # Mostrar email atual Write-Output \"Email atual: $($utilizador[\"Email\"])\" # Atualizar email $utilizador[\"Email\"] = \"tiago.silva@email.com\" # Adicionar novo campo $utilizador[\"Ativo\"] = $true # Mostrar hashtable final Write-Output \"Dados do utilizador:\" $utilizador . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#23--exercicios",
    
    "relUrl": "/Modules/Module2/session2.html#23--exercicios"
  },"105": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.4. Lista de tipos",
    "content": "| Nome | Descri√ß√£o | Caracter√≠sticas | Tipo | . | [Int32] | N√∫mero inteiro | De -2.147.483.648 a 2.147.483.647 | Primitiva | . | [String] | Texto | Sequ√™ncia de caracteres (ex: ‚ÄúOl√° Mundo‚Äù) | Primitiva | . | [Boolean] | Verdadeiro/Falso | Valores $true ou $false | Primitiva | . | [Double] | N√∫mero decimal | Usa ponto para decimais (ex: 3.14) com cerca de 15-16 d√≠gitos de precis√£o | Primitiva | . | [Char] | Caractere √∫nico | Um √∫nico caractere (ex: 'A') | Primitiva | . | [Guid] | Identificador √∫nico | Ex: b3f3c3b0-0d7e-4db1-9f23-2c44e52a1a1e | Primitiva | . | [Decimal] | Alta precis√£o | Usado para c√°lculos financeiros, com cerca de 28-29 d√≠gitos de precis√£o | Primitiva | . | [Byte] | N√∫mero pequeno | De 0 a 255 | Primitiva | . | [Array] | Lista de itens | Cole√ß√£o de m√∫ltiplos valores | Composta | . | [Hashtable] | Chave-valor | Estrutura de dicion√°rio (ex: @{chave=\"valor\"}) | Composta | . | [DateTime] | Data e hora | Representa data e hora | Composta | . | [Object] | Objeto gen√©rico | Pode armazenar qualquer tipo | Composta | . | [PSCustomObject] | Objeto personalizado | Estrutura com propriedades definidas | Composta | . | [XML] | Documento XML | Representa√ß√£o de XML | Composta | . | [Version] | Vers√£o de software | Ex: 1.0.0.0 | Composta | . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#24-lista-de-tipos",
    
    "relUrl": "/Modules/Module2/session2.html#24-lista-de-tipos"
  },"106": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.5. Operadores b√°sicos",
    "content": "Nesta sec√ß√£o vamos explorar os operadores mais comuns em PowerShell, utilizados para efetuar c√°lculos, comparar valores, combinar condi√ß√µes e manipular strings. Operadores aritm√©ticos . Usados para realizar c√°lculos com n√∫meros. | Operador | Descri√ß√£o | Exemplo | Resultado | . | + | Soma | 2 + 3 | 5 | . | - | Subtra√ß√£o | 10 - 4 | 6 | . | * | Multiplica√ß√£o | 5 * 2 | 10 | . | / | Divis√£o | 10 / 2 | 5 | . | % | M√≥dulo (resto) | 7 % 3 | 1 | . Operadores de compara√ß√£o . Usados para comparar valores. O resultado √© sempre $true ou $false. | Operador | Significado | Exemplo | Resultado | . | -eq | Igual | 5 -eq 5 | True | . | ¬† | ¬† | \"ana\" -eq \"Ana\" | True | . | ¬† | ¬† | $data1 -eq $data2 | Depende | . | -ne | Diferente | 5 -ne 3 | True | . | ¬† | ¬† | \"a\" -ne \"b\" | True | . | -gt | Maior que | 10 -gt 5 | True | . | ¬† | ¬† | \"zebra\" -gt \"abelha\" | True | . | ¬† | ¬† | Get-Date -gt (Get-Date).AddDays(-1) | True | . | -lt | Menor que | 3 -lt 8 | True | . | ¬† | ¬† | \"abc\" -lt \"bcd\" | True | . | -ge | Maior ou igual | 5 -ge 5 | True | . | -le | Menor ou igual | 2 -le 3 | True | . ‚ö†Ô∏è Notas importantes: . | Strings s√£o comparadas por ordem alfab√©tica (lexicogr√°fica) e de forma case-insensitive. Exemplo: \"ana\" -eq \"Ana\" devolve True, \"abc\" -lt \"bcd\" devolve True . | Datas s√£o objetos do tipo DateTime, e podem ser comparadas diretamente com estes operadores. Exemplo: (Get-Date) -gt (Get-Date).AddDays(-1) devolve $true. | . Operadores de compara√ß√£o case-sensitive . Se precisares de distinguir \"Ana\" de \"ana\", usa os operadores case-sensitive: . | Operador | Significado | Exemplo | Resultado | . | -ceq | Igual (case-sensitive) | \"Ana\" -ceq \"ana\" | False | . | -cne | Diferente (case-sensitive) | \"Ana\" -cne \"ana\" | True | . | -cgt | Maior que (case-sensitive) | \"Ana\" -cgt \"ana\" | False | . | -clt | Menor que (case-sensitive) | \"Ana\" -clt \"ana\" | True | . | -cge | Maior ou igual (case-sensitive) | \"Ana\" -cge \"Ana\" | True | . | -cle | Menor ou igual (case-sensitive) | \"Ana\" -cle \"ana\" | True | . Operadores l√≥gicos . Usados para combinar condi√ß√µes booleanas. | Operador | Significado | Exemplo | Resultado | . | -and | E l√≥gico | $true -and $false | False | . | -or | OU l√≥gico | $true -or $false | True | . | -not | Nega√ß√£o | -not $true | False | . Atribui√ß√£o combinada . Permite atualizar valores com base no conte√∫do atual da vari√°vel. $x = 5 $x += 2 # agora $x vale 7 $x -= 1 # agora $x vale 6 $x *= 3 # agora $x vale 18 $x /= 2 # agora $x vale 9 . Funciona com n√∫meros e at√© com arrays (ex: $lista += \"NovoValor\"). ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#25-operadores-b%C3%A1sicos",
    
    "relUrl": "/Modules/Module2/session2.html#25-operadores-b√°sicos"
  },"107": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.6. üß© Exerc√≠cios",
    "content": "üß© Exerc√≠cio - Operadores . | Cria uma vari√°vel $a com valor 10 | Cria uma vari√°vel $b com valor 3 | Mostra a soma, subtra√ß√£o, multiplica√ß√£o e divis√£o de $a com $b | Verifica se $a √© maior que $b | Verifica se $a √© menor ou igual a $b | Faz $a -gt 5 -and $b -lt 2 | Faz $a -gt 5 -or $b -lt 2 | . Resposta # Linha 1 $a = 10 # Linha 2 $b = 3 # Linha 3 ‚Äì Opera√ß√µes aritm√©ticas Write-Output \"Soma: $($a + $b)\" Write-Output \"Subtra√ß√£o: $($a - $b)\" Write-Output \"Multiplica√ß√£o: $($a * $b)\" Write-Output \"Divis√£o: $($a / $b)\" # Linha 4 ‚Äì Compara√ß√µes simples Write-Output \"$a &gt; $b: $($a -gt $b)\" Write-Output \"$a &lt;= $b: $($a -le $b)\" # Linha 6 ‚Äì Operador AND Write-Output \"($a -gt 5) -and ($b -lt 2): $($a -gt 5 -and $b -lt 2)\" # Linha 7 ‚Äì Operador OR Write-Output \"($a -gt 5) -or ($b -lt 2): $($a -gt 5 -or $b -lt 2)\" . üß© Exerc√≠cio - Atribui√ß√£o combinada . | Cria uma vari√°vel $total com valor 10 | Soma 5 ao valor de $total usando += | Multiplica o valor atual por 2 usando *= | Subtrai 4 com -= | Mostra o resultado final com Write-Output . Resposta # Linha 1 $total = 10 # Linha 2 $total += 5 # Agora √© 15 # Linha 3 $total *= 2 # Agora √© 30 # Linha 4 $total -= 4 # Agora √© 26 # Linha 5 Write-Output \"Total final: $total\" . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#26--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module2/session2.html#26--exerc√≠cios"
  },"108": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.7. Boas pr√°ticas com vari√°veis",
    "content": "Usar vari√°veis corretamente torna os teus scripts mais leg√≠veis, f√°ceis de manter e menos propensos a erros. Aqui ficam boas pr√°ticas essenciais, seguidas de um resumo consolidado com tudo o que foi visto ao longo da sess√£o. Pr√°ticas recomendadas . | Usa nomes claros e descritivos: $precoTotal, $listaClientes | Mant√©m consist√™ncia no estilo (camelCase, snake_case, etc.) | Inicializa sempre as vari√°veis antes de usar, mesmo que com $null | Evita sobrescrever vari√°veis autom√°ticas como $args, $null, etc. | Quando necess√°rio, usa tipagem expl√≠cita ([int], [string]) para garantir consist√™ncia | . ‚ö†Ô∏è Erros comuns a evitar . | Erro | Explica√ß√£o | . | Usar = em vez de -eq | = atribui, -eq compara | . | Aceder a √≠ndices errados em arrays | Lembra-te que come√ßam em 0 | . | Esquecer de inicializar | Pode causar erros ou $null inesperado | . | Usar + com tipos incompat√≠veis | Pode causar erro se n√£o for string ou n√∫mero | . | N√£o usar aspas com vari√°veis | Pode resultar em nomes mal interpretados | . ‚úÖ Resumo r√°pido . # Nomes descritivos $nomeCliente = \"Joana\" $precoTotal = 42.5 # Inicializa√ß√£o $resultado = $null # Tipagem expl√≠cita [int]$idade = 30 # Evitar sobrescrever vari√°veis do sistema # (n√£o usar: $args, $null, $true, etc.) # Verifica√ß√£o de tipo $nome.GetType().Name # String $idade -is [int] # True . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#27-boas-pr%C3%A1ticas-com-vari%C3%A1veis",
    
    "relUrl": "/Modules/Module2/session2.html#27-boas-pr√°ticas-com-vari√°veis"
  },"109": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.8. Recursos adicionais",
    "content": "Aqui ficam alguns links √∫teis para aprofundares os teus conhecimentos sobre vari√°veis, tipos de dados e boas pr√°ticas em PowerShell: . | üîó about_Variables ‚Äî Documenta√ß√£o oficial | üîó about_Automatic_Variables ‚Äî Vari√°veis autom√°ticas | üîó about_Preference_Variables ‚Äî Vari√°veis preferenciais | üîó PowerShell Language Specification ‚Äì Chapter 4: Data Types and Variables | . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#28-recursos-adicionais",
    
    "relUrl": "/Modules/Module2/session2.html#28-recursos-adicionais"
  },"110": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "2.9. Extras √∫teis com estruturas compostas",
    "content": "Get-Member com ArrayList . Se tentares fazer: . $lista = New-Object System.Collections.ArrayList $lista | Get-Member . Vais ver apenas os m√©todos e propriedades dos elementos do array, n√£o do pr√≥prio ArrayList. Para ver os m√©todos e propriedades do objeto em si, usa: . Get-Member -InputObject $lista . Ou: . $lista.GetType().FullName . ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html#29-extras-%C3%BAteis-com-estruturas-compostas",
    
    "relUrl": "/Modules/Module2/session2.html#29-extras-√∫teis-com-estruturas-compostas"
  },"111": {
    "doc": "Session 2: Vari√°veis e Tipos de Dados",
    "title": "Session 2: Vari√°veis e Tipos de Dados",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/session2.html",
    
    "relUrl": "/Modules/Module2/session2.html"
  },"112": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "üß≠ Sess√£o 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "content": ". üéØ Objetivo Nesta sess√£o vamos aprofundar o entendimento sobre como o PowerShell apresenta e manipula o output dos comandos, como personalizar o ambiente de trabalho, e introduzir fun√ß√µes simples para reutiliza√ß√£o de l√≥gica. | 1. Objetos , Propriedades e M√©todos . | 1.1. O que √© um objeto? | 1.2. Como identificar propriedades e m√©todos? | 1.3. Aceder a propriedades | 1.4. Invocar m√©todos | 1.5. üß© Exerc√≠cios pr√°ticos | . | 2. Par√¢metros em comandos . | 2.1. O que s√£o par√¢metros? | 2.2. Como descobrir os par√¢metros dispon√≠veis? | 2.3. Show-Command ‚Äî Interface gr√°fica para explorar cmdlets | 2.4. Par√¢metros posicionais vs nomeados | 2.5. Como interpretar a ajuda de um par√¢metro | 2.6. üß© Exerc√≠cios pr√°ticos | . | 3. Outputs e Pipeline . | 3.1. Introdu√ß√£o | 3.2. Output para o terminal | 3.3. Formatar o output | 3.4. Redirecionar output para ficheiros | 3.5. O pipeline (|) | 3.6. $_ ‚Äì o objeto atual no pipeline | 3.7. Boas pr√°ticas | 3.8. üß© Exerc√≠cios pr√°ticos | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html",
    
    "relUrl": "/Modules/Module1/session3.html"
  },"113": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1. Objetos , Propriedades e M√©todos",
    "content": "No PowerShell, quase tudo √© um objeto. Isso significa que os comandos n√£o devolvem apenas texto, mas sim objetos com propriedades e m√©todos que podes explorar e manipular. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#1-objetos--propriedades-e-m%C3%A9todos",
    
    "relUrl": "/Modules/Module1/session3.html#1-objetos--propriedades-e-m√©todos"
  },"114": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.1. O que √© um objeto?",
    "content": "Um objeto √© uma estrutura que cont√©m: . | Propriedades ‚Äì informa√ß√µes sobre o objeto (ex: nome, tamanho, data de cria√ß√£o) | M√©todos ‚Äì a√ß√µes que o objeto pode executar (ex: copiar, apagar, converter) | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#11-o-que-%C3%A9-um-objeto",
    
    "relUrl": "/Modules/Module1/session3.html#11-o-que-√©-um-objeto"
  },"115": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.2. Como identificar propriedades e m√©todos?",
    "content": "Podes visualizar as propriedades e m√©todos de um objeto atrav√©s de comandos que mostrem o seu conte√∫do completo. Este comando mostra todos os m√©todos e propriedades dispon√≠veis no objeto $hoje, que representa a data e hora atual. $hoje = Get-Date $hoje | Get-Member . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#12-como-identificar-propriedades-e-m%C3%A9todos",
    
    "relUrl": "/Modules/Module1/session3.html#12-como-identificar-propriedades-e-m√©todos"
  },"116": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.3. Aceder a propriedades",
    "content": "Podes visualizar os valores das propriedades de um objeto com: . $hoje | Format-List * . Podes aceder a uma propriedade com o operador . Exemplo: . $hoje.Year $hoje.Month $hoje.DayOfWeek . $hoje.Year devolve o ano atual (ex: 2025) $hoje.Month devolve o n√∫mero do m√™s (ex: 4) $hoje.DayOfWeek devolve o dia da semana por extenso (ex: Friday) . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#13-aceder-a-propriedades",
    
    "relUrl": "/Modules/Module1/session3.html#13-aceder-a-propriedades"
  },"117": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.4. Invocar m√©todos",
    "content": "Os m√©todos s√£o a√ß√µes que um objeto pode executar. Para invocar um m√©todo, usas o operador de ponto seguido de par√™ntesis (). Podes descobrir quais os m√©todos dispon√≠veis para um objeto com o comando: $objeto | Get-Member . Exemplo: . $hoje | Get-Member . Isto mostra todos os membros do objeto $data, incluindo os m√©todos como AddDays, AddHours, ToShortDateString, etc. O m√©todo AddDays() pertence ao tipo System.DateTime Aceita um n√∫mero (double) como argumento, que representa o n√∫mero de dias a somar ou subtrair. O resultado √© um novo objeto datetime com a data ajustada. | O m√©todo chama-se AddDays | Recebe como par√¢metro de entrada um valor do tipo double (por exemplo: 1, 2.5, -3) | Devolve como resultado um objeto do tipo datetime | Exemplos . $maisMeioDia = $hoje.AddDays(0.5) $amanha = $hoje.AddDays(1) . | . üîé Nota Get-Location | Get-Member mostra-te os m√©todos e propriedades que podes usar sobre os objetos devolvidos pelo comando Get-Location, e n√£o sobre o pr√≥prio comando. Se escreveres: . Get-Location.ToString() . O PowerShell interpreta isto como uma tentativa de chamar o m√©todo ToString() sobre o comando Get-Location em si, e n√£o sobre o objeto que ele devolve. Ora, Get-Location √© um comando, n√£o √© um objeto. Est√°s, na pr√°tica, a tentar aplicar .ToString() a um scriptblock impl√≠cito, o que resulta num erro ou num comportamento inesperado. A forma correta de o fazer √© com par√™ntesis: . (Get-Location).ToString() . Assim, o PowerShell executa primeiro o comando Get-Location e s√≥ depois chama o m√©todo ToString() sobre o objeto retornado (que √© do tipo PathInfo). Documenta√ß√£o oficial: https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/03-discovering-objects . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#14-invocar-m%C3%A9todos",
    
    "relUrl": "/Modules/Module1/session3.html#14-invocar-m√©todos"
  },"118": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "1.5. üß© Exerc√≠cios pr√°ticos",
    "content": "üß© Exerc√≠cio 1 . | Cria uma vari√°vel $frase com o valor ‚ÄúPowerShell √© poderoso‚Äù. | Mostra o comprimento total da frase usando a propriedade adequada. | . Resposta $frase = \"PowerShell √© poderoso\" $frase.Length . üß© Exerc√≠cio 2 . | Cria uma vari√°vel $texto com o valor \"PowerShell √© fixe\". | Converte para mai√∫sculas. | Verifica se cont√©m a palavra \"fixe\". | . Resposta $texto = \"PowerShell √© fixe\" $texto.ToUpper() $texto.Contains(\"fixe\") . üß© Exerc√≠cio 3 . | Guarda a data atual numa vari√°vel chamada $hoje. | Cria uma nova vari√°vel $amanha com a data de amanh√£. | Mostra o dia da semana correspondente. | . Resposta $hoje = Get-Date $amanha = $hoje.AddDays(1) $amanha.DayOfWeek . üß© Exerc√≠cio 4 . Usa o comando Get-Location e acede √† propriedade que te mostra o caminho atual da localiza√ß√£o. Resposta (Get-Location).Path Usa o mesmo comando e chama o m√©todo que devolve o o caminho atual da localiza√ß√£o. Resposta (Get-Location).ToString() Nota Ambos os comandos devolvem exatamente o mesmo texto ‚Äî o caminho atual. Isto acontece porque o m√©todo ToString() do objeto PathInfo foi implementado para devolver o mesmo valor da propriedade Path. Este √© um bom exemplo de como m√©todos podem ser usados para produzir representa√ß√µes leg√≠veis de objetos, mesmo que haja uma propriedade que contenha o mesmo valor. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#15--exerc%C3%ADcios-pr%C3%A1ticos",
    
    "relUrl": "/Modules/Module1/session3.html#15--exerc√≠cios-pr√°ticos"
  },"119": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2. Par√¢metros em comandos",
    "content": "Muitos comandos no PowerShell aceitam par√¢metros para alterar o seu comportamento ou filtrar os resultados. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#2-par%C3%A2metros-em-comandos",
    
    "relUrl": "/Modules/Module1/session3.html#2-par√¢metros-em-comandos"
  },"120": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.1. O que s√£o par√¢metros?",
    "content": ". | Um par√¢metro √© uma op√ß√£o que controlas ao chamar um comando. | Um argumento √© o valor que passas a esse par√¢metro. | . Exemplo: . Get-Process -Name \"notepad\" . | -Name √© o par√¢metro | \"notepad\" √© o argumento | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#21-o-que-s%C3%A3o-par%C3%A2metros",
    
    "relUrl": "/Modules/Module1/session3.html#21-o-que-s√£o-par√¢metros"
  },"121": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.2. Como descobrir os par√¢metros dispon√≠veis?",
    "content": "Usa os seguintes comandos: . Mostra todos os par√¢metros, exemplos e descri√ß√µes. Get-Help Get-Process -Full . Mostra apenas os par√¢metros Get-Help Get-Process -Parameter * . Mostra a sintaxe resumida. Get-Command Get-Process -Syntax . Abre uma janela gr√°fica com os par√¢metros Show-Command Get-Process . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#22-como-descobrir-os-par%C3%A2metros-dispon%C3%ADveis",
    
    "relUrl": "/Modules/Module1/session3.html#22-como-descobrir-os-par√¢metros-dispon√≠veis"
  },"122": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.3. Show-Command ‚Äî Interface gr√°fica para explorar cmdlets",
    "content": "O Show-Command abre uma interface gr√°fica (GUI) onde podes preencher os par√¢metros de um cmdlet. √â especialmente √∫til para quem est√° a come√ßar ou quer explorar rapidamente os par√¢metros dispon√≠veis sem consultar o Get-Help. Como funciona? . | Ao executar Show-Command Get-Process, abre-se uma janela com todos os par√¢metros organizados em tabs. | Em alguns casos, o Show-Command apresenta os par√¢metros numa √∫nica vista simples (sem separadores). Noutros cmdlets mais complexos, podem surgir abas (tabs) como Default, CommonParameters e All, dependendo da vers√£o do PowerShell e do n√∫mero de par√¢metros. | Podes preencher os campos manualmente, ver o comando PowerShell resultante (bot√£o Copy) e at√© execut√°-lo diretamente (bot√£o Run). | . Exemplo visual . Show-Command Get-Process . Quando usar? . | Quando n√£o conheces bem os par√¢metros de um cmdlet. | Para aprender a construir comandos mais complexos. | Em apresenta√ß√µes ou aulas para demonstrar cmdlets de forma intuitiva. | . Aten√ß√£o . | S√≥ funciona em ambientes com interface gr√°fica (n√£o funciona em PowerShell sem GUI, como o PowerShell Core em Linux ou WSL sem suporte gr√°fico). | √ötil para aprendizagem, mas na pr√°tica avan√ßada √© mais r√°pido usar diretamente o terminal. | . üîó Show-Command - Documenta√ß√£o oficial . üß™ Exerc√≠cio ‚Äì Explorar processos com Show-Command . | Corre: . Show-Command Get-Process . | Preenche o campo Name com notepad. | Clica em Copy e cola no terminal. O que aparece? | Agora clica em Run. | . üîó Show-Command . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#23-show-command--interface-gr%C3%A1fica-para-explorar-cmdlets",
    
    "relUrl": "/Modules/Module1/session3.html#23-show-command--interface-gr√°fica-para-explorar-cmdlets"
  },"123": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.4. Par√¢metros posicionais vs nomeados",
    "content": ". | Explicito: Escreves explicitamente o nome do par√¢metro. Ex: Get-Process -Name notepad . | Posicional: O PowerShell assume o par√¢metro com base na posi√ß√£o do argumento. Ex: Get-Process notepad ‚Üí √© equivalente a -Name notepad . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#24-par%C3%A2metros-posicionais-vs-nomeados",
    
    "relUrl": "/Modules/Module1/session3.html#24-par√¢metros-posicionais-vs-nomeados"
  },"124": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.5. Como interpretar a ajuda de um par√¢metro",
    "content": "Exemplo retirado de Get-Help Get-Service -Parameter Name: . -Name &lt;System.String[]&gt; Specifies the service names of services to be retrieved. Wildcards are permitted. Required? false Position? 0 Default value None Accept pipeline input? True (ByPropertyName, ByValue) Accept wildcard characters? true . | -Name √© o nome do par√¢metro | O tipo esperado √© uma string ou lista de strings | N√£o √© obrigat√≥rio (Required? false) | Pode ser usado sem escrever o nome, se for o primeiro argumento (Position? 0) | Aceita wildcards (*, ?) | Aceita input de pipeline por nome de propriedade ou por valor | . Com base nesta informa√ß√£o podemos usar: . Get-Service -Name ms* Get-Service ms* . üí° Dica: Usa Tab para completar o nome dos par√¢metros . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#25-como-interpretar-a-ajuda-de-um-par%C3%A2metro",
    
    "relUrl": "/Modules/Module1/session3.html#25-como-interpretar-a-ajuda-de-um-par√¢metro"
  },"125": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "2.6. üß© Exerc√≠cios pr√°ticos",
    "content": "üß© Exerc√≠cio - Explorar par√¢metros com Get-EventLog . Usa Get-Help Get-EventLog -Full e tenta descobrir: . | Como listar os √∫ltimos 5 eventos do log System | Que par√¢metro te permite limitar a quantidade de eventos | . Resposta Get-EventLog -LogName System -Newest 5 üß© Exerc√≠cio - Explorar par√¢metros com Get-ChildItem . Usa Get-Help Get-ChildItem -Parameter * para responder √†s seguintes perguntas: . | Qual o par√¢metro que permite procurar ficheiros de forma recursiva? | Qual o par√¢metro que permite usar filtros com wildcards? | Constr√≥i um comando que mostre todos os ficheiros .txt em todos os subdiret√≥rios da tua pasta pessoal. | . üí° Nota: Podes usar a vari√°vel de ambiente $Env:USERPROFILE para aceder √† tua pasta pessoal. Resposta Get-ChildItem -Path $Env:USERPROFILE -Filter *.txt -Recurse Vers√£o reduzida Get-ChildItem $Env:USERPROFILE *.txt -Recurse `$Env:USERPROFILE` ‚Üí corresponde ao 1.¬∫ par√¢metro posicional, que √© -Path `*.txt` ‚Üí corresponde ao 2.¬∫ par√¢metro posicional, que √© -Filter `-Recurse` ‚Üí continua a ser necess√°rio indicar o nome, pois n√£o √© posicional Este comando √© menos leg√≠vel, pelo que √© melhor usar sempre o nome dos par√¢metros ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#26--exerc%C3%ADcios-pr%C3%A1ticos",
    
    "relUrl": "/Modules/Module1/session3.html#26--exerc√≠cios-pr√°ticos"
  },"126": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3. Outputs e Pipeline",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#3-outputs-e-pipeline",
    
    "relUrl": "/Modules/Module1/session3.html#3-outputs-e-pipeline"
  },"127": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.1. Introdu√ß√£o",
    "content": "No PowerShell, o output refere-se √† informa√ß√£o que um comando devolve depois de ser executado. Esse resultado pode ser: . | Visualizado no terminal | Armazenado numa vari√°vel | Redirecionado para ficheiros | Passado para outro comando atrav√©s do pipeline | . O que pode ser feito com o output? . Podes fazer v√°rias coisas com o resultado de um comando: . | Visualizar diretamente no terminal (com formata√ß√£o opcional) | Transformar o conte√∫do (filtrar, ordenar, formatar) | Guardar o resultado em ficheiros (texto, CSV, etc.) | Encadear o resultado em comandos seguintes com | . Esta flexibilidade torna o PowerShell uma ferramenta poderosa para automatiza√ß√£o e an√°lise de dados. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#31-introdu%C3%A7%C3%A3o",
    
    "relUrl": "/Modules/Module1/session3.html#31-introdu√ß√£o"
  },"128": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.2. Output para o terminal",
    "content": "Quando executas um comando no PowerShell, o resultado (output) √© mostrado automaticamente no terminal, sem necessidade de comandos adicionais. Exibi√ß√£o por defeito . Se escreveres apenas uma express√£o ou comando, o PowerShell mostra o resultado automaticamente. Exemplos: . Get-Date \"Ol√°, mundo\" 2 + 3 $variavel = \"valor\" # neste caso n√£o h√° output, apenas atribui√ß√£o . O PowerShell mostra o resultado porque o motor de execu√ß√£o avalia a express√£o e, se for apropriado, envia-a para o sistema de formata√ß√£o (que define como o output ser√° apresentado). O que √© o sistema de formata√ß√£o no PowerShell? . Sempre que executas um comando, o PowerShell n√£o imprime diretamente o objeto devolvido. Em vez disso, envia esse objeto para o sistema de formata√ß√£o, que define como o conte√∫do ser√° apresentado no terminal. Esse sistema baseia-se em regras internas, definidas em ficheiros .format.ps1xml, que indicam: . | Que propriedades devem ser mostradas | Em que ordem | Com que t√≠tulos | E em que tipo de estrutura (tabela, lista, etc.) | . Exemplo 1 ‚Äì Get-Process . Get-Process . Este comando devolve objetos do tipo System.Diagnostics.Process. O PowerShell aplica regras de formata√ß√£o espec√≠ficas para esse tipo, e mostra automaticamente uma tabela com colunas como: . | Handles | NPM | CPU | Id | ProcessName | . Exemplo 2 ‚Äì Get-Date . Get-Date . Este comando devolve um objeto System.DateTime. Esse tipo de objeto tem o m√©todo .ToString() bem definido, por isso o PowerShell mostra diretamente: . s√°bado, 20 de abril de 2025 09:32:01 . Se quiseres ver todas as propriedades do objeto: . Get-Date | Format-List * . E se o tipo de objeto n√£o tiver formata√ß√£o definida? . O PowerShell tenta chamar o m√©todo .ToString() do objeto. Por exemplo o comando New-Object -TypeName System.Objectvai criar um objeto gen√©rico sem propriedades nem m√©todos personalizados (al√©m dos herdados) que ter√° como resultado: . System.Object . Isto √© semelhante ao que acontece em linguagens como C# ou Java quando tentas imprimir um objeto sem sobrepor o m√©todo ToString(). Write-Output (opcional mas √∫til) . O comando Write-Output envia explicitamente dados para o output. Na maioria dos casos, n√£o √© necess√°rio us√°-lo ‚Äî mas pode ser √∫til quando queres tornar o c√≥digo mais claro ou construir scripts mais estruturados. Exemplos: . Write-Output \"Isto vai aparecer no terminal\" Write-Output (Get-Date) . Nota: Write-Output envia o conte√∫do para o pipeline, o que significa que podes continuar a trabalhar com o valor. Por oposi√ß√£o, Write-Host escreve diretamente no ecr√£ e n√£o envia nada para o pipeline. Exemplo de diferen√ßa: . Write-Output \"Ol√°\" | ForEach-Object { $_.ToUpper() } # funciona Write-Host \"Ol√°\" | ForEach-Object { $_.ToUpper() } # n√£o funciona . üí° Usa Write-Output quando quiseres manter a informa√ß√£o no fluxo de dados. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#32-output-para-o-terminal",
    
    "relUrl": "/Modules/Module1/session3.html#32-output-para-o-terminal"
  },"129": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.3. Formatar o output",
    "content": "Por defeito, o PowerShell aplica uma formata√ß√£o autom√°tica com base no tipo de objeto devolvido. No entanto, podes personalizar a forma como a informa√ß√£o √© apresentada usando os comandos Format-Table, Format-List e Select-Object. Format-Table . Apresenta os dados em forma de tabela, com colunas. Exemplo: . Get-Process | Select-Object -First 10 | Format-Table Name, Id, CPU . Podes tamb√©m usar -AutoSize para ajustar automaticamente a largura das colunas: . Get-Process | Select-Object -First 10 | Format-Table Name, Id, CPU -AutoSize . Format-List . Mostra as propriedades em lista vertical, √∫til quando h√° muitos detalhes ou quando o conte√∫do n√£o cabe numa linha. Exemplo: . Get-Process | Select-Object -First 10 | Format-List Name, Id, CPU . üí° Usa Format-List quando quiseres ver tudo com mais detalhe, e Format-Table quando quiseres uma vis√£o geral e comparativa. üîé Select-Object . Permite selecionar apenas algumas propriedades de um objeto, sem alterar o tipo de output. Isto √© √∫til para controlar os dados que passam no pipeline, sem aplicar formata√ß√£o visual. Exemplo: . Get-Process | Select-Object Name, Id . üí° Select-Object √© usado para preparar dados para exporta√ß√£o, filtragem ou uso posterior, n√£o apenas para apresenta√ß√£o. üÜö Compara√ß√£o pr√°tica com Get-Member . Get-Process | Select-Object Name, Id | Get-Member . ‚Üí Mostra os membros (propriedades e m√©todos) dos objetos que passaram pelo pipeline. O tipo de output √©: . TypeName: Selected.System.Diagnostics.Process . Ou seja, o resultado continua a ser um objeto com estrutura, com propriedades acess√≠veis como .Name e .Id. Get-Process | Format-Table Name, Id | Get-Member . ‚Üí Aqui Get-Member mostra os membros de um objeto de formata√ß√£o, e n√£o os do processo original. O tipo de output √©: . TypeName: Microsoft.PowerShell.Commands.Internal.Format.FormatStartData . Isto acontece porque Format-Table transforma os objetos em texto formatado, e os dados originais j√° n√£o est√£o acess√≠veis como propriedades estruturadas. Nota: Select-Object mant√©m os dados ‚Äúvivos‚Äù como objetos. Format-Table ‚Äúmata‚Äù os objetos e transforma-os em texto ‚Äî √∫til para ver, mas in√∫til para processar depois. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#33-formatar-o-output",
    
    "relUrl": "/Modules/Module1/session3.html#33-formatar-o-output"
  },"130": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.4. Redirecionar output para ficheiros",
    "content": "Podes guardar o resultado de comandos PowerShell em ficheiros para consulta posterior, documenta√ß√£o, exporta√ß√£o de dados, ou integra√ß√£o com outras ferramentas. Out-File . O comando Out-File envia texto formatado para um ficheiro. Exemplo: . Get-Process | Out-File -FilePath \"processos.txt\" . Isto cria (ou substitui) o ficheiro processos.txt com a sa√≠da formatada do comando Get-Process. üí° Podes usar o par√¢metro -Append se quiseres adicionar ao conte√∫do existente: . Get-Date | Out-File -FilePath \"log.txt\" -Append . Controlar o encoding . O Out-File usa por defeito o encoding utf-16. Se quiseres guardar em UTF-8 (mais comum e compat√≠vel), usa: . Get-Process | Out-File -FilePath \"processos.txt\" -Encoding utf8 . Export-Csv . O comando Export-Csv √© ideal para exportar objetos estruturados como listas de processos, servi√ßos, utilizadores, etc. Exemplo: . Get-Process | Select-Object Name, Id, CPU | Export-Csv -Path \"processos.csv\" -NoTypeInformation . | Cada linha do ficheiro CSV representa um objeto | Cada coluna corresponde a uma propriedade | O par√¢metro -NoTypeInformation evita que a primeira linha contenha metadados do tipo. | . üí° Este comando √© muito √∫til quando vais trabalhar os dados em Excel ou Power BI. Testar Correr o comando com e sem -NoTypeInformation e verificar a primeira linha do ficheiro. Set-Content e Add-Content . Estes comandos permitem escrever diretamente em ficheiros linha a linha (sem passar por formata√ß√£o especial). | Set-Content cria ou substitui um ficheiro | Add-Content adiciona ao conte√∫do existente | . Exemplos: . Set-Content -Path \"ficheiro.txt\" -Value \"Primeira linha\" Add-Content -Path \"ficheiro.txt\" -Value \"Segunda linha\" . üí° Estes comandos s√£o √∫teis quando precisas de escrever dados simples como strings, logs ou resultados de scripts, n√£o dependem do sistema de formata√ß√£o do PowerShell ‚Äî escrevem exatamente o que pedires, linha por linha. ‚ö†Ô∏è Nota importante: Se precisares de guardar dados estruturados (com propriedades), usa Export-Csv. Se o que queres √© guardar texto formatado tal como aparece no terminal, usa Out-File. Usa Set-Content ou Add-Content quando quiseres escrever diretamente texto simples ou valores individuais, sem formata√ß√£o autom√°tica. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#34-redirecionar-output-para-ficheiros",
    
    "relUrl": "/Modules/Module1/session3.html#34-redirecionar-output-para-ficheiros"
  },"131": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.5. O pipeline (|)",
    "content": "O s√≠mbolo |, chamado pipeline, √© uma das funcionalidades mais poderosas do PowerShell. Permite encadear comandos, onde o output de um comando √© passado como input para o seguinte. Como funciona? . Cada comando no pipeline recebe os objetos produzidos pelo comando anterior. Isso permite aplicar filtros, transforma√ß√µes ou a√ß√µes sucessivas de forma leg√≠vel e modular. Exemplo pr√°tico . Get-Process | Where-Object { $_.CPU -gt 100 } | Sort-Object CPU . Explica√ß√£o passo a passo: . | Get-Process devolve todos os processos em execu√ß√£o. | Where-Object filtra os que t√™m mais de 100 segundos de uso de CPU. | Sort-Object ordena os resultados com base na propriedade CPU. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#35-o-pipeline-",
    
    "relUrl": "/Modules/Module1/session3.html#35-o-pipeline-"
  },"132": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.6. $_ ‚Äì o objeto atual no pipeline",
    "content": "A vari√°vel especial $_, que representa o objeto atual no pipeline, ser√° explicada mais √† frente quando abordarmos blocos de script. Para j√° vamos apenas ver um breve exemplo . Get-Process | ForEach-Object { $_.Name } . Aqui, $_ √© o objeto atual, e acedemos √† sua propriedade Name. üí° Dica: O pipeline torna os comandos mais leg√≠veis, reutiliz√°veis e poderosos. Em vez de criar vari√°veis tempor√°rias ou escrever muitos passos, podes fazer tudo numa s√≥ linha de forma clara. ‚Äî . ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#36-_--o-objeto-atual-no-pipeline",
    
    "relUrl": "/Modules/Module1/session3.html#36-_--o-objeto-atual-no-pipeline"
  },"133": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.7. Boas pr√°ticas",
    "content": "Ao usares comandos com pipeline e redirecionamento de output, h√° algumas boas pr√°ticas que ajudam a evitar erros e a manter os scripts mais limpos e eficientes. Filtra o mais cedo poss√≠vel . Aplica filtros (Where-Object, Select-Object, etc.) no in√≠cio do pipeline para reduzir a quantidade de dados processados. Melhor: . Get-Process | Where-Object { $_.CPU -gt 100 } | Sort-Object CPU . Pior (menos eficiente): . Get-Process | Sort-Object CPU | Where-Object { $_.CPU -gt 100 } . Usa Select-Object para preparar dados para exporta√ß√£o . Antes de exportar dados (por exemplo, para CSV), seleciona apenas as propriedades relevantes com Select-Object. Get-Process | Select-Object Name, Id, CPU | Export-Csv -Path \"proc.csv\" -NoTypeInformation . Evita usar Format-* antes de exportar ou guardar . Comandos como Format-Table ou Format-List devem ser usados s√≥ para visualiza√ß√£o, e no final do pipeline. Se os usares antes de comandos como Export-Csv ou Out-File, perdes a estrutura dos dados. Errado: . Get-Process | Format-Table Name, Id | Export-Csv \"proc.csv\" ‚ùå . Correto: . Get-Process | Select-Object Name, Id | Export-Csv \"proc.csv\" ‚úÖ . Verifica o que vai sair antes de redirecionar . Testa sempre o output no terminal antes de o guardar em ficheiros. Assim evitas ficheiros com dados errados ou formatados de forma inesperada. Usa Export-Csv para dados estruturados . Se est√°s a exportar dados com v√°rias propriedades (como tabelas), usa Export-Csv. Evita usar Out-File nesses casos, porque vais guardar apenas o texto renderizado, e n√£o os dados reais. Usa Out-File, Set-Content ou Add-Content com prop√≥sitos espec√≠ficos . | Out-File: quando queres guardar o texto formatado como aparece no terminal | Set-Content: para criar ficheiros de texto simples com conte√∫do direto | Add-Content: para adicionar linhas a ficheiros existentes (ex: logs) | . üí° Dica: Ao seguir estas boas pr√°ticas, consegues criar scripts mais fi√°veis, reutiliz√°veis e mais f√°ceis de manter. ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#37-boas-pr%C3%A1ticas",
    
    "relUrl": "/Modules/Module1/session3.html#37-boas-pr√°ticas"
  },"134": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "3.8. üß© Exerc√≠cios pr√°ticos",
    "content": "üß© Exerc√≠cio 1 ‚Äì Format-Table . | Mostra os primeiros 5 processos no sistema. | Exibe apenas o nome, o ID e o tempo de CPU de cada processo. | Usa Format-Table com -AutoSize. | . Resposta Get-Process | Select-Object -First 5 | Format-Table Name, Id, CPU -AutoSize . üß© Exerc√≠cio 2 ‚Äì Format-List . | Mostra os detalhes do primeiro servi√ßo do sistema. | Exibe todas as propriedades usando Format-List. | . Resposta Get-Service | Select-Object -First 1 | Format-List * . üß© Exerc√≠cio 3 ‚Äì Guardar o output num ficheiro . | Guarda a lista de servi√ßos num ficheiro chamado servicos.txt. | Usa Out-File com encoding UTF-8. | . Resposta Get-Service | Out-File -FilePath \"servicos.txt\" -Encoding utf8 . üß© Exerc√≠cio 4 ‚Äì Exportar para CSV . | Exporta o nome e o estado de todos os servi√ßos para um ficheiro chamado servicos.csv. | Garante que a primeira linha n√£o cont√©m o tipo de objeto. | . Resposta Get-Service | Select-Object Name, Status | Export-Csv -Path \"servicos.csv\" -NoTypeInformation . üß© Exerc√≠cio 5 ‚Äì Adicionar conte√∫do a um ficheiro . | Cria um ficheiro log.txt com uma linha inicial. | Acrescenta a data e hora atuais √† linha seguinte. | . Resposta Set-Content -Path \"log.txt\" -Value \"In√≠cio do log\" Add-Content -Path \"log.txt\" -Value (Get-Date) . üß© Exerc√≠cio 6 ‚Äì Usar pipeline com filtros . | Lista todos os processos que estejam a consumir mais de 50 segundos de CPU. | Ordena os resultados por tempo de CPU. | . Resposta Get-Process | Where-Object { $_.CPU -gt 50 } | Sort-Object CPU üß© Exerc√≠cio 7 ‚Äì An√°lise de processos . | Usa Get-Process para explorar todas as propriedades dispon√≠veis (usa Format-List * ou Get-Member). | Escolhe tr√™s propriedades que aches √∫teis para analisar o estado dos processos (ex: Name, CPU, WorkingSet). | Filtra os 10 processos que est√£o a usar mais mem√≥ria (WorkingSet). | Exporta essa informa√ß√£o para um ficheiro processos_memoria.csv, sem incluir o tipo de objeto na primeira linha. | . üí° Dica: WorkingSet representa a quantidade de mem√≥ria f√≠sica usada por um processo (em bytes). Resposta Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 Name, CPU, WorkingSet | Export-Csv -Path \"processos_memoria.csv\" -NoTypeInformation ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html#38--exerc%C3%ADcios-pr%C3%A1ticos",
    
    "relUrl": "/Modules/Module1/session3.html#38--exerc√≠cios-pr√°ticos"
  },"135": {
    "doc": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "title": "Session 3: Objetos, par√¢metros, pipeline, output, exporta√ß√µes",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session3.html",
    
    "relUrl": "/Modules/Module1/session3.html"
  },"136": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "üß≠ Sess√£o 3: Tratamento de Erros com try, catch e finally",
    "content": ". üéØ Objetivo Aprender a capturar e tratar erros em PowerShell para tornar os scripts mais robustos, previs√≠veis e f√°ceis de manter. | 1. Porqu√™ tratar erros . | 1.1. Robustez e previsibilidade | 1.2. Seguran√ßa e manuten√ß√£o | . | 2. Sintaxe de try / catch / finally . | 2.1. Diferen√ßa entre erros n√£o-terminantes e terminantes | 2.2. M√∫ltiplos blocos catch | . | 3. Trabalhar com diferentes tipos de exce√ß√µes | 4. A vari√°vel autom√°tica $Error | 5. üß© Exerc√≠cio ‚Äì Criar um script com tratamento de erro . | 5.1. Requisitos | 5.2. Dicas | 5.3. Crit√©rios de sucesso | 5.4. Recursos adicionais | . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html",
    
    "relUrl": "/Modules/Module2/session3.html"
  },"137": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "1. Porqu√™ tratar erros",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#1-porqu%C3%AA-tratar-erros",
    
    "relUrl": "/Modules/Module2/session3.html#1-porqu√™-tratar-erros"
  },"138": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "1.1. Robustez e previsibilidade",
    "content": ". | Evitar falhas inesperadas que interrompem o fluxo do script. | Permitir fallbacks ou caminhos alternativos (e-mails de alerta, logs, repeti√ß√£o de opera√ß√£o). | Melhorar a experi√™ncia do utilizador com mensagens claras. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#11-robustez-e-previsibilidade",
    
    "relUrl": "/Modules/Module2/session3.html#11-robustez-e-previsibilidade"
  },"139": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "1.2. Seguran√ßa e manuten√ß√£o",
    "content": ". | Prevenir exposi√ß√£o de dados sens√≠veis em mensagens de erro cruas. | Facilitar o debug e a manuten√ß√£o futura ao produzir logs detalhados. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#12-seguran%C3%A7a-e-manuten%C3%A7%C3%A3o",
    
    "relUrl": "/Modules/Module2/session3.html#12-seguran√ßa-e-manuten√ß√£o"
  },"140": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "2. Sintaxe de try / catch / finally",
    "content": "try { &lt;# bloco que pode lan√ßar erro #&gt; } catch [&lt;TipoDeExce√ß√£o&gt;] { &lt;# tratamento #&gt; } finally { &lt;# bloco que corre SEMPRE #&gt; } . | try ‚Äì envolve c√≥digo que pode gerar erros. | catch ‚Äì executado quando ocorre um erro terminante. Para capturar erros n√£o-terminantes use -ErrorAction Stop. | finally ‚Äì executado quer exista ou n√£o erro (fechar ficheiros, remover temp, etc.). | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#2-sintaxe-de-try--catch--finally",
    
    "relUrl": "/Modules/Module2/session3.html#2-sintaxe-de-try--catch--finally"
  },"141": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "2.1. Diferen√ßa entre erros n√£o-terminantes e terminantes",
    "content": ". | Erros n√£o-terminantes S√£o erros que n√£o interrompem a execu√ß√£o do script. O PowerShell apresenta a mensagem de erro, mas o script continua a correr. Exemplo: . Get-ChildItem -Path \"C:\\inexistente\" . ‚ûî Gera um erro, mas o script continua a executar o que vem a seguir. | Erros terminantes S√£o erros que interrompem imediatamente a execu√ß√£o. Apenas erros terminantes podem ser capturados pelo bloco catch. Para tornar um erro n√£o-terminante em terminante, usa-se -ErrorAction Stop. Exemplo: . Get-ChildItem -Path \"C:\\inexistente\" -ErrorAction Stop . ‚ûî Agora o erro √© tratado como terminante e pode ser capturado no catch. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#21-diferen%C3%A7a-entre-erros-n%C3%A3o-terminantes-e-terminantes",
    
    "relUrl": "/Modules/Module2/session3.html#21-diferen√ßa-entre-erros-n√£o-terminantes-e-terminantes"
  },"142": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "2.2. M√∫ltiplos blocos catch",
    "content": "try { # ... } catch [System.IO.IOException] { \"Problema de E/S: $_\" } catch { \"Erro gen√©rico: $_\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#22-m%C3%BAltiplos-blocos-catch",
    
    "relUrl": "/Modules/Module2/session3.html#22-m√∫ltiplos-blocos-catch"
  },"143": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "3. Trabalhar com diferentes tipos de exce√ß√µes",
    "content": ". | Filtrar exce√ß√µes espec√≠ficas para respostas espec√≠ficas. | Hierarquia ‚Äì exce√ß√µes mais espec√≠ficas devem vir antes das gen√©ricas. | Utilizar o alias [Exception] para a √∫ltima catch gen√©rica. | . | Tipo de exce√ß√£o | Quando ocorre | Estrat√©gia t√≠pica | . | System.IO.FileNotFoundException | Ficheiro n√£o encontrado | Criar/solicitar ficheiro, abortar tarefa | . | System.UnauthorizedAccessException | Permiss√µes insuficientes | Elevar privil√©gios, informar utilizador | . | Exception | Qualquer outro erro | Log gen√©rico + rethrow ou sa√≠da | . Como descobrir que exce√ß√µes um comando pode lan√ßar . PowerShell nem sempre documenta todas as exce√ß√µes de forma expl√≠cita, mas existem v√°rias formas pr√°ticas de descobrir: . | Consultar a ajuda do comando Usa Get-Help NomeDoComando -Full para ver detalhes. Alguns cmdlets indicam exce√ß√µes na documenta√ß√£o. | For√ßar erros e inspecionar Executa o comando de prop√≥sito com par√¢metros errados e captura o erro para ver o tipo de exce√ß√£o. Exemplo: . try { Get-Content -Path \"C:\\ficheiro_inexistente.txt\" -ErrorAction Stop } catch { $_.Exception.GetType().FullName } . Resultado t√≠pico: . System.Management.Automation.ItemNotFoundException . | Usar a vari√°vel $Error . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#3-trabalhar-com-diferentes-tipos-de-exce%C3%A7%C3%B5es",
    
    "relUrl": "/Modules/Module2/session3.html#3-trabalhar-com-diferentes-tipos-de-exce√ß√µes"
  },"144": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "4. A vari√°vel autom√°tica $Error",
    "content": "Se n√£o capturaste o erro num catch, podes sempre inspecionar o erro mais recente guardado em $Error[0]. | Array circular com hist√≥rico dos erros da sess√£o. | $Error[0] cont√©m o erro mais recente. Usa .Exception para o objeto completo. | $Error[0].Exception.GetType().FullName . Exemplo: . try { 1/0 } catch {} $ultimo = $Error[0] $ultimo.Exception.GetType().FullName # System.Management.Automation.RuntimeException . | Limpar hist√≥rico: Clear-Variable -Name Error ou $Error.Clear(). | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#4-a-vari%C3%A1vel-autom%C3%A1tica-error",
    
    "relUrl": "/Modules/Module2/session3.html#4-a-vari√°vel-autom√°tica-error"
  },"145": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "5. üß© Exerc√≠cio ‚Äì Criar um script com tratamento de erro",
    "content": "Desafio: Desenvolver um script interativo que leia um caminho de ficheiro do utilizador, tente abri-lo, e trate 3 cen√°rios de erro. ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#5--exerc%C3%ADcio--criar-um-script-com-tratamento-de-erro",
    
    "relUrl": "/Modules/Module2/session3.html#5--exerc√≠cio--criar-um-script-com-tratamento-de-erro"
  },"146": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "5.1. Requisitos",
    "content": ". | Solicitar caminho de ficheiro via Read-Host. | Usar try/catch para: . | FileNotFoundException ‚Äì perguntar se quer criar o ficheiro. | UnauthorizedAccessException ‚Äì aconselhar execu√ß√£o elevada ou outro local. | Qualquer outro erro ‚Äì registar em log erros.log. | . | Garantir que, no bloco finally, se escreva ‚ÄúOpera√ß√£o conclu√≠da.‚Äù. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#51-requisitos",
    
    "relUrl": "/Modules/Module2/session3.html#51-requisitos"
  },"147": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "5.2. Dicas",
    "content": ". | Lembra-te de -ErrorAction Stop em cmdlets como Get-Content. | Utiliza Start-Transcript para gravar logs detalhados. | Para debug, experimente lan√ßar erros manualmente: throw \"Erro de teste\". | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#52-dicas",
    
    "relUrl": "/Modules/Module2/session3.html#52-dicas"
  },"148": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "5.3. Crit√©rios de sucesso",
    "content": ". | Script n√£o termina abruptamente perante erros. | Mensagens amig√°veis e espec√≠ficas. | Log √© criado/atualizado conforme necess√°rio. | . Resposta $caminho = Read-Host \"Introduz o caminho do ficheiro\" try { Get-Content -Path $caminho -ErrorAction Stop Write-Output \"Ficheiro lido com sucesso.\" } catch [System.Management.Automation.ItemNotFoundException] { Write-Output \"Ficheiro n√£o encontrado. \" } catch [System.UnauthorizedAccessException] { Write-Output \"Permiss√µes insuficientes. Tenta correr como administrador ou escolhe outro local.\" } catch { $erro = $_.Exception.Message Add-Content -Path \"erros.log\" -Value \"Erro: $erro\" Write-Output \"Erro inesperado registado em erros.log\" } finally { Write-Output \"Opera√ß√£o conclu√≠da.\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#53-crit%C3%A9rios-de-sucesso",
    
    "relUrl": "/Modules/Module2/session3.html#53-crit√©rios-de-sucesso"
  },"149": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "5.4. Recursos adicionais",
    "content": ". | Get-Help about_Try_Catch_Finally | Get-Help about_CommonParameters (procure por -ErrorAction) | . ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html#54-recursos-adicionais",
    
    "relUrl": "/Modules/Module2/session3.html#54-recursos-adicionais"
  },"150": {
    "doc": "Session 3: Tratamento de Erros com try, catch e finally",
    "title": "Session 3: Tratamento de Erros com try, catch e finally",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/session3.html",
    
    "relUrl": "/Modules/Module2/session3.html"
  },"151": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "üß≠ Sess√£o 4: Manipula√ß√£o de Texto e Dados Simples",
    "content": ". üéØ Objetivo Aprender a trabalhar com texto (strings), n√∫meros, arrays simples e datas de forma pr√°tica, incluindo convers√µes b√°sicas de tipos de dados em PowerShell. | 1. Trabalhar com Strings . | 1.1. Concatenar Strings | 1.2. Alterar Mai√∫sculas e Min√∫sculas | 1.3. Dividir uma String (-split) | 1.4. Substituir Texto (-replace) | 1.5. Strings Multilinha e Caracteres Especiais | . | 2. Trabalhar com N√∫meros . | 2.1. Converter N√∫mero para Texto e Texto para N√∫mero | 2.2. üß© Exerc√≠cio Pr√°tico | . | 3. Trabalhar com Arrays Simples . | 3.1. Criar e Aceder a Elementos de um Array | 3.2. Contar Elementos | 3.3. Verificar a Exist√™ncia de um Elemento (-contains) | 3.4. üß© Exerc√≠cio Pr√°tico | . | 4. Trabalhar com Datas . | 4.1. Obter a Data Atual (Get-Date) | 4.2. Formatar Datas como Texto (.ToString()) | 4.3. Adicionar ou Subtrair Dias | 4.4. üß© Exerc√≠cio Pr√°tico | . | 5. Convers√µes de Tipos de Dados . | 5.1. Convers√µes Comuns | 5.2. Boas Pr√°ticas de Convers√£o | 5.3. üß© Exerc√≠cio Pr√°tico | . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html",
    
    "relUrl": "/Modules/Module2/session4.html"
  },"152": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "1. Trabalhar com Strings",
    "content": "Em PowerShell, strings s√£o simplesmente sequ√™ncias de caracteres (texto) que podemos manipular facilmente. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#1-trabalhar-com-strings",
    
    "relUrl": "/Modules/Module2/session4.html#1-trabalhar-com-strings"
  },"153": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "1.1. Concatenar Strings",
    "content": "Concatenar significa juntar duas ou mais strings numa s√≥. M√©todos comuns: . | Interpola√ß√£o (recomendado): . $nome = \"Nuno\" $mensagem = \"Ol√°, $nome!\" Write-Output $mensagem . | Concatena√ß√£o usando +: . $nome = \"Nuno\" $mensagem = \"Ol√°, \" + $nome Write-Output $mensagem . | . Nota: A interpola√ß√£o (usar $variavel dentro de \"texto\") √© mais simples e leg√≠vel. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#11-concatenar-strings",
    
    "relUrl": "/Modules/Module2/session4.html#11-concatenar-strings"
  },"154": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "1.2. Alterar Mai√∫sculas e Min√∫sculas",
    "content": "Podes facilmente converter uma string para mai√∫sculas ou min√∫sculas. | Para mai√∫sculas (ToUpper()): . $texto = \"PowerShell\" $texto.ToUpper() # Resulta em \"POWERSHELL\" . | Para min√∫sculas (ToLower()): . $texto = \"PowerShell\" $texto.ToLower() # Resulta em \"powershell\" . | . Estes m√©todos n√£o alteram a vari√°vel original, apenas devolvem a nova string. Se quiseres guardar o resultado, tens de atribuir a uma vari√°vel: . $texto = $texto.ToUpper() . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#12-alterar-mai%C3%BAsculas-e-min%C3%BAsculas",
    
    "relUrl": "/Modules/Module2/session4.html#12-alterar-mai√∫sculas-e-min√∫sculas"
  },"155": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "1.3. Dividir uma String (-split)",
    "content": "Usamos o operador -split para dividir uma string em v√°rias partes. | Exemplo b√°sico: . $frase = \"Ma√ß√£;Banana;Cereja\" $frutas = $frase -split \";\" $frutas . | . Resultado: . Ma√ß√£ Banana Cereja . O operador -split gera um array com as partes da string. $frutas[1] ser√° Banana . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#13-dividir-uma-string--split",
    
    "relUrl": "/Modules/Module2/session4.html#13-dividir-uma-string--split"
  },"156": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "1.4. Substituir Texto (-replace)",
    "content": "Para substituir texto numa string, usamos -replace. | Sintaxe: . $novaString = $textoAntigo -replace \"texto a procurar\", \"novo texto\" . | O operador -replace aplica-se √† string original e gera uma nova string como resultado. | O texto a procurar √© interpretado como uma express√£o regular simples. | Exemplo: . $frase = \"Ol√° Mundo!\" $novaFrase = $frase -replace \"Mundo\", \"PowerShell\" Write-Output $novaFrase . Resultado: . Ol√° PowerShell! . | . Exemplo com Express√£o Regular . Tamb√©m podes usar -replace para fazer substitui√ß√µes com base em padr√µes, n√£o apenas texto fixo. Exemplo: Substituir todos os n√∫meros por # . $texto = \"Encomenda 123 enviada no dia 24.\" $novoTexto = $texto -replace '\\d+', '#' Write-Output $novoTexto . Resultado: . Encomenda # enviada no dia #. Explica√ß√£o: . | \\d+ significa ‚Äúum ou mais d√≠gitos‚Äù. | O -replace procura todos os n√∫meros (123, 24) e substitui cada ocorr√™ncia por #. | Como o -replace interpreta o primeiro argumento como express√£o regular, padr√µes como \\d+ funcionam diretamente. | . Usa aspas simples '...' √† volta do padr√£o para evitar que o PowerShell tente expandir \\d . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#14-substituir-texto--replace",
    
    "relUrl": "/Modules/Module2/session4.html#14-substituir-texto--replace"
  },"157": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "1.5. Strings Multilinha e Caracteres Especiais",
    "content": "Multilinha . Para criar strings em v√°rias linhas, usa aspas duplas normais: . $texto = @\" Este √© um texto em v√°rias linhas no PowerShell. \"@ . | O @ √© necess√°rio para indicar ao PowerShell que se trata de uma here-string, n√£o de uma string normal. | Come√ßa com @\" e fecha com \"@ | Tudo entre estes delimitadores √© considerado uma √∫nica string. | . Caracteres especiais . Dentro de strings podes usar alguns s√≠mbolos especiais: . | S√≠mbolo | Significado | . | `n | Nova linha | . | `t | Tabula√ß√£o (tab) | . | `r | Retorno ao in√≠cio da linha | . Exemplo: . $mensagem = \"Linha 1`nLinha 2`nLinha 3\" Write-Output $mensagem . Resultado: . Linha 1 Linha 2 Linha 3 . O acento grave (`) √© usado para introduzir caracteres especiais. üîó Documenta√ß√£o oficial: about_Quoting_Rules . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#15-strings-multilinha-e-caracteres-especiais",
    
    "relUrl": "/Modules/Module2/session4.html#15-strings-multilinha-e-caracteres-especiais"
  },"158": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "2. Trabalhar com N√∫meros",
    "content": "Em PowerShell, j√° vimos como fazer opera√ß√µes aritm√©ticas b√°sicas (+, -, *, /, %) e como usar operadores de compara√ß√£o. Se quiseres rever, consulta: üîó Session 2 ‚Äî Operadores B√°sicos . Nesta sec√ß√£o, vamos focar-nos apenas em como converter entre n√∫meros e texto, algo muito √∫til em scripts. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#2-trabalhar-com-n%C3%BAmeros",
    
    "relUrl": "/Modules/Module2/session4.html#2-trabalhar-com-n√∫meros"
  },"159": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "2.1. Converter N√∫mero para Texto e Texto para N√∫mero",
    "content": "Em PowerShell, podes converter facilmente entre n√∫meros e texto. Converter N√∫mero para Texto . Para incluir n√∫meros em texto, podes: . | Usar interpola√ß√£o: . $idade = 25 $mensagem = \"Tenho $idade anos.\" Write-Output $mensagem . | Usar .ToString() para transformar explicitamente: . $numero = 123 $texto = $numero.ToString() Write-Output \"Texto: $texto\" . | .ToString() converte o n√∫mero para uma representa√ß√£o textual. Converter Texto para N√∫mero . Se receberes um valor como texto (ex: de um input), podes convert√™-lo para n√∫mero usando [int], [double] ou [decimal]: . $inputTexto = \"42\" $numero = [int]$inputTexto Write-Output ($numero + 10) # Soma 10 ao n√∫mero . ‚ö†Ô∏è Se o texto n√£o for um n√∫mero v√°lido, a convers√£o gera erro. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#21-converter-n%C3%BAmero-para-texto-e-texto-para-n%C3%BAmero",
    
    "relUrl": "/Modules/Module2/session4.html#21-converter-n√∫mero-para-texto-e-texto-para-n√∫mero"
  },"160": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "2.2. üß© Exerc√≠cio Pr√°tico",
    "content": "Cria um pequeno script que: . | Pede ao utilizador um n√∫mero (Read-Host). | Converte o input para inteiro. | Multiplica o n√∫mero por 2. | Mostra a mensagem: ‚ÄúO dobro de √© .\" | . üí° Dica: Usa [int] para a convers√£o e interpola√ß√£o de strings para construir a frase. üîó Documenta√ß√£o oficial: about_Data_Types . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#22--exerc%C3%ADcio-pr%C3%A1tico",
    
    "relUrl": "/Modules/Module2/session4.html#22--exerc√≠cio-pr√°tico"
  },"161": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "3. Trabalhar com Arrays Simples",
    "content": "J√° aprendemos como criar e aceder a arrays simples (@()) e como trabalhar com o seu conte√∫do. Se quiseres rever, consulta: üîó Session 2 ‚Äî Tipos Compostos . Nota: Tudo o que vamos ver neste ponto tamb√©m funciona com ArrayList (objetos criados com New-Object System.Collections.ArrayList). Agora vamos focar-nos em algumas opera√ß√µes pr√°ticas muito √∫teis: contar elementos e verificar se um valor existe num array. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#3-trabalhar-com-arrays-simples",
    
    "relUrl": "/Modules/Module2/session4.html#3-trabalhar-com-arrays-simples"
  },"162": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "3.1. Criar e Aceder a Elementos de um Array",
    "content": ". | Para criar um array: . $frutas = @(\"Ma√ß√£\", \"Banana\", \"Cereja\") . | Para aceder a um elemento (os √≠ndices come√ßam em 0): . $primeira = $frutas[0] Write-Output \"Primeira fruta: $primeira\" . | Para alterar um elemento: . $frutas[1] = \"Manga\" . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#31-criar-e-aceder-a-elementos-de-um-array",
    
    "relUrl": "/Modules/Module2/session4.html#31-criar-e-aceder-a-elementos-de-um-array"
  },"163": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "3.2. Contar Elementos",
    "content": "Para saber quantos elementos tem um array, usa .Count: . $total = $frutas.Count Write-Output \"Total de frutas: $total\" . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#32-contar-elementos",
    
    "relUrl": "/Modules/Module2/session4.html#32-contar-elementos"
  },"164": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "3.3. Verificar a Exist√™ncia de um Elemento (-contains)",
    "content": "Para verificar se um array cont√©m um determinado valor, usa o operador -contains: . $existe = $frutas -contains \"Cereja\" Write-Output \"Existe Cereja? $existe\" . | Se o valor existir, o resultado √© $true. | Se n√£o existir, o resultado √© $false. | . Aten√ß√£o: -contains √© case-insensitive por omiss√£o. Como fazer uma verifica√ß√£o Case-Sensitive? . O PowerShell n√£o tem um operador -ccontains. Se precisares de fazer uma verifica√ß√£o sens√≠vel a mai√∫sculas e min√∫sculas, deves usar Where-Object com -ceq: . $frutas = @(\"Ma√ß√£\", \"Banana\", \"Cereja\") $input = \"CEREJA\" $existe = $frutas | Where-Object { $_ -ceq $input } if ($existe) { Write-Output \"Encontrado!\" } else { Write-Output \"N√£o encontrado.\" } . O -ceq compara respeitando mai√∫sculas/min√∫sculas. Se n√£o houver correspond√™ncia exata, o resultado √© $null. Nota: Neste exemplo usamos Where-Object, um comando que permite filtrar elementos de uma lista. O s√≠mbolo $_ representa o elemento atual da lista. Vamos explorar isto com mais detalhe noutra sess√£o. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#33-verificar-a-exist%C3%AAncia-de-um-elemento--contains",
    
    "relUrl": "/Modules/Module2/session4.html#33-verificar-a-exist√™ncia-de-um-elemento--contains"
  },"165": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "3.4. üß© Exerc√≠cio Pr√°tico",
    "content": "Cria um pequeno script que: . | Cria um array com 5 cores: ‚ÄúVermelho‚Äù, ‚ÄúAzul‚Äù, ‚ÄúVerde‚Äù, ‚ÄúAmarelo‚Äù, ‚ÄúRoxo‚Äù. | Pede ao utilizador uma cor (Read-Host). | Verifica se a cor existe no array. | Mostra: . | Se existir: ‚ÄúCor encontrada!‚Äù | Se n√£o existir: ‚ÄúCor n√£o encontrada.‚Äù | . | . üí° Dica: Usa -contains para fazer a verifica√ß√£o. üîó Documenta√ß√£o oficial: about_Arrays . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#34--exerc%C3%ADcio-pr%C3%A1tico",
    
    "relUrl": "/Modules/Module2/session4.html#34--exerc√≠cio-pr√°tico"
  },"166": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "4. Trabalhar com Datas",
    "content": "J√° aprendemos que o comando Get-Date devolve a data e hora atuais como um objeto do tipo [datetime]. Se quiseres rever, consulta: üîó Session 2 ‚Äî Tipos Primitivos . Agora vamos explorar formas pr√°ticas de trabalhar com datas em PowerShell. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#4-trabalhar-com-datas",
    
    "relUrl": "/Modules/Module2/session4.html#4-trabalhar-com-datas"
  },"167": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "4.1. Obter a Data Atual (Get-Date)",
    "content": "Para obter a data e hora atuais: . $agora = Get-Date Write-Output $agora . O resultado √© um objeto completo que cont√©m: . | Data | Hora | Dia da semana | Fuso hor√°rio | Entre outras informa√ß√µes | . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#41-obter-a-data-atual-get-date",
    
    "relUrl": "/Modules/Module2/session4.html#41-obter-a-data-atual-get-date"
  },"168": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "4.2. Formatar Datas como Texto (.ToString())",
    "content": "Podes converter uma data em texto usando o m√©todo .ToString(), especificando o formato que queres. Exemplos: . | Formato completo: . $agora = Get-Date $texto = $agora.ToString() Write-Output $texto . | Formatar s√≥ a data (dia/m√™s/ano): . $dataSimples = (Get-Date).ToString(\"dd/MM/yyyy\") Write-Output $dataSimples . | Formatar data e hora: . $dataHora = (Get-Date).ToString(\"dd-MM-yyyy HH:mm\") Write-Output $dataHora . | . üìã Principais padr√µes de formata√ß√£o . | C√≥digo | Significado | Exemplo (com 5 de abril de 2025, 14h30) | . | dd | Dia com dois d√≠gitos | 05 | . | d | Dia sem zero inicial | 5 | . | MM | M√™s com dois d√≠gitos | 04 | . | M | M√™s sem zero inicial | 4 | . | yyyy | Ano com quatro d√≠gitos | 2025 | . | yy | Ano com dois d√≠gitos | 25 | . | HH | Hora (24h) com dois d√≠gitos | 14 | . | hh | Hora (12h) com dois d√≠gitos | 02 | . | mm | Minutos com dois d√≠gitos | 30 | . | ss | Segundos com dois d√≠gitos | 00 | . Para mais exemplos e c√≥digos dispon√≠veis, consulta: üîó Custom Date and Time Format Strings ‚Äî Documenta√ß√£o Oficial (.NET) . üåç Usar Cultura (Globalization) para aplicar formatos regionais . O m√©todo .ToString() pode receber um segundo argumento que define a cultura (formato regional) da data, incluindo nomes de meses e dias em portugu√™s. Para isso, usamos [System.Globalization.CultureInfo]. Exemplo: Formatar a data com nomes em portugu√™s (Portugal) . $pt = [System.Globalization.CultureInfo]::GetCultureInfo(\"pt-PT\") $data = Get-Date $texto = $data.ToString(\"dddd, dd 'de' MMMM 'de' yyyy\", $pt) Write-Output $texto . Resultado esperado: . segunda-feira, 21 de abril de 2025 . ‚ÑπÔ∏è Isto √© √∫til quando queres apresentar a data com o nome do m√™s ou do dia da semana em portugu√™s, independentemente da configura√ß√£o regional do sistema. Exemplos de outras culturas poss√≠veis: . | C√≥digo | Localiza√ß√£o | . | pt-PT | Portugu√™s (Portugal) | . | en-US | Ingl√™s (Estados Unidos) | . | fr-FR | Franc√™s (Fran√ßa) | . | de-DE | Alem√£o (Alemanha) | . Dica: . Ao trabalhar com utilizadores de diferentes pa√≠ses, √© boa pr√°tica indicar explicitamente a cultura quando formatas datas com .ToString() ‚Äî especialmente se usas dddd ou MMMM. üîó Documenta√ß√£o: CultureInfo (Microsoft) . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#42-formatar-datas-como-texto-tostring",
    
    "relUrl": "/Modules/Module2/session4.html#42-formatar-datas-como-texto-tostring"
  },"169": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "4.3. Adicionar ou Subtrair Dias",
    "content": "O PowerShell permite manipular datas facilmente. Adicionar dias: . $amanha = (Get-Date).AddDays(1) Write-Output \"Amanh√£: $amanha\" . Subtrair dias: . $ontem = (Get-Date).AddDays(-1) Write-Output \"Ontem: $ontem\" . | .AddDays(1) ‚ûî adiciona 1 dia. | .AddDays(-1) ‚ûî subtrai 1 dia. | . Existem outros m√©todos como .AddHours(), .AddMinutes(), etc., que funcionam de forma semelhante. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#43-adicionar-ou-subtrair-dias",
    
    "relUrl": "/Modules/Module2/session4.html#43-adicionar-ou-subtrair-dias"
  },"170": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "4.4. üß© Exerc√≠cio Pr√°tico",
    "content": "Cria um pequeno script que: . | Obt√©m a data atual. | Mostra a data atual no formato ‚Äúdd-MM-yyyy‚Äù. | Mostra a data de aqui a 7 dias tamb√©m no mesmo formato. | . üí° Dica: Usa .AddDays() e .ToString(). üîó Documenta√ß√£o oficial: about_Get-Date . üîó Documenta√ß√£o oficial: Custom Date and Time Format Strings (.NET) . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#44--exerc%C3%ADcio-pr%C3%A1tico",
    
    "relUrl": "/Modules/Module2/session4.html#44--exerc√≠cio-pr√°tico"
  },"171": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "5. Convers√µes de Tipos de Dados",
    "content": "Em PowerShell, podes converter valores de um tipo para outro de forma expl√≠cita. J√° aprendemos que √© poss√≠vel usar [tipo]$variavel para for√ßar o tipo de uma vari√°vel. Agora vamos focar-nos nas convers√µes mais pr√°ticas para o dia a dia. ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#5-convers%C3%B5es-de-tipos-de-dados",
    
    "relUrl": "/Modules/Module2/session4.html#5-convers√µes-de-tipos-de-dados"
  },"172": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "5.1. Convers√µes Comuns",
    "content": "Converter String para N√∫mero . Se tens um n√∫mero em formato de texto, podes convert√™-lo para [int], [double], ou [decimal]. Exemplo: . $texto = \"42\" $numero = [int]$texto Write-Output ($numero + 10) . Se o texto n√£o representar um n√∫mero v√°lido, a convers√£o gera um erro. Converter N√∫mero para String . Para transformar um n√∫mero em texto: . | Usar interpola√ß√£o: . $numero = 123 $texto = \"$numero\" Write-Output \"Texto: $texto\" . | Ou usar .ToString(): . $numero = 123 $texto = $numero.ToString() Write-Output \"Texto: $texto\" . | . Converter String para Data . Se tens uma data como texto, podes convert√™-la diretamente para [datetime]: . $texto = \"2025-04-21\" $data = [datetime]$texto Write-Output $data . O formato do texto deve ser compat√≠vel com os formatos que o PowerShell consegue interpretar automaticamente. üìã Formatos mais comuns aceites . | Exemplo de Texto | Descri√ß√£o | . | 2025-04-21 | Ano-M√™s-Dia (ISO 8601) | . | 21/04/2025 | Dia/M√™s/Ano (regional PT-PT) | . | 04/21/2025 | M√™s/Dia/Ano (regional US) | . | April 21, 2025 | Nome do m√™s em ingl√™s | . | 21-Apr-2025 | Dia-Abrevia√ß√£oM√™s-Ano | . | 2025-04-21T14:30:00 | ISO 8601 com hora | . | 21-04-2025 14:30 | Dia-M√™s-Ano Hora:Minuto | . | Monday, April 21, 2025 | Dia da semana, M√™s, Dia, Ano | . Dica pr√°tica: Para garantir m√°xima compatibilidade, prefere sempre usar o formato ISO 8601 (yyyy-MM-dd) ao pedir datas em input ou ao fazer convers√µes no PowerShell. Exemplo recomendado: \"2025-04-21\" . üîó Documenta√ß√£o oficial: about_DateTime (PowerShell) . üîó Custom Date and Time Format Strings (.NET) . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#51-convers%C3%B5es-comuns",
    
    "relUrl": "/Modules/Module2/session4.html#51-convers√µes-comuns"
  },"173": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "5.2. Boas Pr√°ticas de Convers√£o",
    "content": ". | Confirma sempre o tipo antes de converter Usa .GetType().Name ou operadores -is para verificar se precisas mesmo de converter. | Garante que o valor √© compat√≠vel S√≥ tentes converter se souberes que o texto representa um n√∫mero ou uma data v√°lida. | Prefere convers√£o expl√≠cita a convers√£o autom√°tica Assim o comportamento do script √© mais previs√≠vel. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#52-boas-pr%C3%A1ticas-de-convers%C3%A3o",
    
    "relUrl": "/Modules/Module2/session4.html#52-boas-pr√°ticas-de-convers√£o"
  },"174": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "5.3. üß© Exerc√≠cio Pr√°tico",
    "content": "Cria um pequeno script que: . | Pede ao utilizador para introduzir quantos dias quer adicionar √† data atual (Read-Host). | Converte o input para inteiro. | Calcula a nova data. | Mostra a nova data no formato ‚Äúdddd, dd MMMM yyyy‚Äù (exemplo: ‚Äúsexta-feira, 02 maio 2025‚Äù). | . üí° Dicas: . | Usa [int] para converter o input. | Usa .AddDays() para calcular a nova data. | Usa .ToString() para formatar. | . üîó Documenta√ß√£o oficial: about_Data_Types . ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html#53--exerc%C3%ADcio-pr%C3%A1tico",
    
    "relUrl": "/Modules/Module2/session4.html#53--exerc√≠cio-pr√°tico"
  },"175": {
    "doc": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "title": "Session 4: Manipula√ß√£o de Texto e Dados Simples",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/session4.html",
    
    "relUrl": "/Modules/Module2/session4.html"
  },"176": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "üß≠ Sess√£o 5: Estruturas Condicionais",
    "content": ". üéØ Objetivo Aprender a criar decis√µes l√≥gicas em scripts usando if, elseif, else, operadores de compara√ß√£o e operadores l√≥gicos. | 1. Introdu√ß√£o √†s Estruturas Condicionais . | üí¨ Pensar como ‚ÄúSe‚Ä¶ ent√£o‚Ä¶‚Äù | . | 2. Sintaxe b√°sica do if | 3. Operadores de compara√ß√£o e outros operadores (revis√£o) . | 3.1. Operadores de compara√ß√£o | 3.2. Operadores l√≥gicos | 3.3. Operadores de tipo | 3.4. Operadores de correspond√™ncia de padr√µes | . | 4. Inputs e Express√µes Regulares . | 4.1. Pedir input ao utilizador (Read-Host) | 4.2. Introdu√ß√£o √†s Express√µes Regulares (-match) . | O que √© uma express√£o regular? | Regras b√°sicas de express√µes regulares | Como construir uma express√£o regular simples | Exemplo com -match (ignora mai√∫sculas/min√∫sculas) | Exemplo com -cmatch (distingue mai√∫sculas/min√∫sculas) | Exemplo com modificador inline (?-i) (distingue mai√∫sculas/min√∫sculas) | Sobre o uso de ^ e $ | E se quiseres encontrar todas as ocorr√™ncias? | Dicas para come√ßar | Onde praticar Express√µes Regulares? | . | 4.3. üß© Exerc√≠cios pr√°ticos ‚Äì Inputs e Compara√ß√µes (S√≥ if) . | üß© Exerc√≠cio 1 ‚Äì Valida√ß√£o de nome | üß© Exerc√≠cio 2 ‚Äì Valida√ß√£o de n√∫mero | . | . | 5. Estruturas Condicionais: else e elseif . | 5.1. O comando else . | Sintaxe: | Exemplo: | . | 5.2. O comando elseif . | Sintaxe: | Exemplo: | . | 5.3. Dicas pr√°ticas | 5.4. üß© Exerc√≠cios pr√°ticos ‚Äì if, else, elseif . | üß© Exerc√≠cio 1 ‚Äì Maior ou menor de idade | üß© Exerc√≠cio 2 ‚Äì Classifica√ß√£o de notas | üß© Exerc√≠cio 3 ‚Äì Verificar se o ano √© bissexto | üß© Exerc√≠cio 4 ‚Äì Contar processos ativos | üß© Exerc√≠cio 5 ‚Äì Valida√ß√£o de palavra-passe | . | . | 6. Resumo Final e Boas Pr√°ticas . | 6.1. O que aprendeste nesta sess√£o | 6.2. Boas pr√°ticas ao usar if, else, elseif | . | 7. Estruturas switch . | 7.1. Sintaxe b√°sica do switch | 7.2. switch -Wildcard | 7.3. switch -Regex . | Express√µes l√≥gicas dentro de um switch | . | 7.4. üß© Exerc√≠cios pr√°ticos ‚Äì switch . | üß© Exerc√≠cio ‚Äì Classificar frutas | üß© Exerc√≠cio ‚Äì Validar entradas usando padr√µes | üß© Exerc√≠cio ‚Äì Categorizar idade | Resumo ‚Äì Estruturas switch | . | . | . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html",
    
    "relUrl": "/Modules/Module2/session5.html"
  },"177": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "1. Introdu√ß√£o √†s Estruturas Condicionais",
    "content": "Num script, as estruturas condicionais permitem tomar decis√µes com base em valores ou situa√ß√µes. Em vez de o c√≥digo correr sempre da mesma forma, conseguimos alterar o comportamento dependendo de condi√ß√µes espec√≠ficas. Por exemplo: . | Se a idade do utilizador for maior ou igual a 18, pode votar. | Se o ficheiro for .csv, deve ser processado de forma diferente de um .txt. | Se o login falhar tr√™s vezes, o acesso √© bloqueado. | . üí¨ Pensar como ‚ÄúSe‚Ä¶ ent√£o‚Ä¶‚Äù . Ao programar, estamos constantemente a decidir: . ‚ÄúSe isto for verdade, ent√£o faz aquilo.‚Äù . O PowerShell usa o comando if para representar estas decis√µes. Exemplo visual simples: . $idade = 20 if ($idade -ge 18) { Write-Output \"Podes votar.\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#1-introdu%C3%A7%C3%A3o-%C3%A0s-estruturas-condicionais",
    
    "relUrl": "/Modules/Module2/session5.html#1-introdu√ß√£o-√†s-estruturas-condicionais"
  },"178": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "2. Sintaxe b√°sica do if",
    "content": "O comando if permite que um bloco de c√≥digo seja executado apenas quando uma determinada condi√ß√£o √© verdadeira. A estrutura b√°sica √©: . if (&lt;condi√ß√£o&gt;) { # C√≥digo a executar se a condi√ß√£o for verdadeira } . | A condi√ß√£o tem de resultar em $true ou $false. | As chavetas {} s√£o obrigat√≥rias, mesmo que o bloco tenha apenas uma linha. | . Exemplo simples: . $temperatura = 30 if ($temperatura -gt 25) { Write-Output \"Est√° calor hoje!\" } . Neste exemplo: . | A condi√ß√£o $temperatura -gt 25 avalia se a temperatura √© superior a 25. | Se for verdadeira, a mensagem ‚ÄúEst√° calor hoje!‚Äù ser√° mostrada. | . Notas importantes: . | Podes usar qualquer express√£o que devolva $true ou $false. | O c√≥digo dentro do if s√≥ √© executado se a condi√ß√£o for verdadeira. | Se for falsa, o PowerShell simplesmente ignora o bloco de chavetas {}. | . üîó Documenta√ß√£o oficial: about_If . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#2-sintaxe-b%C3%A1sica-do-if",
    
    "relUrl": "/Modules/Module2/session5.html#2-sintaxe-b√°sica-do-if"
  },"179": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "3. Operadores de compara√ß√£o e outros operadores (revis√£o)",
    "content": "Antes de criarmos decis√µes nos nossos scripts, √© importante dominar os principais operadores de compara√ß√£o, l√≥gicos e de verifica√ß√£o de dados. ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#3-operadores-de-compara%C3%A7%C3%A3o-e-outros-operadores-revis%C3%A3o",
    
    "relUrl": "/Modules/Module2/session5.html#3-operadores-de-compara√ß√£o-e-outros-operadores-revis√£o"
  },"180": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "3.1. Operadores de compara√ß√£o",
    "content": "Os operadores de compara√ß√£o devolvem sempre $true ou $false e permitem comparar n√∫meros, texto, datas ou outros objetos. | Operador | Significado | Case-sensitive | Exemplo | Resultado | . | -eq | Igual | N√£o | \"ana\" -eq \"Ana\" | $true | . | -ceq | Igual | Sim | \"ana\" -ceq \"Ana\" | $false | . | -ne | Diferente | N√£o | 5 -ne 3 | $true | . | -cne | Diferente | Sim | \"a\" -cne \"A\" | $true | . | -gt | Maior que | N√£o | 7 -gt 4 | $true | . | -cgt | Maior que | Sim | (compara√ß√£o de strings) | Depende | . | -lt | Menor que | N√£o | 3 -lt 8 | $true | . | -clt | Menor que | Sim | (compara√ß√£o de strings) | Depende | . | -ge | Maior ou igual | N√£o | 5 -ge 5 | $true | . | -cge | Maior ou igual | Sim | (compara√ß√£o de strings) | Depende | . | -le | Menor ou igual | N√£o | 2 -le 3 | $true | . | -cle | Menor ou igual | Sim | (compara√ß√£o de strings) | Depende | . ‚ö†Ô∏è Nota sobre compara√ß√£o de texto . Quando comparas strings com operadores como -gt, -lt, -ge, -le, o PowerShell faz a compara√ß√£o por ordem alfab√©tica (lexicogr√°fica). | A compara√ß√£o √© case-insensitive por omiss√£o. | \"Ana\" √© considerado igual a \"ana\" para efeitos de compara√ß√£o. | Para distinguir mai√∫sculas de min√∫sculas, usa operadores como -cgt, -clt, -ceq. | . Exemplo: . \"zebra\" -gt \"abelha\" # $true \"Ana\" -ceq \"ana\" # $false . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#31-operadores-de-compara%C3%A7%C3%A3o",
    
    "relUrl": "/Modules/Module2/session5.html#31-operadores-de-compara√ß√£o"
  },"181": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "3.2. Operadores l√≥gicos",
    "content": "Permitem combinar v√°rias condi√ß√µes, tornando as decis√µes mais poderosas. | Operador | Descri√ß√£o | Exemplo | Resultado | . | -and | E l√≥gico | $x -gt 5 -and $y -lt 10 | $true se ambas forem verdadeiras | . | -or | OU l√≥gico | $x -eq 10 -or $y -eq 20 | $true se uma for verdadeira | . | -not | Nega√ß√£o l√≥gica | -not ($x -eq 5) | Inverte o resultado | . Exemplo pr√°tico: . $idade = 25 $nacionalidade = \"Portugal\" if (($idade -ge 18) -and ($nacionalidade -eq \"Portugal\")) { Write-Output \"Autorizado a votar.\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#32-operadores-l%C3%B3gicos",
    
    "relUrl": "/Modules/Module2/session5.html#32-operadores-l√≥gicos"
  },"182": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "3.3. Operadores de tipo",
    "content": "Permitem verificar se um valor √© de um determinado tipo de dados. | Operador | Descri√ß√£o | Exemplo | Resultado | . | -is | Testa se √© de um tipo | $var -is [int] | $true ou $false | . Exemplo pr√°tico: . $numero = 42 if ($numero -is [int]) { Write-Output \"√â um n√∫mero inteiro.\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#33-operadores-de-tipo",
    
    "relUrl": "/Modules/Module2/session5.html#33-operadores-de-tipo"
  },"183": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "3.4. Operadores de correspond√™ncia de padr√µes",
    "content": "Usados para trabalhar com texto baseado em padr√µes ou express√µes regulares. | Operador | Descri√ß√£o | Exemplo | Resultado | . | -like | Corresponde a padr√£o (wildcards) | \"Ana\" -like \"A*\" | $true | . | -match | Corresponde a express√£o regular | \"ana123\" -match \"\\d{3}\" | $true | . | -contains | Verifica se uma cole√ß√£o cont√©m um valor | @(1,2,3) -contains 2 | $true | . | -in | Verifica se um valor est√° presente numa cole√ß√£o | \"banana\" -in $frutas | $true | . Exemplo pr√°tico: . $nome = \"Ana Clara\" if ($nome -like \"Ana*\") { Write-Output \"O nome come√ßa por Ana.\" } . üîó Documenta√ß√£o oficial: about_Comparison_Operators üîó Documenta√ß√£o oficial: about_Logical_Operators üîó Documenta√ß√£o oficial: about_Type_Operators üîó Documenta√ß√£o oficial: about_Operators . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#34-operadores-de-correspond%C3%AAncia-de-padr%C3%B5es",
    
    "relUrl": "/Modules/Module2/session5.html#34-operadores-de-correspond√™ncia-de-padr√µes"
  },"184": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "4. Inputs e Express√µes Regulares",
    "content": "Antes de avan√ßarmos no controlo de fluxos (if, else, elseif), vamos fazer uma pequena pausa estrat√©gica. Nesta sec√ß√£o, vais aprender duas ferramentas fundamentais para tornar os teus scripts mais din√¢micos: . | Como pedir informa√ß√µes ao utilizador (Read-Host). | Como validar padr√µes de texto usando express√µes regulares (-match). | . Estas t√©cnicas v√£o ser muito √∫teis para os exerc√≠cios pr√°ticos que v√™m a seguir e para criar scripts mais interativos e inteligentes. ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#4-inputs-e-express%C3%B5es-regulares",
    
    "relUrl": "/Modules/Module2/session5.html#4-inputs-e-express√µes-regulares"
  },"185": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "4.1. Pedir input ao utilizador (Read-Host)",
    "content": "Em scripts mais din√¢micos, muitas vezes queremos perguntar algo ao utilizador e reagir de acordo com a resposta. Em PowerShell usamos o comando Read-Host. Sintaxe b√°sica: . $variavel = Read-Host \"Mensagem para o utilizador\" . Exemplo: . $nome = Read-Host \"Qual √© o teu nome?\" Write-Output \"Ol√°, $nome!\" . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#41-pedir-input-ao-utilizador-read-host",
    
    "relUrl": "/Modules/Module2/session5.html#41-pedir-input-ao-utilizador-read-host"
  },"186": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "4.2. Introdu√ß√£o √†s Express√µes Regulares (-match)",
    "content": "As express√µes regulares (ou regex) s√£o uma maneira de procurar padr√µes em texto. S√£o muito √∫teis para validar inputs, procurar formatos espec√≠ficos, extrair partes de texto, entre outros. O que √© uma express√£o regular? . √â uma sequ√™ncia de s√≠mbolos especiais que define um padr√£o. Por exemplo: . | \"^\\d+$\" significa ‚Äúum ou mais d√≠gitos‚Äù (n√∫meros inteiros). | \"^A.*\" significa ‚Äúcome√ßa por A‚Äù. | \"^\\w+@\\w+\\.\\w+$\" pode validar emails simples. | . Em PowerShell, usamos o operador -match para aplicar express√µes regulares. Por padr√£o, este operador √© case-insensitive (ignora mai√∫sculas e min√∫sculas). Se quiseres uma correspond√™ncia sens√≠vel a mai√∫sculas/min√∫sculas, usa o operador -cmatch. Tamb√©m podes usar o modificador inline (?-i) dentro da regex, por exemplo: -match \"(?-i)^[A-Z]\". Regras b√°sicas de express√µes regulares . | S√≠mbolo | Significado | Exemplo | . | . | Qualquer caractere | \"a\", \"1\", \"%\" | . | * | Zero ou mais repeti√ß√µes | \"ab*\" ‚Üí \"a\", \"ab\", \"abb\" | . | + | Uma ou mais repeti√ß√µes | \"ab+\" ‚Üí \"ab\", \"abb\", n√£o \"a\" | . | ? | Zero ou uma repeti√ß√£o | \"ab?\" ‚Üí \"a\", \"ab\" | . | \\d | Um d√≠gito (0‚Äì9) | \"123\" | . | \\w | Letra, n√∫mero ou underscore | \"abc_123\" | . | ^ | Come√ßo do texto | \"^Ana\" ‚Üí come√ßa por Ana | . | $ | Fim do texto | \"ana$\" ‚Üí termina em ana | . | (?-i) | Torna a regex case-sensitive | \"Ana\" -match \"(?-i)^A\" | . Como construir uma express√£o regular simples . Agora que j√° conheces os s√≠mbolos b√°sicos, vamos ver como os combinar para criar padr√µes mais √∫teis. 1. Pensar no que queremos detetar . Antes de escrever a regex, faz estas perguntas: . | A palavra tem letras? N√∫meros? Ambos? | H√° limite no n√∫mero de caracteres? | Tem de come√ßar ou terminar de uma certa forma? | . 2. Combinando os s√≠mbolos . | Para letras, n√∫meros e underscores usamos \\w. | Para n√∫meros apenas, usamos \\d. | Para especificar quantidade, usamos +, *, {n}, {n,m}, etc. | Para indicar in√≠cio ou fim do texto, usamos ^ e $. | . Exemplo com -match (ignora mai√∫sculas/min√∫sculas) . | Pede ao utilizador um nome. | Verifica se come√ßa por ‚Äúa‚Äù ou ‚ÄúA‚Äù. | Mostra uma mensagem se corresponder. $nome = Read-Host \"Introduz o teu nome\" if ($nome -match \"^a\") { Write-Output \"mai√∫sculas/min√∫sculas\" } . | . Exemplo com -cmatch (distingue mai√∫sculas/min√∫sculas) . | Pede ao utilizador um nome. | Verifica se come√ßa por ‚ÄúA‚Äù mai√∫sculo exatamente. | Mostra uma mensagem se corresponder. $nome = Read-Host \"Introduz o teu nome\" if ($nome -cmatch \"^A\") { Write-Output \"Come√ßa por A mai√∫sculo (case-sensitive)\" } . | . Exemplo com modificador inline (?-i) (distingue mai√∫sculas/min√∫sculas) . | Pede ao utilizador um nome. | Verifica se come√ßa por ‚ÄúA‚Äù mai√∫sculo exatamente. | Mostra uma mensagem se corresponder. $nome = Read-Host \"Introduz o teu nome\" if ($nome -match \"(?-i)^A\") { Write-Output \"Come√ßa por A mai√∫sculo (case-sensitive)\" } . | . Sobre o uso de ^ e $ . | O s√≠mbolo ^ indica o in√≠cio da string. | O s√≠mbolo $ indica o fim da string. | . Se quiseres apenas verificar se existe um padr√£o em qualquer parte da string, n√£o precisas de usar ^ nem $. Exemplo: . \"Ficheiro123.txt\" -match \"\\d+\" # True (encontra o \"123\") \"Ficheiro123.txt\" -match \"^\\d+$\" # False (n√£o √© s√≥ um n√∫mero) . E se quiseres encontrar todas as ocorr√™ncias? . O operador -match apenas devolve: . | $true se encontrar uma correspond√™ncia, | E guarda apenas a primeira em $matches[0]. | . Se precisares de todas as ocorr√™ncias (global match), usa: . $resultado = [regex]::Matches($texto, $padr√£o) . Exemplo: . $texto = \"Ana1, Teste9, _valor2\" $regex = \"\\w+\\d\" $matches = [regex]::Matches($texto, $regex) foreach ($m in $matches) { Write-Output $m.Value } . Isto vai devolver todas as palavras que terminam em n√∫mero. üí° Dica: No site regex101.com, ativa a op√ß√£o g (global) para veres todos os matches ‚Äî por defeito, s√≥ mostra o primeiro. 3. Exemplos pr√°ticos . Detectar palavras como egyt1, _sdag4rg, Ana . Padr√£o: ‚ÄúUm ou mais caracteres que sejam letras, n√∫meros ou underscore‚Äù . Express√£o regular: . ^\\w+$ . Explica√ß√£o: . | ^ ‚ûî in√≠cio do texto | \\w+ ‚ûî uma ou mais letras, n√∫meros ou underscores | $ ‚ûî fim do texto | . Detectar palavras que terminam em n√∫mero . Exemplo: Ana1, Teste9, _valor2 . Express√£o regular: . ^\\w+\\d$ . Explica√ß√£o: . | ^\\w+ ‚ûî come√ßa com uma ou mais letras/n√∫meros/underscores | \\d ‚ûî termina com um √∫nico d√≠gito | $ ‚ûî fim do texto | . Detectar uma palavra com exatamente 4 letras seguidas de 1 n√∫mero . Exemplo: abcd1, test9 . Express√£o regular: . ^\\w{4}\\d$ . Explica√ß√£o: . | ^\\w{4} ‚ûî quatro caracteres que podem ser letras, n√∫meros ou underscores | \\d ‚ûî um √∫nico d√≠gito | $ ‚ûî fim do texto | . Dicas para come√ßar . | Experimenta padr√µes simples primeiro. | Testa exemplos reais no PowerShell com -match. | Vai adicionando complexidade aos poucos. | . Onde praticar Express√µes Regulares? . Podes aprender e construir express√µes regulares utilizando a documenta√ß√£o oficial da Microsoft: . üîó Quick Reference ‚Äì Regular Expression Language (Microsoft) üîó about_Comparison_Operators (PowerShell) . Podes testar express√µes regulares compat√≠veis com PowerShell no site regex101.com, escolhendo a op√ß√£o .NET 7.0 (C#) como linguagem. ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#42-introdu%C3%A7%C3%A3o-%C3%A0s-express%C3%B5es-regulares--match",
    
    "relUrl": "/Modules/Module2/session5.html#42-introdu√ß√£o-√†s-express√µes-regulares--match"
  },"187": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "4.3. üß© Exerc√≠cios pr√°ticos ‚Äì Inputs e Compara√ß√µes (S√≥ if)",
    "content": "Antes de avan√ßarmos para else, vamos praticar apenas com if. üß© Exerc√≠cio 1 ‚Äì Valida√ß√£o de nome . | Pede ao utilizador para introduzir um nome (Read-Host). | Verifica se o nome come√ßa pela letra ‚ÄúA‚Äù (mai√∫scula ou min√∫scula). | Se come√ßar por A, mostra a mensagem ‚ÄúNome come√ßa por A‚Äù. Podes usar o operador -match com o padr√£o (?i)^a. | . Resposta $nome = Read-Host \"Introduz o teu nome\" if ($nome -match '^(?i)a') { Write-Output \"Nome come√ßa por A\" } . üß© Exerc√≠cio 2 ‚Äì Valida√ß√£o de n√∫mero . | Pede ao utilizador para introduzir um n√∫mero (Read-Host). | Confirma se √© um n√∫mero usando a express√£o regular ^\\d+$. | Se for n√∫mero, mostra ‚ÄúN√∫mero v√°lido‚Äù. | . Resposta $valor = Read-Host \"Introduz um n√∫mero\" if ($valor -match '^\\d+$') { Write-Output \"N√∫mero v√°lido\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#43--exerc%C3%ADcios-pr%C3%A1ticos--inputs-e-compara%C3%A7%C3%B5es-s%C3%B3-if",
    
    "relUrl": "/Modules/Module2/session5.html#43--exerc√≠cios-pr√°ticos--inputs-e-compara√ß√µes-s√≥-if"
  },"188": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "5. Estruturas Condicionais: else e elseif",
    "content": "At√© agora j√° vimos como usar o if para executar c√≥digo quando uma condi√ß√£o √© verdadeira. Agora vamos aprender a tratar: . | o que acontece se a condi√ß√£o for falsa (else); | como testar v√°rias condi√ß√µes diferentes (elseif). | . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#5-estruturas-condicionais-else-e-elseif",
    
    "relUrl": "/Modules/Module2/session5.html#5-estruturas-condicionais-else-e-elseif"
  },"189": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "5.1. O comando else",
    "content": "O else permite executar um bloco de c√≥digo alternativo caso a condi√ß√£o do if seja falsa ($false). Sintaxe: . if (condi√ß√£o) { # C√≥digo se a condi√ß√£o for verdadeira } else { # C√≥digo se a condi√ß√£o for falsa } . Exemplo: . $idade = 16 if ($idade -ge 18) { Write-Output \"√âs maior de idade.\" } else { Write-Output \"√âs menor de idade.\" } . Neste caso, como $idade √© 16, a condi√ß√£o √© falsa e executa-se o bloco do else. ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#51-o-comando-else",
    
    "relUrl": "/Modules/Module2/session5.html#51-o-comando-else"
  },"190": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "5.2. O comando elseif",
    "content": "O elseif permite testar v√°rias condi√ß√µes diferentes, uma a seguir √† outra. O PowerShell avalia cada condi√ß√£o pela ordem em que aparecem e executa o primeiro bloco onde a condi√ß√£o for verdadeira. Sintaxe: . if (condi√ß√£o1) { # C√≥digo se a condi√ß√£o1 for verdadeira } elseif (condi√ß√£o2) { # C√≥digo se a condi√ß√£o2 for verdadeira } else { # C√≥digo se nenhuma condi√ß√£o anterior for verdadeira } . Exemplo: . $nota = 15 if ($nota -ge 18) { Write-Output \"Excelente!\" } elseif ($nota -ge 14) { Write-Output \"Bom!\" } elseif ($nota -ge 10) { Write-Output \"Suficiente.\" } else { Write-Output \"Reprovado.\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#52-o-comando-elseif",
    
    "relUrl": "/Modules/Module2/session5.html#52-o-comando-elseif"
  },"191": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "5.3. Dicas pr√°ticas",
    "content": ". | Usa par√™nteses () √† volta da condi√ß√£o. | Usa chavetas {} sempre, mesmo para blocos de uma s√≥ linha. | Mant√©m o c√≥digo indentado para melhor leitura. | Come√ßa sempre pelos casos mais prov√°veis ou mais importantes no if. | Se houver apenas dois caminhos poss√≠veis, usa if/else. | Se houver v√°rios caminhos poss√≠veis, usa if/elseif/else. | . üîó Documenta√ß√£o oficial: about_If . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#53-dicas-pr%C3%A1ticas",
    
    "relUrl": "/Modules/Module2/session5.html#53-dicas-pr√°ticas"
  },"192": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "5.4. üß© Exerc√≠cios pr√°ticos ‚Äì if, else, elseif",
    "content": ". üß© Exerc√≠cio 1 ‚Äì Maior ou menor de idade . | Pede ao utilizador a idade (Read-Host). | Se a idade for maior ou igual a 18, mostra ‚Äú√âs maior de idade.‚Äù | Caso contr√°rio, mostra ‚Äú√âs menor de idade.‚Äù | . Resposta $idade = Read-Host \"Introduz a tua idade\" if ($idade -ge 18) { Write-Output \"√âs maior de idade.\" } else { Write-Output \"√âs menor de idade.\" } . üß© Exerc√≠cio 2 ‚Äì Classifica√ß√£o de notas . | Pede ao utilizador uma nota de 0 a 20 (Read-Host). | Mostra: . | Se a nota for maior ou igual a 18 ‚Üí ‚ÄúExcelente!‚Äù | Se for maior ou igual a 14 ‚Üí ‚ÄúBom!‚Äù | Se for maior ou igual a 10 ‚Üí ‚ÄúSuficiente.‚Äù | Caso contr√°rio ‚Üí ‚ÄúReprovado.‚Äù | . | . Resposta $nota = Read-Host \"Introduz a tua nota\" if ($nota -ge 18) { Write-Output \"Excelente!\" } elseif ($nota -ge 14) { Write-Output \"Bom!\" } elseif ($nota -ge 10) { Write-Output \"Suficiente.\" } else { Write-Output \"Reprovado.\" } . üß© Exerc√≠cio 3 ‚Äì Verificar se o ano √© bissexto . | Pede ao utilizador um ano (Read-Host). | Verifica se √© bissexto: . | Divis√≠vel por 4 e n√£o por 100, ou divis√≠vel por 400. | . | Mostra: . | ‚ÄúAno bissexto.‚Äù ou ‚ÄúAno comum.‚Äù | . | . Resposta $ano = Read-Host \"Introduz um ano\" if ((($ano % 4) -eq 0 -and ($ano % 100) -ne 0) -or (($ano % 400) -eq 0)) { Write-Output \"Ano bissexto.\" } else { Write-Output \"Ano comum.\" } . üß© Exerc√≠cio 4 ‚Äì Contar processos ativos . | Usa Get-Process para listar os processos. | Conta quantos processos est√£o ativos. | Se houver mais de 100 processos: . | Mostra ‚ÄúMuitos processos!‚Äù | . | Caso contr√°rio: . | Mostra ‚ÄúN√∫mero normal de processos.‚Äù | . | . Resposta $processos = Get-Process $total = $processos.Count if ($total -gt 100) { Write-Output \"Muitos processos!\" } else { Write-Output \"N√∫mero normal de processos.\" } . üß© Exerc√≠cio 5 ‚Äì Valida√ß√£o de palavra-passe . | Pede ao utilizador uma palavra-passe (Read-Host). | Se a palavra-passe tiver menos de 6 caracteres, mostra ‚ÄúPalavra-passe muito curta.‚Äù | Se tiver entre 6 e 10 caracteres, mostra ‚ÄúPalavra-passe aceit√°vel.‚Äù | Se tiver mais de 10 caracteres, mostra ‚ÄúPalavra-passe forte.‚Äù | . Resposta $password = Read-Host \"Introduz a tua palavra-passe\" if ($password.Length -lt 6) { Write-Output \"Palavra-passe muito curta.\" } elseif ($password.Length -le 10) { Write-Output \"Palavra-passe aceit√°vel.\" } else { Write-Output \"Palavra-passe forte.\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#54--exerc%C3%ADcios-pr%C3%A1ticos--if-else-elseif",
    
    "relUrl": "/Modules/Module2/session5.html#54--exerc√≠cios-pr√°ticos--if-else-elseif"
  },"193": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "6. Resumo Final e Boas Pr√°ticas",
    "content": ". ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#6-resumo-final-e-boas-pr%C3%A1ticas",
    
    "relUrl": "/Modules/Module2/session5.html#6-resumo-final-e-boas-pr√°ticas"
  },"194": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "6.1. O que aprendeste nesta sess√£o",
    "content": ". | Como usar estruturas condicionais (if, else, elseif) para tomar decis√µes em scripts. | Como trabalhar com operadores de compara√ß√£o (-eq, -ne, -gt, -lt, etc.). | Como usar operadores l√≥gicos (-and, -or). | Como receber inputs do utilizador (Read-Host). | Como validar texto usando express√µes regulares (-match). | . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#61-o-que-aprendeste-nesta-sess%C3%A3o",
    
    "relUrl": "/Modules/Module2/session5.html#61-o-que-aprendeste-nesta-sess√£o"
  },"195": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "6.2. Boas pr√°ticas ao usar if, else, elseif",
    "content": "‚úÖ Usa par√™nteses () nas condi√ß√µes: Ajuda a ler melhor e evita erros. ‚úÖ Usa chavetas {} sempre, mesmo para uma linha: D√° clareza e evita confus√µes em scripts maiores. ‚úÖ Indenta o c√≥digo dentro dos blocos: Facilita a leitura, manuten√ß√£o e debugging. ‚úÖ Come√ßa com o caso mais prov√°vel: Assim o script executa mais r√°pido em cen√°rios comuns. ‚úÖ Usa else apenas se fizer sentido: Se n√£o houver uma a√ß√£o clara para o caso contr√°rio, o else pode ser evitado. ‚úÖ Testa sempre todos os caminhos: Garante que o teu script funciona corretamente em todos os cen√°rios. üîó Documenta√ß√£o oficial ‚Äì about_If (PowerShell) . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#62-boas-pr%C3%A1ticas-ao-usar-if-else-elseif",
    
    "relUrl": "/Modules/Module2/session5.html#62-boas-pr√°ticas-ao-usar-if-else-elseif"
  },"196": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "7. Estruturas switch",
    "content": "Aprendeste a usar if, else e elseif para tomar decis√µes no teu script. Agora vais aprender uma outra estrutura condicional: o switch. | Permite comparar uma vari√°vel com v√°rios valores diferentes. | Permite usar wildcards (*) e express√µes regulares (padr√µes mais avan√ßados). | . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#7-estruturas-switch",
    
    "relUrl": "/Modules/Module2/session5.html#7-estruturas-switch"
  },"197": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "7.1. Sintaxe b√°sica do switch",
    "content": "switch ($variavel) { \"valor1\" { # C√≥digo a executar se $variavel for \"valor1\" } \"valor2\" { # C√≥digo a executar se $variavel for \"valor2\" } default { # C√≥digo a executar se n√£o corresponder a nenhum valor } } . | O bloco default √© opcional. | . Exemplo b√°sico: . $dia = \"Ter√ßa\" switch ($dia) { \"Segunda\" { Write-Output \"In√≠cio da semana.\" } \"Ter√ßa\" { Write-Output \"Segundo dia de trabalho.\" } \"Quarta\" { Write-Output \"Metade da semana!\" } default { Write-Output \"Outro dia.\" } } . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#71-sintaxe-b%C3%A1sica-do-switch",
    
    "relUrl": "/Modules/Module2/session5.html#71-sintaxe-b√°sica-do-switch"
  },"198": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "7.2. switch -Wildcard",
    "content": "Se quiseres usar wildcards (*, ?, etc.), basta acrescentares o par√¢metro -Wildcard. switch -Wildcard ($variavel) { \"A*\" { # Come√ßa por A } \"*Z\" { # Termina em Z } default { # Nenhum dos padr√µes } } . Exemplo: . $palavra = \"Ana\" switch -Wildcard ($palavra) { \"A*\" { Write-Output \"Come√ßa por A\" } \"*z\" { Write-Output \"Termina em z\" } default { Write-Output \"Outro padr√£o\" } } . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#72-switch--wildcard",
    
    "relUrl": "/Modules/Module2/session5.html#72-switch--wildcard"
  },"199": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "7.3. switch -Regex",
    "content": "Se quiseres comparar usando padr√µes de express√µes regulares, usa -Regex. switch -Regex ($variavel) { \"^\\d+$\" { # S√≥ n√∫meros } \"^[A-Z]\" { # Come√ßa por mai√∫scula } default { # Outro caso } } . Exemplo: . $texto = \"12345\" switch -Regex ($texto) { \"^\\d+$\" { Write-Output \"√â um n√∫mero!\" } \"^[A-Z]\" { Write-Output \"Come√ßa com letra mai√∫scula!\" } default { Write-Output \"Outro padr√£o\" } } . Express√µes l√≥gicas dentro de um switch . Para al√©m de comparar valores diretamente, o switch tamb√©m pode usar express√µes booleanas personalizadas . Cada bloco pode conter uma condi√ß√£o l√≥gica que √© avaliada como $true ou $false. Quando a condi√ß√£o for verdadeira, o bloco correspondente √© executado. Exemplo: Categorizar fruta com base em arrays . $dia = Read-Host \"Introduz um dia da semana\" switch ($dia) { { $_ -in @(\"segunda\", \"ter√ßa\", \"quarta\", \"quinta\", \"sexta\") } { Write-Output \"Dia √∫til\" } { $_ -in @(\"s√°bado\", \"domingo\") } { Write-Output \"Fim de semana\" } default { Write-Output \"Dia inv√°lido\" } } . Neste exemplo: . | $_ representa o valor inserido ($dia). | O operador -in verifica se esse valor pertence a um dos arrays definidos. | Cada condi√ß√£o devolve $true ou $false, e o primeiro bloco que for verdadeiro √© executado. Este tipo de uso √© √∫til quando queres agrupar condi√ß√µes complexas ou verificar se o valor pertence a uma cole√ß√£o de possibilidades, sem escrever v√°rios case separados. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#73-switch--regex",
    
    "relUrl": "/Modules/Module2/session5.html#73-switch--regex"
  },"200": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "7.4. üß© Exerc√≠cios pr√°ticos ‚Äì switch",
    "content": "üß© Exerc√≠cio ‚Äì Classificar frutas . | Cria uma vari√°vel $fruta. | Usa switch para: . | Mostrar ‚ÄúFruta c√≠trica‚Äù se for ‚Äúlaranja‚Äù, ‚Äúlim√£o‚Äù ou ‚Äútangerina‚Äù. | Mostrar ‚ÄúFruta tropical‚Äù se for ‚Äúbanana‚Äù, ‚Äúmanga‚Äù ou ‚Äúanan√°s‚Äù. | Mostrar ‚ÄúOutra fruta‚Äù caso contr√°rio. | . | . Resposta $fruta = \"manga\" switch ($fruta) { \"laranja\" { Write-Output \"Fruta c√≠trica\" } \"lim√£o\" { Write-Output \"Fruta c√≠trica\" } \"tangerina\" { Write-Output \"Fruta c√≠trica\" } \"banana\" { Write-Output \"Fruta tropical\" } \"manga\" { Write-Output \"Fruta tropical\" } \"anan√°s\" { Write-Output \"Fruta tropical\" } default { Write-Output \"Outra fruta\" } } . üß© Exerc√≠cio ‚Äì Validar entradas usando padr√µes . | Pede ao utilizador para escrever uma palavra. | Usa switch -Regex para: . | Mostrar ‚ÄúN√∫mero encontrado‚Äù se for apenas n√∫meros (^\\d+$). | Mostrar ‚ÄúCome√ßa com letra mai√∫scula‚Äù se come√ßar por letra mai√∫scula (^[A-Z]). | Mostrar ‚ÄúOutro tipo de entrada‚Äù caso contr√°rio. | . | . Resposta $entrada = Read-Host \"Introduz uma palavra\" switch -Regex ($entrada) { \"^\\d+$\" { Write-Output \"N√∫mero encontrado\" } \"^[A-Z]\" { Write-Output \"Come√ßa com letra mai√∫scula\" } default { Write-Output \"Outro tipo de entrada\" } } . üß© Exerc√≠cio ‚Äì Categorizar idade . | Pede ao utilizador para introduzir a idade. | Usa switch com express√µes l√≥gicas para: . | Mostrar ‚ÄúMenor de idade‚Äù se for menor que 18. | Mostrar ‚ÄúAdulto‚Äù se estiver entre 18 e 64. | Mostrar ‚ÄúSenior‚Äù se tiver 65 ou mais. | . | . Resposta $idade = Read-Host \"Introduz a tua idade\" switch ($idade) { { $_ -lt 18 } { Write-Output \"Menor de idade\" } { $_ -ge 18 -and $_ -lt 65 } { Write-Output \"Adulto\" } { $_ -ge 65 } { Write-Output \"Senior\" } default { Write-Output \"Valor inv√°lido\" } } . Resumo ‚Äì Estruturas switch . O que aprendeste nesta sess√£o: . | Como usar o comando switch para simplificar m√∫ltiplas condi√ß√µes. | Como usar switch -Wildcard para trabalhar com padr√µes de texto que incluem * e ?. | Como usar switch -Regex para testar express√µes regulares de forma elegante. | Boas pr√°ticas no uso do switch para tornar o c√≥digo mais limpo e f√°cil de manter. | . Boas pr√°ticas ao usar switch: . ‚úÖ Usa switch quando tens v√°rias compara√ß√µes poss√≠veis para o mesmo valor. ‚úÖ Prefere switch -Wildcard para comparar termina√ß√µes ou padr√µes simples (ex: ‚Äú*.pdf‚Äù). ‚úÖ Prefere switch -Regex quando precisas de correspond√™ncias mais poderosas (ex: validar se √© um n√∫mero). ‚úÖ Inclui sempre um default para tratar casos n√£o previstos. ‚úÖ Mant√©m o c√≥digo dentro de cada bloco {} simples e bem indentado. üîó Documenta√ß√£o oficial ‚Äì about_Switch (PowerShell) . ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html#74--exerc%C3%ADcios-pr%C3%A1ticos--switch",
    
    "relUrl": "/Modules/Module2/session5.html#74--exerc√≠cios-pr√°ticos--switch"
  },"201": {
    "doc": "Session 5: Estruturas Condicionais",
    "title": "Session 5: Estruturas Condicionais",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/session5.html",
    
    "relUrl": "/Modules/Module2/session5.html"
  },"202": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "üß≠ Sess√£o 6: Loops e Itera√ß√µes",
    "content": ". üéØ Objetivo Aprender a repetir blocos de c√≥digo com diferentes tipos de loops em PowerShell: for, foreach, while e do-until, e perceber como aplic√°-los em cen√°rios reais. | 1. Introdu√ß√£o aos Loops | 2. O loop for . | Sintaxe: | Exemplo: contar de 1 a 5 | . | 3. O loop foreach . | Sintaxe: | Exemplo: listar nomes | Alternativa: usar 1..10 para gerar uma lista de n√∫meros | . | 4. O loop while . | Sintaxe: | Exemplo: contar at√© 3 | . | 5. O loop do-until . | Sintaxe: | Exemplo: pedir n√∫mero at√© ser maior que 10 | . | 6. Comandos especiais em loops: break e continue . | break | continue | üß† Dicas pr√°ticas | . | 7. üß© Exerc√≠cios . | üß© Exerc√≠cio ‚Äì Script contagem.ps1 com for | üß© Exerc√≠cio ‚Äì Script listar_processos.ps1 com foreach | üß© Exerc√≠cio ‚Äì Script servicos_parados.ps1 com foreach | üß© Exerc√≠cio ‚Äì Script esperar_minuto.ps1 com while | üß© Exerc√≠cio ‚Äì Script encontrar_notepad.ps1 com do-until | üß© Exerc√≠cio ‚Äì Script ignorar_pares.ps1 com continue | . | 8. Filtrar listas com Where-Object . | üìå Sintaxe b√°sica | üîç Exemplo 1 ‚Äì N√∫meros maiores que 10 | üîç Exemplo 2 ‚Äì Palavras que come√ßam por ‚ÄúA‚Äù | Dica: $_.Propriedade em objetos | üß© Exerc√≠cio ‚Äì Filtrar frutas c√≠tricas | üß© Exerc√≠cio ‚Äì N√∫meros pares | üß© Exerc√≠cio ‚Äì Processos com muita mem√≥ria | . | 9. Resumo e Boas Pr√°ticas | . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html",
    
    "relUrl": "/Modules/Module2/session6.html"
  },"203": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "1. Introdu√ß√£o aos Loops",
    "content": "Em programa√ß√£o, muitas vezes precisamos de repetir a√ß√µes: processar v√°rios itens, tentar at√© uma condi√ß√£o ser verdadeira, validar inputs, etc. Em vez de copiar e colar c√≥digo v√°rias vezes, usamos loops. ‚ÄúEnquanto (ou at√© que) uma condi√ß√£o for verdadeira, repete este bloco de c√≥digo.‚Äù . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#1-introdu%C3%A7%C3%A3o-aos-loops",
    
    "relUrl": "/Modules/Module2/session6.html#1-introdu√ß√£o-aos-loops"
  },"204": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "2. O loop for",
    "content": "O for √© usado quando sabemos de antem√£o quantas vezes queremos repetir. Sintaxe: . for (&lt;inicializa√ß√£o&gt;; &lt;condi√ß√£o&gt;; &lt;incremento&gt;) { # C√≥digo a repetir } . | Inicializa√ß√£o: define a vari√°vel de controlo (ex: $i = 0). | Condi√ß√£o: quando for falsa, o loop termina. | Incremento: atualiza a vari√°vel em cada repeti√ß√£o. | . Exemplo: contar de 1 a 5 . for ($i = 1; $i -le 5; $i++) { Write-Output \"Valor atual: $i\" } . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#2-o-loop-for",
    
    "relUrl": "/Modules/Module2/session6.html#2-o-loop-for"
  },"205": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "3. O loop foreach",
    "content": "O foreach √© usado para percorrer todos os itens de uma cole√ß√£o (array, lista, etc.). Sintaxe: . foreach ($item in $colecao) { # C√≥digo a executar para cada item } . Exemplo: listar nomes . $nomes = @(\"Ana\", \"Bruno\", \"Carlos\") foreach ($nome in $nomes) { Write-Output \"Nome: $nome\" } . Alternativa: usar 1..10 para gerar uma lista de n√∫meros . Se quiseres simplesmente criar um conjunto de n√∫meros sequenciais (por exemplo, de 1 a 10), podes usar o operador .. (range): . $numeros = 1..10 foreach ($n in $numeros) { Write-Output \"N√∫mero: $n\" } . ‚Ñπ1..10 cria automaticamente um array com os n√∫meros de 1 a 10. √â uma forma r√°pida e pr√°tica de gerar sequ√™ncias num√©ricas. ‚Äî . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#3-o-loop-foreach",
    
    "relUrl": "/Modules/Module2/session6.html#3-o-loop-foreach"
  },"206": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "4. O loop while",
    "content": "O while executa enquanto uma condi√ß√£o for verdadeira. Sintaxe: . while (&lt;condi√ß√£o&gt;) { # C√≥digo a repetir } . | Se a condi√ß√£o for falsa desde o in√≠cio, o while n√£o executa nenhuma vez. | . Exemplo: contar at√© 3 . $i = 1 while ($i -le 3) { Write-Output \"Contagem: $i\" $i++ } . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#4-o-loop-while",
    
    "relUrl": "/Modules/Module2/session6.html#4-o-loop-while"
  },"207": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "5. O loop do-until",
    "content": "O do-until executa sempre pelo menos uma vez e repete at√© a condi√ß√£o ser verdadeira. Sintaxe: . do { # C√≥digo a repetir } until (&lt;condi√ß√£o&gt;) . | Inverso do while: o loop corre at√© a condi√ß√£o ser verdadeira. | . Exemplo: pedir n√∫mero at√© ser maior que 10 . do { $numero = Read-Host \"Introduz um n√∫mero maior que 10\" } until ([int]$numero -gt 10) Write-Output \"Obrigado! Introduziste: $numero\" . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#5-o-loop-do-until",
    
    "relUrl": "/Modules/Module2/session6.html#5-o-loop-do-until"
  },"208": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "6. Comandos especiais em loops: break e continue",
    "content": "Dentro de loops, podemos usar dois comandos especiais para controlar o fluxo de execu√ß√£o: . break . | Interrompe o loop imediatamente. | O c√≥digo salta para depois do loop. | . Exemplo: parar ao encontrar um valor . $nomes = @(\"Ana\", \"Bruno\", \"Carlos\") foreach ($nome in $nomes) { if ($nome -eq \"Bruno\") { break } Write-Output \"Nome: $nome\" } . Neste exemplo: . | O loop para imediatamente quando encontra ‚ÄúBruno‚Äù. | ‚ÄúCarlos‚Äù nunca √© mostrado. | . continue . | Salta para a pr√≥xima itera√ß√£o do loop, sem terminar o loop. | O c√≥digo depois do continue dentro do loop n√£o √© executado. | . Exemplo: ignorar um valor . $nomes = @(\"Ana\", \"Bruno\", \"Carlos\") foreach ($nome in $nomes) { if ($nome -eq \"Bruno\") { continue } Write-Output \"Nome: $nome\" } . Neste exemplo: . | ‚ÄúBruno‚Äù √© ignorado. | ‚ÄúAna‚Äù e ‚ÄúCarlos‚Äù s√£o mostrados. | . üß† Dicas pr√°ticas . | Comando | Uso principal | . | break | Parar o loop totalmente | . | continue | Saltar apenas a itera√ß√£o atual | . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#6-comandos-especiais-em-loops-break-e-continue",
    
    "relUrl": "/Modules/Module2/session6.html#6-comandos-especiais-em-loops-break-e-continue"
  },"209": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "7. üß© Exerc√≠cios",
    "content": "üß© Exerc√≠cio ‚Äì Script contagem.ps1 com for . Cria um script contagem.ps1 que: . | Conta de 10 at√© 1 (a descer) usando for. | Mostra cada n√∫mero com Write-Output. | . Resposta # contagem.ps1 # Conta de 10 at√© 1 for ($i = 10; $i -ge 1; $i--) { Write-Output \"N√∫mero: $i\" } . üß© Exerc√≠cio ‚Äì Script listar_processos.ps1 com foreach . Cria um script listar_processos.ps1 que: . | Usa Get-Process para obter a lista de processos. | Mostra o nome de cada processo usando foreach. | . Resposta # listar_processos.ps1 # Lista todos os processos ativos $processos = Get-Process foreach ($proc in $processos) { Write-Output \"Processo: $($proc.Name)\" } . üß© Exerc√≠cio ‚Äì Script servicos_parados.ps1 com foreach . Cria um script servicos_parados.ps1 que: . | Usa Get-Service. | Mostra apenas os servi√ßos que est√£o parados (Status -eq \"Stopped\"). | . Resposta # servicos_parados.ps1 # Lista servi√ßos parados no sistema $servicos = Get-Service foreach ($svc in $servicos) { if ($svc.Status -eq \"Stopped\") { Write-Output \"Servi√ßo parado: $($svc.Name)\" } } . üß© Exerc√≠cio ‚Äì Script esperar_minuto.ps1 com while . Cria um script esperar_minuto.ps1 que: . | Usa while para esperar at√© o minuto atual ser m√∫ltiplo de 5. | Mostra o minuto quando for encontrado. | . Resposta # esperar_minuto.ps1 # Espera at√© o minuto atual ser m√∫ltiplo de 5 $minuto = (Get-Date).Minute while ($minuto % 5 -ne 0) { Write-Output \"Minuto atual: $minuto\" Start-Sleep -Seconds 10 $minuto = (Get-Date).Minute } Write-Output \"Minuto m√∫ltiplo de 5 encontrado: $minuto\" . üß© Exerc√≠cio ‚Äì Script encontrar_notepad.ps1 com do-until . Cria um script encontrar_notepad.ps1 que: De 5 em 5 segundos, verifica se o processo ‚Äúnotepad‚Äù est√° aberto. Enquanto o Notepad n√£o estiver aberto, o script deve: . | Escrever no terminal que o Notepad ainda n√£o foi encontrado. | . Assim que o Notepad estiver aberto, o script deve: . | Escrever no terminal que o Notepad foi encontrado. | Terminar a execu√ß√£o. | . üß© Exerc√≠cio ‚Äì Script ignorar_pares.ps1 com continue . Cria um script ignorar_pares.ps1 que: . | Cria um array com os n√∫meros de 1 a 10. | Usa foreach para mostrar apenas os n√∫meros √≠mpares. | . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#7--exerc%C3%ADcios",
    
    "relUrl": "/Modules/Module2/session6.html#7--exerc√≠cios"
  },"210": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "8. Filtrar listas com Where-Object",
    "content": "Quando tens uma lista de elementos (ex: nomes, n√∫meros, processos), podes usar o comando Where-Object para filtrar apenas os elementos que interessam. üìå Sintaxe b√°sica . $lista | Where-Object { condi√ß√£o } . Dentro das chavetas {}, usamos o s√≠mbolo especial $_ que representa o elemento atual da lista. üîç Exemplo 1 ‚Äì N√∫meros maiores que 10 . $numeros = 5, 8, 12, 20 $maiores = $numeros | Where-Object { $_ -gt 10 } Write-Output $maiores . | $_ representa cada n√∫mero da lista. | A condi√ß√£o $_ -gt 10 devolve apenas os que s√£o maiores que 10. | . üîç Exemplo 2 ‚Äì Palavras que come√ßam por ‚ÄúA‚Äù . $palavras = \"Ana\", \"Bruno\", \"alface\", \"√Årvore\" $comA = $palavras | Where-Object { $_ -cmatch '^a' } Write-Output $comA . | O -cmatch faz a correspond√™ncia case-sensitive. | . Dica: $_.Propriedade em objetos . Se estiveres a trabalhar com objetos (ex: resultado de Get-Process), podes usar $_ seguido da propriedade: . Get-Process | Where-Object { $_.CPU -gt 50 } . üß© Exerc√≠cio ‚Äì Filtrar frutas c√≠tricas . | Cria uma lista de frutas: laranja, banana, lim√£o, kiwi. | Usa Where-Object para obter apenas as frutas que terminam em √£o. | . üß© Exerc√≠cio ‚Äì N√∫meros pares . | Cria uma lista com os n√∫meros de 1 a 10. | Usa Where-Object para filtrar apenas os n√∫meros pares (divis√≠veis por 2). | . üß© Exerc√≠cio ‚Äì Processos com muita mem√≥ria . | Usa Get-Process para obter os processos. | Filtra os que usam mais de 200 MB de mem√≥ria (WorkingSet &gt; 200MB). | Dica: 200 MB = 200 * 1024 * 1024 | . | . üîó Documenta√ß√£o oficial ‚Äì Where-Object . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#8-filtrar-listas-com-where-object",
    
    "relUrl": "/Modules/Module2/session6.html#8-filtrar-listas-com-where-object"
  },"211": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "9. Resumo e Boas Pr√°ticas",
    "content": "‚úÖ Usa for quando souberes quantas vezes vais repetir. ‚úÖ Usa foreach para percorrer cole√ß√µes. ‚úÖ Usa while quando precisas de verificar antes de correr. ‚úÖ Usa do-until quando queres executar pelo menos uma vez. üîó about_For üîó about_Foreach üîó about_While üîó about_Do . ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html#9-resumo-e-boas-pr%C3%A1ticas",
    
    "relUrl": "/Modules/Module2/session6.html#9-resumo-e-boas-pr√°ticas"
  },"212": {
    "doc": "Session 6: Loops e Itera√ß√µes",
    "title": "Session 6: Loops e Itera√ß√µes",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/session6.html",
    
    "relUrl": "/Modules/Module2/session6.html"
  },"213": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "üíª Sess√£o Extra: Usar o VSCode com PowerShell",
    "content": ". üéØ Objetivo Aprender a instalar, configurar e usar o Visual Studio Code como ambiente de desenvolvimento para PowerShell. | 1. O que √© o Visual Studio Code? | 2. Instalar o VSCode | 3. Instalar a extens√£o PowerShell | 4. Como usar o VSCode com PowerShell | 5. Recomenda√ß√µes de extens√µes √∫teis | 6. Configura√ß√µes √∫teis no VSCode | 7. Atalhos √∫teis no VSCode | 8. Dicas finais | . ",
    "url": "/Curso_Powershell/vscode.html",
    
    "relUrl": "/vscode.html"
  },"214": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "1. O que √© o Visual Studio Code?",
    "content": "O Visual Studio Code (VSCode) √© um editor de c√≥digo gratuito, leve e poderoso da Microsoft. √â compat√≠vel com v√°rias linguagens de programa√ß√£o e tem suporte nativo para PowerShell atrav√©s de extens√µes. Principais vantagens: . | Gr√°tis e multiplataforma (Windows, Linux, macOS). | Extens√≠vel com milhares de extens√µes. | Integra√ß√£o com Git, Terminal e IntelliSense. | Ideal para escrever, testar e depurar scripts PowerShell. | . üîó Download do VSCode . ",
    "url": "/Curso_Powershell/vscode.html#1-o-que-%C3%A9-o-visual-studio-code",
    
    "relUrl": "/vscode.html#1-o-que-√©-o-visual-studio-code"
  },"215": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "2. Instalar o VSCode",
    "content": ". | Acede a https://code.visualstudio.com/ | Faz o download da vers√£o para o teu sistema operativo. | Segue os passos da instala√ß√£o (no Windows, basta clicar em ‚ÄúSeguinte‚Äù v√°rias vezes). | . üí° Ap√≥s instalar, poder√°s abrir o VSCode a partir do menu Iniciar ou escrever code no terminal (se ativares a op√ß√£o durante a instala√ß√£o). ",
    "url": "/Curso_Powershell/vscode.html#2-instalar-o-vscode",
    
    "relUrl": "/vscode.html#2-instalar-o-vscode"
  },"216": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "3. Instalar a extens√£o PowerShell",
    "content": ". | Abre o VSCode. | Vai ao menu lateral esquerdo e clica em Extens√µes (√≠cone de quadrado com cantos afastados). | Pesquisa por PowerShell. | Instala a extens√£o chamada PowerShell (publisher: Microsoft). | . üîó Extens√£o PowerShell no Marketplace . ",
    "url": "/Curso_Powershell/vscode.html#3-instalar-a-extens%C3%A3o-powershell",
    
    "relUrl": "/vscode.html#3-instalar-a-extens√£o-powershell"
  },"217": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "4. Como usar o VSCode com PowerShell",
    "content": "üìÅ Abrir uma pasta de scripts . | Abre uma pasta onde tenhas os teus scripts .ps1. | Usa o menu File &gt; Open Folder (Ficheiro &gt; Abrir Pasta). | . ‚úçÔ∏è Criar um novo ficheiro .ps1 . | Vai a File &gt; New File, guarda como meuscript.ps1. | . ‚ñ∂Ô∏è Executar scripts . | Podes executar o script no terminal integrado clicando em Run ou com o atalho F5 (depura√ß√£o) ou Ctrl+F5 (execu√ß√£o simples). | O terminal aparece na parte inferior do ecr√£. | . üß† Dicas: . | Usa Ctrl+ para aumentar e Ctrl- para reduzir o tamanho da fonte. | Usa Ctrl+Space para sugest√µes inteligentes de comandos (IntelliSense). | . ",
    "url": "/Curso_Powershell/vscode.html#4-como-usar-o-vscode-com-powershell",
    
    "relUrl": "/vscode.html#4-como-usar-o-vscode-com-powershell"
  },"218": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "5. Recomenda√ß√µes de extens√µes √∫teis",
    "content": "| Extens√£o | Descri√ß√£o | . | PowerShell (Microsoft) | Suporte oficial √† linguagem, linting, execu√ß√£o e depura√ß√£o. | . | Path Intellisense | Ajuda a completar caminhos de ficheiros e pastas. | . ",
    "url": "/Curso_Powershell/vscode.html#5-recomenda%C3%A7%C3%B5es-de-extens%C3%B5es-%C3%BAteis",
    
    "relUrl": "/vscode.html#5-recomenda√ß√µes-de-extens√µes-√∫teis"
  },"219": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "6. Configura√ß√µes √∫teis no VSCode",
    "content": "Podes configurar algumas op√ß√µes no ficheiro settings.json ou via interface gr√°fica. Sugest√µes: . { \"editor.tabSize\": 4, // Define a tabula√ß√£o como 4 espa√ßos \"editor.insertSpaces\": true, // Usa espa√ßos em vez de tabula√ß√µes reais \"files.insertFinalNewline\": true, // Garante uma linha em branco no fim do ficheiro \"editor.rulers\": [80], // Mostra uma linha vertical na coluna 80 (boa pr√°tica) \"editor.wordWrap\": \"on\", // Ativa quebra autom√°tica de linha no editor \"editor.bracketPairColorization.enabled\": true // Ativa cores diferentes para pares de par√™ntesis/chaves } . Para aceder √†s defini√ß√µes JSON: . Prime Ctrl + Shift + P . Escreve Preferences: Open User Settings (JSON) . Cola as op√ß√µes acima. ",
    "url": "/Curso_Powershell/vscode.html#6-configura%C3%A7%C3%B5es-%C3%BAteis-no-vscode",
    
    "relUrl": "/vscode.html#6-configura√ß√µes-√∫teis-no-vscode"
  },"220": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "7. Atalhos √∫teis no VSCode",
    "content": "| A√ß√£o | Atalho | . | Executar script (sem debug) | Ctrl + F5 | . | Executar script (com debug) | F5 | . | Terminal integrado | Ctrl + ‚Äò | . | Abrir extens√µes | Ctrl + Shift + X | . | Comando r√°pido | Ctrl + Shift + P | . | Ver atalhos de teclado | Ctrl + K, Ctrl + S | . ",
    "url": "/Curso_Powershell/vscode.html#7-atalhos-%C3%BAteis-no-vscode",
    
    "relUrl": "/vscode.html#7-atalhos-√∫teis-no-vscode"
  },"221": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "8. Dicas finais",
    "content": "‚úÖ Usa VSCode sempre que poss√≠vel para escrever os teus scripts: tens valida√ß√£o, sugest√µes, cores e terminal integrado. ‚úÖ Mant√©m o terminal PowerShell atualizado: Download PowerShell ‚úÖ Podes tamb√©m instalar o PowerShell 7+ (mais moderno e multiplataforma). üîó Guia Oficial ‚Äì PowerShell no VSCode . ",
    "url": "/Curso_Powershell/vscode.html#8-dicas-finais",
    
    "relUrl": "/vscode.html#8-dicas-finais"
  },"222": {
    "doc": "Visual Studio Code com PowerShell",
    "title": "Visual Studio Code com PowerShell",
    "content": " ",
    "url": "/Curso_Powershell/vscode.html",
    
    "relUrl": "/vscode.html"
  }
}
