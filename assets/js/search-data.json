{"0": {
    "doc": "Curso de PowerShell & Shell Scripting",
    "title": "Bem-vindo ao Curso!",
    "content": "Este curso ir√° gui√°-lo atrav√©s dos fundamentos de PowerShell e Shell Scripting, introduzindo gradualmente conceitos mais avan√ßados por meio de exerc√≠cios pr√°ticos e exemplos do mundo real. üåü Estrutura do Curso . O curso est√° dividido em m√≥dulos, cada um contendo v√°rias sess√µes. O conte√∫do ser√° progressivamente disponibilizado de acordo com o calend√°rio das aulas. üìÖ Hor√°rio . | As aulas decorrem √†s segundas e quartas-feiras, das 19h √†s 21h. | O curso completo ter√° uma dura√ß√£o total de 30 horas. | . üìö Vis√£o Geral dos M√≥dulos e Sess√µes . M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting . | Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o | Sess√£o 2: Comandos, Navega√ß√£o e Ajuda | Sess√£o 3: Output e Personaliza√ß√£o | . M√≥dulo 2: Estruturas de Controle e Vari√°veis . | Sess√£o 1: Vari√°veis e Tipos de Dados | Sess√£o 2: Estruturas Condicionais | Sess√£o 3: Loops e Itera√ß√µes | Sess√£o 4: Exerc√≠cios e Pr√°tica Dirigida | . M√≥dulo 3: Scripts, Ficheiros e Processos . | Sess√£o 1: Scripts B√°sicos e Seguran√ßa | Sess√£o 2: Manipula√ß√£o de Ficheiros e Diret√≥rios | Sess√£o 3: Pesquisa e Filtragem | Sess√£o 4: Gest√£o de Processos e Servi√ßos | . M√≥dulo 4: Automa√ß√£o de Tarefas no Windows e Linux . | Sess√£o 1: Tarefas Agendadas e Cron Jobs | Sess√£o 2: Trabalhar com Servi√ßos e Logs | Sess√£o 3: Notifica√ß√µes e Relat√≥rios Automatizados | Sess√£o 4: Projeto Pr√°tico Final | . üîë Nota . O conte√∫do ser√° gradualmente disponibilizado. Por favor, siga de acordo com o calend√°rio das aulas. üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o . ",
    "url": "/Curso_Powershell/#bem-vindo-ao-curso",
    
    "relUrl": "/#bem-vindo-ao-curso"
  },"1": {
    "doc": "Curso de PowerShell & Shell Scripting",
    "title": "Curso de PowerShell & Shell Scripting",
    "content": " ",
    "url": "/Curso_Powershell/",
    
    "relUrl": "/"
  },"2": {
    "doc": "Module 2: Estruturas de Controle e Vari√°veis",
    "title": "Estruturas de Controle e Vari√°veis",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/#estruturas-de-controle-e-vari%C3%A1veis",
    
    "relUrl": "/Modules/Module2/#estruturas-de-controle-e-vari√°veis"
  },"3": {
    "doc": "Module 2: Estruturas de Controle e Vari√°veis",
    "title": "Module 2: Estruturas de Controle e Vari√°veis",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module2/",
    
    "relUrl": "/Modules/Module2/"
  },"4": {
    "doc": "Module 3: Gest√£o de Ficheiros e Processos",
    "title": "Gest√£o de Ficheiros e Processos",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module3/#gest%C3%A3o-de-ficheiros-e-processos",
    
    "relUrl": "/Modules/Module3/#gest√£o-de-ficheiros-e-processos"
  },"5": {
    "doc": "Module 3: Gest√£o de Ficheiros e Processos",
    "title": "Module 3: Gest√£o de Ficheiros e Processos",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module3/",
    
    "relUrl": "/Modules/Module3/"
  },"6": {
    "doc": "Module 4: Automa√ß√£o de Tarefas no Windows e Linux",
    "title": "Module 4: Automa√ß√£o de Tarefas no Windows e Linux",
    "content": "Sess√£o 1: Tarefas Agendadas e Cron Jobs (2 horas) . üéØ Objetivo . Aprender a automatizar tarefas recorrentes utilizando agendadores de tarefas no Windows e Linux. üìå Conte√∫dos . | Configura√ß√£o e uso de schtasks (Windows) e cron (Linux) | Automa√ß√£o de tarefas peri√≥dicas | Pr√°tica: Criar e testar tarefas agendadas | . Sess√£o 2: Trabalhar com Servi√ßos e Logs (2 horas) . üéØ Objetivo . Aprender a monitorizar e gerir servi√ßos e logs no Windows e Linux. üìå Conte√∫dos . | Comandos para gest√£o de servi√ßos (Get-Service, systemctl) | Monitoriza√ß√£o de logs (Get-EventLog, journalctl) | Pr√°tica: Monitorizar e registar logs automaticamente | . Sess√£o 3: Notifica√ß√µes e Relat√≥rios Automatizados (2 horas) . üéØ Objetivo . Criar scripts que enviam notifica√ß√µes e geram relat√≥rios automaticamente. üìå Conte√∫dos . | Envio de emails automatizados | Relat√≥rios peri√≥dicos com dados coletados | Pr√°tica: Desenvolver um sistema de notifica√ß√µes | . Sess√£o 4: Projeto Pr√°tico Final (2 horas) . üéØ Objetivo . Aplicar todos os conceitos aprendidos em um projeto pr√°tico completo. üìå Conte√∫dos . | Criar um sistema de monitoriza√ß√£o de servi√ßos com relat√≥rios autom√°ticos | Discuss√£o e revis√£o final do curso | . ",
    "url": "/Curso_Powershell/Modules/Module4/",
    
    "relUrl": "/Modules/Module4/"
  },"7": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "üéØ Objetivo do M√≥dulo",
    "content": "Compreender os fundamentos de PowerShell e Shell Scripting, configurar o ambiente de trabalho e dominar os comandos b√°sicos antes de avan√ßar para l√≥gica e scripting. ",
    "url": "/Curso_Powershell/Modules/Module1/#-objetivo-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module1/#-objetivo-do-m√≥dulo"
  },"8": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "üìå Estrutura do M√≥dulo",
    "content": "Sess√µes: . | Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o (2 horas) . | Introdu√ß√£o, instala√ß√£o, configura√ß√£o do ambiente e primeiros passos na consola. | . | Sess√£o 2: Comandos, Navega√ß√£o e Ajuda (2 horas) . | Explora√ß√£o de comandos, navega√ß√£o no sistema de ficheiros, ajuda integrada e tipos de comandos. | . | Sess√£o 3: Compara√ß√£o e Pr√°tica Dirigida (2 horas) . | Revis√£o de conceitos, exerc√≠cios pr√°ticos e compara√ß√£o entre PowerShell e Bash. | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/#-estrutura-do-m%C3%B3dulo",
    
    "relUrl": "/Modules/Module1/#-estrutura-do-m√≥dulo"
  },"9": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "üìÖ Dura√ß√£o Total: 6 horas",
    "content": ". üöÄ Pronto para come√ßar? . Inicie com a Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o . ",
    "url": "/Curso_Powershell/Modules/Module1/#-dura%C3%A7%C3%A3o-total-6-horas",
    
    "relUrl": "/Modules/Module1/#-dura√ß√£o-total-6-horas"
  },"10": {
    "doc": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "title": "M√≥dulo 1: Introdu√ß√£o ao PowerShell e Shell Scripting",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/",
    
    "relUrl": "/Modules/Module1/"
  },"11": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "Sess√£o 1: Conceitos B√°sicos e Configura√ß√£o (2 horas)",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#sess%C3%A3o-1-conceitos-b%C3%A1sicos-e-configura%C3%A7%C3%A3o-2-horas",
    
    "relUrl": "/Modules/Module1/session1.html#sess√£o-1-conceitos-b√°sicos-e-configura√ß√£o-2-horas"
  },"12": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "üéØ Objetivo",
    "content": "Introduzir os conceitos b√°sicos de PowerShell e Shell Scripting, compar√°-los, e configurar o ambiente de trabalho. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#-objetivo",
    
    "relUrl": "/Modules/Module1/session1.html#-objetivo"
  },"13": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "1. Introdu√ß√£o (20 min)",
    "content": "1.1 O que √© um Shell? . | Um Shell √© um programa que serve como interface entre o utilizador e o sistema operacional. Ele recebe comandos do utilizador, interpreta esses comandos e instrui o sistema operacional a execut√°-los. Os resultados da execu√ß√£o s√£o ent√£o exibidos de volta ao utilizador. | Existem dois tipos principais de Shells: | . Shells de Linha de Comando (CLI - Command Line Interface): . | Interfaces textuais onde o usu√°rio interage digitando comandos e recebendo respostas em forma de texto. | Exemplos: PowerShell, Bash, cmd.exe (Prompt de Comando do Windows). | . Shells Gr√°ficos (GUI - Graphical User Interface): . | Interfaces visuais com √≠cones, janelas e menus. | Exemplos: Windows Explorer, Finder no macOS. | . 1.2 O que √© PowerShell? . | PowerShell √© um exemplo de shell de linha de comando e uma linguagem de script integrados em um √∫nico ambiente. | Foi inicialmente projetado como uma framework para automatizar tarefas administrativas no Windows, mas evoluiu para uma ferramenta multiplataforma dispon√≠vel em Windows, Linux e MacOS. | Atualmente, √© utilizado para diversos tipos de tarefas, como administra√ß√£o de sistemas, automa√ß√£o de fluxos de trabalho e integra√ß√£o com servi√ßos na cloud. | O PowerShell oferece muitos comandos √∫teis, mas suas capacidades podem ser expandidas a qualquer momento pela instala√ß√£o de m√≥dulos adicionais. | Baseia-se em .NET e inclui uma linguagem de scripting, bem como um interpretador de linha de comandos. | Permite a automa√ß√£o de tarefas administrativas no Windows, Linux e MacOS. | . 1.3 Diferen√ßa entre CMD e PowerShell no Windows . O CMD (Command Prompt) e o PowerShell s√£o ambos Shells de linha de comando no Windows, mas t√™m diferen√ßas fundamentais em termos de capacidade, sintaxe, funcionalidade e uso. | Aspecto | CMD (Command Prompt) | PowerShell | . | Lan√ßamento | D√©cada de 1980 (MS-DOS, Windows NT) | 2006 (Windows PowerShell), 2016 (PowerShell Core) | . | Linguagem | N√£o √© uma linguagem de programa√ß√£o completa. | Linguagem de scripting poderosa e orientada a objetos. | . | Comandos | Baseados em MS-DOS e Windows NT. Ex.: dir, copy, del. | Usa cmdlets (Get-Process, Get-Service) e aceita comandos do CMD. | . | Suporte a Objetos | Trabalha apenas com texto puro. | Trabalha com objetos .NET, permitindo manipula√ß√£o avan√ßada de dados. | . | Automa√ß√£o | Limitada, mais adequada para tarefas b√°sicas. | Ideal para automa√ß√£o de sistemas, CI/CD, gerenciamento de servidores e cloud. | . | Pipeline | Simples (envia texto de um comando para outro). | Complexo e poderoso (envia objetos completos entre cmdlets). | . | Compatibilidade | Compat√≠vel com comandos antigos do MS-DOS. | Compat√≠vel com comandos do CMD, mas oferece muito mais funcionalidades. | . | Integra√ß√£o | Focado apenas no sistema operacional local. | Pode gerenciar sistemas locais, remotos e na nuvem (Azure, AWS). | . | Editor Integrado | N√£o possui. | Inclui PowerShell ISE e √© totalmente integrado ao Visual Studio Code. | . | Exemplos de Uso | dir, ipconfig, netstat. | Get-Process, Get-Service, Get-Command, Invoke-RestMethod. | . 1.4 üöÄ Resumo . | CMD: √â antigo, limitado e trabalha apenas com texto puro. Ideal para tarefas b√°sicas e r√°pidas. | PowerShell: √â moderno, poderoso e trabalha com objetos, facilitando automa√ß√£o avan√ßada, administra√ß√£o de sistemas e integra√ß√£o com plataformas na nuvem. | . 1.5 O que √© Shell Scripting? . | Shell Scripting √© um m√©todo de automatizar tarefas por meio de scripts executados pelo Shell do sistema operacional. | Amplamente utilizado em sistemas Unix/Linux, mas tamb√©m dispon√≠vel no Windows (especialmente com o WSL - Windows Subsystem for Linux). | Inclui linguagens como Bash, Zsh, e outras. | . 1.6 Casos de uso t√≠picos de cada linguagem: . | PowerShell: Administra√ß√£o de sistemas Windows, automatiza√ß√£o de tarefas de infraestrutura em Azure, manipula√ß√£o de arquivos e relat√≥rios. | Bash: Gest√£o de servidores Linux, manipula√ß√£o de arquivos e diret√≥rios, automatiza√ß√£o de backups e processos de instala√ß√£o. | . 1.7 Funcionalidades do PowerShell . | Sistema de Ajuda Integrado: Get-Help Get-Process . | Pipeline Poderoso: Get-Process | Where-Object {$_.CPU -gt 100} . | Aliases: Exemplo: ls, cls, cd funcionam no PowerShell. | . 1.8 Como o PowerShell √© Diferente de Shells Tradicionais . | Trabalha com objetos, n√£o com texto. | Usa cmdlets com sintaxe Verbo-Substantivo. | Diferentes tipos de comandos: execut√°veis, cmdlets, fun√ß√µes, aliases. | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#1-introdu%C3%A7%C3%A3o-20-min",
    
    "relUrl": "/Modules/Module1/session1.html#1-introdu√ß√£o-20-min"
  },"14": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "2. Instala√ß√£o e Configura√ß√£o do Ambiente (30 min)",
    "content": "2.1 Windows PowerShell vs. PowerShell Core . Windows PowerShell . | Plataforma: Apenas Windows. | Baseado em: .NET Framework (antigo e obsoleto para novos projetos). | √öltima vers√£o: 5.1 (Lan√ßada em 2016, com √∫ltimas atualiza√ß√µes de seguran√ßa em 2019). | Instala√ß√£o: Pr√©-instalado em vers√µes modernas do Windows (Windows 7 SP1, Windows Server 2008 R2 e posteriores). | Objetivo Principal: Administra√ß√£o de sistemas Windows e automa√ß√£o de tarefas locais. | Limita√ß√µes: . | Apenas dispon√≠vel no Windows, sem suporte para Linux ou MacOS. | N√£o suporta .NET Core ou vers√µes modernas de .NET. | Desenvolvimento interrompido, apenas com atualiza√ß√µes de seguran√ßa. | . | Recomenda√ß√£o: Usar apenas para manter compatibilidade com sistemas antigos ou quando funcionalidades espec√≠ficas do Windows PowerShell s√£o necess√°rias. | . PowerShell Core (Agora chamado apenas de PowerShell) . | Plataforma: Multiplataforma (Windows, Linux, MacOS). | Baseado em: .NET Core / .NET 5+ (mais recente, mais eficiente e de c√≥digo aberto). | √öltima vers√£o: 7.x (Atualizado regularmente). | Instala√ß√£o: Dispon√≠vel para download no GitHub. | Objetivo Principal: Automa√ß√£o e administra√ß√£o de sistemas em m√∫ltiplas plataformas, incluindo integra√ß√£o com servi√ßos em cloud (Azure, AWS, etc). | Vantagens: . | Funciona em m√∫ltiplos sistemas operacionais. | Melhor desempenho, menor consumo de mem√≥ria e suporte para APIs modernas do .NET. | Desenvolvimento ativo e cont√≠nuo com novas funcionalidades. | Melhor compatibilidade com plataformas cloud e ferramentas DevOps. | . | Recomenda√ß√£o: Ideal para novos projetos, especialmente quando a compatibilidade multiplataforma √© necess√°ria. | . üí° Nota: Desde a vers√£o 7.0, o PowerShell Core √© simplesmente chamado de PowerShell. 2.2 Bash no Linux, MacOS e Windows (WSL) . Linux e MacOS . | Disponibilidade: O Bash √© instalado por padr√£o em praticamente todas as distribui√ß√µes Linux e no MacOS. | Alternativas: Pode ser substitu√≠do por shells modernos como zsh, fish, ou ksh. | Popularidade: Especialmente comum em sistemas Linux, onde √© usado para tarefas administrativas, scripts de inicializa√ß√£o e automa√ß√£o. | Atualiza√ß√£o: No Linux, pode ser atualizado usando o sistema de pacotes da distribui√ß√£o (ex.: apt, yum, dnf). | . Windows (WSL - Windows Subsystem for Linux) . | Disponibilidade: Dispon√≠vel nativamente no Windows 10 e 11. | Objetivo: Permitir que os utilizadores executem um ambiente Linux diretamente no Windows sem necessidade de uma m√°quina virtual completa. | Vantagens: . | Permite desenvolver e testar scripts Bash nativamente no Windows. | F√°cil integra√ß√£o com ferramentas de desenvolvimento modernas (ex.: Docker). | Melhor suporte para automa√ß√£o e ferramentas Linux em ambientes Windows. | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#2-instala%C3%A7%C3%A3o-e-configura%C3%A7%C3%A3o-do-ambiente-30-min",
    
    "relUrl": "/Modules/Module1/session1.html#2-instala√ß√£o-e-configura√ß√£o-do-ambiente-30-min"
  },"15": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "3. Como Instalar e Configurar PowerShell Core e Bash",
    "content": "3.1 Instalar PowerShell (Core) . | Windows (WinGet - Recomendado): winget install --id Microsoft.PowerShell --source winget . | Windows (MSI Installer): . | Baixar o instalador mais recente do GitHub Releases. | Executar o instalador e seguir as instru√ß√µes. | . | Linux (Debian/Ubuntu): sudo apt-get install -y powershell . | Linux (Fedora/CentOS/RHEL): sudo dnf install -y powershell . | MacOS (via Homebrew): brew install --cask powershell . | Executar o PowerShell: pwsh . | . 3.2 Instalar Bash no Windows (WSL) . | Habilitar o WSL: wsl --install . | Listar distribui√ß√µes disponiveis wsl --list --online . | Instalar uma distribui√ß√£o espec√≠fica (ex.: Ubuntu): wsl --install -d Ubuntu . | Verificar a vers√£o do WSL instalada: wsl -l -v . | Atualizar o WSL para a vers√£o 2: wsl --set-default-version 2 . | Executar o Bash no Windows: wsl . Comandos √∫teis do WSL . | wsl -l: Lista todas as distribui√ß√µes WSL instaladas. | wsl -d &lt;distribution name&gt;: Inicia uma nova sess√£o WSL usando a distribui√ß√£o especificada. | wsl --shutdown: Encerra todas as sess√µes WSL em execu√ß√£o. | wsl --terminate &lt;distribution name&gt;: Termina a sess√£o WSL da distribui√ß√£o especificada. | wsl --default &lt;distribution name&gt; ou wsl --setdefault &lt;distribution name&gt;: Define a distribui√ß√£o WSL padr√£o (usada quando se executa apenas wsl no terminal). | wsl --terminate &lt;distribution name&gt;: Termina uma distribui√ß√£o WSL em execu√ß√£o. | wsl --shutdown: Encerra todas as inst√¢ncias WSL em execu√ß√£o. | . üîó Refer√™ncias: . | https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.5 | https://www.gnu.org/software/bash/manual/ | https://learn.microsoft.com/en-us/windows/wsl/install | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#3-como-instalar-e-configurar-powershell-core-e-bash",
    
    "relUrl": "/Modules/Module1/session1.html#3-como-instalar-e-configurar-powershell-core-e-bash"
  },"16": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "4. Primeiros Comandos B√°sicos (40 min)",
    "content": "4.1 Comandos Comuns em PowerShell e Bash . (tabela pwd, ls, cd, etc.) . 4.2 Diferen√ßas entre PowerShell e Bash . | PowerShell usa objetos e cmdlets. | Bash usa texto e comandos Unix-like. | . 4.3 üîç Exemplo Pr√°tico de Diferen√ßa: Objetos vs. Texto . | PowerShell: Get-Process | Where-Object { $_.CPU -gt 100 } . | Bash: top -b -n 1 | awk '{ if($9 &gt; 0.1) print $0 }' . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#4-primeiros-comandos-b%C3%A1sicos-40-min",
    
    "relUrl": "/Modules/Module1/session1.html#4-primeiros-comandos-b√°sicos-40-min"
  },"17": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "5. Pr√°tica (30 min)",
    "content": "5.1 üíª Exerc√≠cio 1: Onde estamos? . pwd . pwd . 5.2 üíª Exerc√≠cio 2: O que existe aqui? . ls ls | Format-List . ls ls -l . 5.3 üíª Exerc√≠cio 3: Criar diret√≥rios . mkdir Aula1 . mkdir Aula1 . 5.4 üíª Exerc√≠cio 4: Entrar e sair da pasta . cd Aula1 cd .. cd Aula1 cd .. 5.5 üíª Exerc√≠cio 5: Criar um ficheiro vazio . New-Item -Name exemplo.txt -ItemType File . touch exemplo.txt . üì¶ Estes exerc√≠cios servem como base para comandos mais avan√ßados que ser√£o explorados nas sess√µes seguintes. ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html#5-pr%C3%A1tica-30-min",
    
    "relUrl": "/Modules/Module1/session1.html#5-pr√°tica-30-min"
  },"18": {
    "doc": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "title": "Session 1: Conceitos B√°sicos e Configura√ß√£o",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session1.html",
    
    "relUrl": "/Modules/Module1/session1.html"
  },"19": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "üß≠ Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#-sess%C3%A3o-2-comandos-navega%C3%A7%C3%A3o-e-ajuda",
    
    "relUrl": "/Modules/Module1/session2.html#-sess√£o-2-comandos-navega√ß√£o-e-ajuda"
  },"20": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "üéØ Objetivo",
    "content": "Explorar os comandos essenciais para trabalhar com PowerShell, aprender a navegar no sistema de ficheiros, interpretar a sa√≠da dos comandos e utilizar a ajuda integrada. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#-objetivo",
    
    "relUrl": "/Modules/Module1/session2.html#-objetivo"
  },"21": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "1. üìñ Ajuda e Descoberta de Comandos",
    "content": "Uma das grandes for√ßas do PowerShell √© a sua documenta√ß√£o integrada. Comandos como Get-Help e Get-Command permitem ao utilizador aprender diretamente a partir da consola. 1.1 ‚ÑπÔ∏è Nota Importante: . Se vires uma mensagem como: . ‚ÄúCannot find the Help files for this cmdlet on this computer. It is displaying only partial help.‚Äù . Significa que o PowerShell est√° a mostrar apenas uma vers√£o resumida. Podes: . | Tentar usar Update-Help para descarregar a vers√£o completa (se tiveres permiss√µes) | Usar Update-Help -UICulture en-US -ErrorAction SilentlyContinue para contornar restri√ß√µes de idioma ou permiss√µes | Usar o modo online: Get-Help Get-Process -Online | . 1.2 üß™ Exemplos: . Get-Help Get-Process # Mostra a ajuda b√°sica Get-Help Get-Process -Examples # Mostra exemplos pr√°ticos Get-Help Get-Process -Online # Abre no browser Get-Command *service* # Procura comandos relacionados Get-Help Get-Service -Detailed # Mostra informa√ß√£o detalhada . 1.3 üîç Como ler o output do Help: . cls Get-Help Get-Service -Detailed . Este comando permite verificar: . | Name: nome do cmdlet | Synopsis: descri√ß√£o breve | Syntax: formas de utiliza√ß√£o | Description: descri√ß√£o detalhada | Parameters: explica√ß√£o de cada par√¢metro | Remarks: observa√ß√µes adicionais, como compatibilidade | . cls Get-Help Get-Service -Examples . Este comando premite verificar os exemplos de utiliza√ß√£o pr√°ticos. 1.4 üîé Comando para inspecionar objetos: . Get-Service | Get-Member . O Get-Member permite ver as propriedades (ex: Status, DisplayName) e m√©todos dos objetos devolvidos. Get-Service | Select-Object Status, DisplayName, ServiceType . üß© Exerc√≠cios . Neste exerc√≠cio vais aprender a usar a ajuda integrada no PowerShell para perceber como um comando funciona. Passos: . | Abre o PowerShell | Corre o seguinte comando para ver uma lista de todos os servi√ßos no sistema: Get-Service . Depois, experimenta filtrar por nome: . | Um servi√ßo espec√≠fico: Get-Service wuauserv . | Usando um wildcard (por exemplo, todos os que come√ßam por ‚Äúc‚Äù): Get-Service c* . | . | Escreve o seguinte comando para veres a ajuda b√°sica: Get-Help Get-Service | V√™ os exemplos com: Get-Help Get-Service -Examples | Tenta abrir a ajuda online (se poss√≠vel): Get-Help Get-Service -Online | Usa o Get-Member para descobrir que propriedades existem em objetos de servi√ßo. Depois usa Select-Object para escolher apenas as propriedades que permitam ver o Status, Nome do utilizador e tipo de servi√ßo. Exemplo de solu√ß√£o Get-Service | Get-Member Get-Service | Select-Object Status, UserName, ServiceType . | Cria um comando que obtenha os detalhes de um ou mais processos que costumas usar, como chrome, notepad, ou outro processo que esteja a correr no teu sistema. Queremos listar os seguintes detalhes: . | Nome do processo | ID (PID - {completa}) | Utiliza√ß√£o de CPU (CPU - mostra o tempo total de CPU utilizado (em segundos).) | Mem√≥ria utilizada (Working Set - mostra a mem√≥ria f√≠sica (em bytes) usada pelo processo.) | Tempo de execu√ß√£o (StartTime - {completa}) | Estado (Responding - indica se a aplica√ß√£o est√° a responder (True ou False)) | . Exemplo de solu√ß√£o Get-Process chrome | Select-Object Name, Id, CPU, WorkingSet, StartTime, Responding . | . üí° Dica: Experimenta com diferentes nomes de processos (ex: notepad, powershell, explorer) e compara os valores. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#1--ajuda-e-descoberta-de-comandos",
    
    "relUrl": "/Modules/Module1/session2.html#1--ajuda-e-descoberta-de-comandos"
  },"22": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "2. üîå Providers",
    "content": "No PowerShell, providers s√£o interfaces que permitem aceder, navegar e manipular diferentes tipos de armazenamento (como o sistema de ficheiros, o registo do Windows ou vari√°veis de ambiente) usando comandos comuns como Get-ChildItem ou Set-Location, tal como farias com pastas e ficheiros. Ou seja, mesmo que estejas a trabalhar com algo que n√£o √© um disco (como vari√°veis ou chaves de registo), podes usar os mesmos comandos de navega√ß√£o como se estivesses a explorar um sistema de pastas. Podes ver todos os providers dispon√≠veis no teu sistema com o seguinte comando: . Get-PSProvider . 2.1 üìÇ FileSystem . Permite interagir com pastas e ficheiros no disco, tal como estamos habituados. Este √© o provider usado por omiss√£o quando abrimos o PowerShell. 2.2 üß¨ Registry . Permite navegar no registo do Windows como se fosse uma estrutura de pastas. Tem dois ‚Äúdrives‚Äù: HKLM: (Local Machine) e HKCU: (Current User). Exemplos: . Set-Location HKCU:\\Software Get-ChildItem HKLM:\\SYSTEM . 2.3 üå± Environment . Permite aceder e modificar vari√°veis de ambiente (como PATH, TEMP, USERNAME, etc). Exemplos: . Get-ChildItem Env: $Env:USERNAME $Env:TEMP . 2.4 üè∑Ô∏è Alias . Permite listar e criar atalhos (aliases) para comandos do PowerShell. Exemplos: . Get-ChildItem Alias: Get-Alias ls New-Alias listar Get-ChildItem . ‚úÖ Outros providers . Consoante o sistema ou m√≥dulos carregados, podem existir outros providers dispon√≠veis. Por exemplo: . | Function: ‚Äì acede √†s fun√ß√µes definidas no PowerShell. | Variable: ‚Äì acede √†s vari√°veis em mem√≥ria. | . Para mais detalhes sobre providers no PowerShell, consulta a documenta√ß√£o oficial: üîó about_Providers - PowerShell Documentation . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#2--providers",
    
    "relUrl": "/Modules/Module1/session2.html#2--providers"
  },"23": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "3. üìÅ Navega√ß√£o no Sistema de Ficheiros",
    "content": "3.1 üß™ Comandos √∫teis: . Get-Location # Mostra a localiza√ß√£o atual (pwd) Set-Location .. # Sobe um n√≠vel (cd ..) Get-ChildItem # Lista ficheiros e pastas (ls) Clear-Host # Limpa o terminal (cls) Push-Location # Guarda a localiza√ß√£o atual Pop-Location # Volta √† localiza√ß√£o guardada . 3.2 üåê Dicas: . | -Force mostra ficheiros ocultos. | Caminhos relativos (ex: ..\\Documentos) mudam com a localiza√ß√£o atual. | Caminhos absolutos (ex: C:\\Users\\Nome\\Documentos) s√£o sempre os mesmos. | Usa ~ para ir para a tua pasta pessoal. | . 3.3 üß© Exerc√≠cios . üí° Nota: Usa sempre os cmdlets do PowerShell como Set-Location ou Get-ChildItem em vez dos comandos do bash como cd ou ls. Neste exerc√≠cio vais praticar os comandos de navega√ß√£o no sistema de ficheiros no PowerShell. Passos: . | Abre o PowerShell. | Vai para a tua pasta pessoal: C√≥digo Set-Location ~ . | Corre o seguinte comando para criar a estrutura de pastas: . New-Item -Path \"~\\CursoPS\\Modulo1\\Exemplos\" -ItemType Directory -Force . | Verifica a estrutura final de pastas executando o seguinte: Set-Location ~ Get-ChildItem -Recurse \"CursoPS\" . Estrutura esperada: . CursoPS ‚îÇ ‚îî‚îÄ‚îÄ Modulo1 ‚îÇ ‚îî‚îÄ‚îÄ Exemplos . | Navega at√© √† pasta CursoPS: C√≥digo Set-Location \"~\\CursoPS\" . | Navega at√© √† pasta Modulo1 usando caminho relativo: C√≥digo Set-Location .\\Modulo1 . | Agora navega at√© √† pasta Exemplos usando: . | Caminho relativo: C√≥digo Set-Location .\\Exemplos . | Caminho absoluto: C√≥digo Set-Location \"~\\CursoPS\\Modulo1\\Exemplos\" . | . | Testa a navega√ß√£o com Push-Location e Pop-Location: . | Guarda a localiza√ß√£o atual, vai para outro local, e volta: Push-Location Set-Location ~ Pop-Location . | . | . ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#3--navega%C3%A7%C3%A3o-no-sistema-de-ficheiros",
    
    "relUrl": "/Modules/Module1/session2.html#3--navega√ß√£o-no-sistema-de-ficheiros"
  },"24": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "4. üå± Vari√°veis de ambiente",
    "content": "O provider Environment permite aceder e manipular vari√°veis de ambiente do sistema operativo diretamente no PowerShell. Estas vari√°veis s√£o usadas por aplica√ß√µes e scripts para obter informa√ß√µes como o nome do utilizador, a pasta tempor√°ria, o caminho de instala√ß√£o, entre outras. 4.1 üìã Consultar vari√°veis . Podes ver todas as vari√°veis de ambiente com: . Get-ChildItem Env: . Para consultar uma vari√°vel espec√≠fica: . $Env:USERNAME $Env:PATH $Env:TEMP . 4.2 ‚úèÔ∏è Alterar ou definir vari√°veis (temporariamente) . Podes criar ou alterar vari√°veis diretamente: . $Env:NOVAVARIAVEL = \"Valor de teste\" $Env:PATH += \";C:\\Ferramentas\" . ‚ö†Ô∏è Estas altera√ß√µes s√≥ duram enquanto a sess√£o do PowerShell estiver ativa. 4.3 üßº Remover vari√°veis . Podes remover uma vari√°vel da sess√£o com: . Remove-Item Env:NOVAVARIAVEL . 4.4 üß© Exerc√≠cios . Vamos experimentar criar e aceder a vari√°veis de ambiente. | Cria uma nova vari√°vel chamada ‚ÄúCURSO‚Äù e com o valor ‚ÄúPowerShell &amp; Shell Scripting‚Äù C√≥digo $Env:CURSO = \"PowerShell &amp; Shell Scripting\" . | Verifica o valor: C√≥digo $Env:CURSO . | Acede √† vari√°vel usando letras min√∫sculas: $Env:curso . O que observas? . Explica√ß√£o No PowerShell, as vari√°veis de ambiente n√£o s√£o sens√≠veis a mai√∫sculas ou min√∫sculas. Ou seja, $Env:CURSO, $Env:curso e $Env:Curso referem-se exatamente √† mesma vari√°vel. Isto acontece porque o provider Environment est√° ligado ao sistema operativo Windows, que tamb√©m n√£o distingue entre mai√∫sculas e min√∫sculas neste contexto. | Remove a vari√°vel: Remove-Item Env:CURSO . | Refaz os exerc√≠cios do ponto 3 (navegar no sistema de ficheiros), mas em vez de usares ~ para aceder √† tua pasta pessoal, usa a vari√°vel de ambiente $Env:USERPROFILE. | Vai para a tua pasta pessoal: Set-Location $Env:USERPROFILE . | Se necess√°rio cria novamente a estrutura de pastas: New-Item -Path \"$Env:USERPROFILE\\CursoPS\\Modulo1\\Exemplos\" -ItemType Directory -Force . | Explora a estrutura usando comandos de navega√ß√£o como Set-Location, Get-Location e Push-Location. | . | . üí° Dica: Podes confirmar que $Env:USERPROFILE e ~ apontam para o mesmo local com: . \"$Env:USERPROFILE\" Resolve-Path ~ . 4.5 üìå Nota importante . As vari√°veis definidas ou alteradas com $Env: s√≥ afetam a sess√£o atual do PowerShell. Se quiseres definir vari√°veis de ambiente de forma permanente (por exemplo, para todas as sess√µes), precisas de usar ferramentas do sistema operativo ou editar as defini√ß√µes no Painel de Controlo (Windows) ou via registo (Registry). Podes combinar este provider com outros comandos para criar scripts mais din√¢micos e adapt√°veis ao ambiente onde est√£o a correr. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#4--vari%C3%A1veis-de-ambiente",
    
    "relUrl": "/Modules/Module1/session2.html#4--vari√°veis-de-ambiente"
  },"25": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "5. üè∑Ô∏è Alias",
    "content": "No PowerShell, um alias √© um nome alternativo (geralmente mais curto) para um comando. Isto permite escrever comandos de forma mais r√°pida ou usar nomes familiares (por exemplo, do Bash). Exemplo: ls √© um alias para Get-ChildItem. Podes ver todos os aliases dispon√≠veis com: . Get-Alias . 5.1 üîé Exemplos simples . Verifica o comando por tr√°s de um alias: . Get-Alias ls . Podes ver todos os aliases que apontam para Get-ChildItem com: . Get-Alias | Where-Object {$_.Definition -eq 'Get-ChildItem'} . Resultado ser√° algo como: . | dir | gci | ls | . Cria um alias personalizado: . New-Alias listar Get-ChildItem . Usa o alias que criaste: . listar . Remove o alias: . Remove-Item Alias:listar . ‚ö†Ô∏è Aliases personalizados s√≥ duram durante a sess√£o atual. Mais √† frente veremos como personalizar o profile do utilizador e criar aliases persistentes. 5.2 üîó Documenta√ß√£o oficial . about_Aliases - PowerShell Documentation . 5.3 üß© Exerc√≠cios . | Descobre que comando est√° por tr√°s dos seguintes aliases: . | ls | pwd | cls | . | Cria um alias chamado meuservicos para o comando Get-Service. | . Resposta New-Alias meuservicos Get-Service . | Corre o alias meuservicos e confirma que funciona. meuservicos . | Remove o alias meuservicos. | . Resposta Remove-Item Alias:meuservicos . | Cria um alias chamado procativos para o comando Get-Process. | . Resposta New-Alias procativos Get-Process procativos . üí° Dica: Como os aliases n√£o aceitam argumentos ou pipelines, devem ser usados apenas para comandos simples. Para comandos mais complexos, como Get-Service | Select-Object ‚Ä¶, considera criar uma fun√ß√£o. ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html#5-%EF%B8%8F-alias",
    
    "relUrl": "/Modules/Module1/session2.html#5-Ô∏è-alias"
  },"26": {
    "doc": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "title": "Sess√£o 2: Comandos, Navega√ß√£o e Ajuda",
    "content": " ",
    "url": "/Curso_Powershell/Modules/Module1/session2.html",
    
    "relUrl": "/Modules/Module1/session2.html"
  }
}
